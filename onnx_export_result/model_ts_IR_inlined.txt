graph(%self : __torch__.ScriptableAdapter,
      %inputs.1 : (Dict(str, Tensor))):
  %2 : bool = prim::Constant[value=1]() # /home/kelechi/detectron2/tools/deploy/export_model.py:90:23
  %3 : NoneType = prim::Constant()
  %4 : bool = prim::Constant[value=0]() # /home/kelechi/detectron2/tools/deploy/export_model.py:89:72
  %model : __torch__.detectron2.modeling.meta_arch.rcnn.GeneralizedRCNN = prim::GetAttr[name="model"](%self)
  %6 : Dict(str, Tensor) = prim::TupleUnpack(%inputs.1)
  %7 : Dict(str, Tensor)[] = prim::ListConstruct(%6)
  %15 : str = prim::Constant[value="Empty Instances does not support __len__!"]() # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:173:34
  %16 : float = prim::Constant[value=1e-08]() # /home/kelechi/detectron2/detectron2/modeling/poolers.py:54:70
  %17 : str = prim::Constant[value="AssertionError: The shape of the tensor in the boxes list is not correct as List[Tensor[L, 4]]"]()
  %18 : str = prim::Constant[value="AssertionError: The boxes tensor shape is not correct as Tensor[K, 5]"]()
  %19 : str = prim::Constant[value="AssertionError: proposal_boxes is None and cannot be accessed!"]()
  %20 : str = prim::Constant[value="AssertionError: pred_boxes is None and cannot be accessed!"]()
  %21 : str = prim::Constant[value="AssertionError: pred_classes is None and cannot be accessed!"]()
  %22 : int = prim::Constant[value=6]() # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:44:78
  %23 : str = prim::Constant[value="Indexing on Boxes with {} failed to return a matrix!"]() # /home/kelechi/detectron2/detectron2/structures/boxes.py:236:29
  %24 : str = prim::Constant[value="AssertionError: Box tensor contains infinite or NaN!"]()
  %25 : str = prim::Constant[value="cpu"]() # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:72:53
  %26 : int = prim::Constant[value=4000]() # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:72:24
  %27 : int = prim::Constant[value=20000]() # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:72:64
  %28 : int = prim::Constant[value=11]() # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:106:47
  %29 : (str, str, str, str, str, str, str, str) = prim::Constant[value=("proposal_boxes", "objectness_logits", "pred_boxes", "scores", "pred_classes", "pred_masks", "pred_keypoints", "pred_keypoint_heatmaps")]()
  %30 : float = prim::Constant[value=0.5]() # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:93:30
  %31 : int = prim::Constant[value=-4]()
  %32 : int = prim::Constant[value=-3]()
  %33 : str = prim::Constant[value="nearest"]() # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:153:88
  %34 : float = prim::Constant[value=2.]() # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:153:78
  %35 : int = prim::Constant[value=3]() # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:358:40
  %36 : int = prim::Constant[value=2]() # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:358:50
  %37 : float = prim::Constant[value=0.10000000000000001]()
  %38 : str = prim::Constant[value="ResNet takes an input of shape (N, C, H, W). Got {} instead!"]() # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:443:29
  %39 : str = prim::Constant[value="stem"]() # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:446:11
  %40 : int = prim::Constant[value=5]() # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4051:22
  %41 : str = prim::Constant[value="builtins.NotImplementedError"]() # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4098:14
  %42 : str = prim::Constant[value="Input Error: Only 3D, 4D and 5D input Tensors supported (got {}D) for the modes: nearest | linear | bilinear | bicubic | trilinear | area | nearest-exact (got {})"]() # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4111:8
  %43 : float = prim::Constant[value=0.]()
  %44 : int = prim::Constant[value=1]()
  %45 : str = prim::Constant[value="image"]() # /home/kelechi/detectron2/detectron2/modeling/meta_arch/rcnn.py:227:49
  %46 : bool = prim::Constant[value=0]()
  %47 : str = prim::Constant[value="square_size"]() # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:124:16
  %48 : int = prim::Constant[value=9223372036854775807]() # /home/kelechi/detectron2/detectron2/structures/image_list.py:124:26
  %49 : int = prim::Constant[value=0]() # /home/kelechi/detectron2/detectron2/structures/image_list.py:81:30
  %50 : str = prim::Constant[value="AssertionError: "]()
  %51 : int = prim::Constant[value=-2]() # /home/kelechi/detectron2/detectron2/structures/image_list.py:85:28
  %52 : int = prim::Constant[value=-1]() # /home/kelechi/detectron2/detectron2/structures/image_list.py:87:47
  %53 : str = prim::Constant[value="size_divisibility"]() # /home/kelechi/detectron2/detectron2/structures/image_list.py:96:15
  %54 : str = prim::Constant[value="floor"]() # /home/kelechi/detectron2/detectron2/structures/image_list.py:101:75
  %55 : int = prim::Constant[value=4]() # /home/kelechi/detectron2/detectron2/structures/image_list.py:105:52
  %56 : str = prim::Constant[value="constant"]()
  %57 : NoneType = prim::Constant() # /home/kelechi/detectron2/detectron2/modeling/meta_arch/rcnn.py:206:33
  %58 : bool = prim::Constant[value=1]() # /home/kelechi/detectron2/detectron2/modeling/meta_arch/rcnn.py:215:33
  %59 : str = prim::Constant[value="AssertionError: Scripting is not supported for postprocess."]()
  %images.1 : Tensor[] = prim::ListConstruct()
  %61 : int = aten::len(%7) # /home/kelechi/detectron2/detectron2/modeling/meta_arch/rcnn.py:227:17
   = prim::Loop(%61, %58) # /home/kelechi/detectron2/detectron2/modeling/meta_arch/rcnn.py:227:17
    block0(%62 : int):
      %x.45 : Dict(str, Tensor) = aten::__getitem__(%7, %62) # /home/kelechi/detectron2/detectron2/modeling/meta_arch/rcnn.py:227:17
      %64 : Tensor = aten::__getitem__(%x.45, %45) # /home/kelechi/detectron2/detectron2/modeling/meta_arch/rcnn.py:227:47
      %pixel_mean.2 : Tensor = prim::GetAttr[name="pixel_mean"](%model)
      %66 : Device = prim::device(%pixel_mean.2)
      %67 : Tensor = aten::to(%64, %66, %57, %46, %46) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:177:11
      %68 : Tensor[] = aten::append(%images.1, %67) # /home/kelechi/detectron2/detectron2/modeling/meta_arch/rcnn.py:227:17
      -> (%58)
  %images.5 : Tensor[] = prim::ListConstruct()
  %70 : int = aten::len(%images.1) # /home/kelechi/detectron2/detectron2/modeling/meta_arch/rcnn.py:228:17
   = prim::Loop(%70, %58) # /home/kelechi/detectron2/detectron2/modeling/meta_arch/rcnn.py:228:17
    block0(%71 : int):
      %x.39 : Tensor = aten::__getitem__(%images.1, %71) # /home/kelechi/detectron2/detectron2/modeling/meta_arch/rcnn.py:228:17
      %pixel_mean.1 : Tensor = prim::GetAttr[name="pixel_mean"](%model)
      %74 : Tensor = aten::sub(%x.39, %pixel_mean.1, %44) # /home/kelechi/detectron2/detectron2/modeling/meta_arch/rcnn.py:228:19
      %pixel_std : Tensor = prim::GetAttr[name="pixel_std"](%model)
      %76 : Tensor = aten::div(%74, %pixel_std) # /home/kelechi/detectron2/detectron2/modeling/meta_arch/rcnn.py:228:19
      %77 : Tensor[] = aten::append(%images.5, %76) # /home/kelechi/detectron2/detectron2/modeling/meta_arch/rcnn.py:228:17
      -> (%58)
  %backbone.1 : __torch__.detectron2.modeling.backbone.fpn.FPN = prim::GetAttr[name="backbone"](%model)
  %_size_divisibility : int = prim::GetAttr[name="_size_divisibility"](%backbone.1)
  %backbone : __torch__.detectron2.modeling.backbone.fpn.FPN = prim::GetAttr[name="backbone"](%model)
  %_square_pad : int = prim::GetAttr[name="_square_pad"](%backbone)
  %82 : Dict(str, int) = prim::DictConstruct(%47, %_square_pad)
  %83 : int = aten::len(%images.5) # /home/kelechi/detectron2/detectron2/structures/image_list.py:81:15
  %84 : bool = aten::gt(%83, %49) # /home/kelechi/detectron2/detectron2/structures/image_list.py:81:15
   = prim::If(%84) # /home/kelechi/detectron2/detectron2/structures/image_list.py:81:8
    block0():
      -> ()
    block1():
       = prim::RaiseException(%50, %57) # /home/kelechi/detectron2/detectron2/structures/image_list.py:81:8
      -> ()
  %85 : int = aten::len(%images.5) # /home/kelechi/detectron2/detectron2/structures/image_list.py:83:8
   = prim::Loop(%85, %58) # /home/kelechi/detectron2/detectron2/structures/image_list.py:83:8
    block0(%86 : int):
      %t.4 : Tensor = aten::__getitem__(%images.5, %86) # /home/kelechi/detectron2/detectron2/structures/image_list.py:83:8
      %88 : int[] = aten::size(%t.4) # <string>:13:9
      %89 : int[] = aten::slice(%88, %57, %51, %44) # /home/kelechi/detectron2/detectron2/structures/image_list.py:85:19
      %90 : Tensor = aten::__getitem__(%images.5, %49) # /home/kelechi/detectron2/detectron2/structures/image_list.py:85:35
      %91 : int[] = aten::size(%90) # <string>:13:9
      %92 : int[] = aten::slice(%91, %57, %51, %44) # /home/kelechi/detectron2/detectron2/structures/image_list.py:85:35
      %93 : bool = aten::eq(%89, %92) # /home/kelechi/detectron2/detectron2/structures/image_list.py:85:19
       = prim::If(%93) # /home/kelechi/detectron2/detectron2/structures/image_list.py:85:12
        block0():
          -> ()
        block1():
          %94 : int[] = aten::size(%t.4) # <string>:13:9
          %95 : str = aten::str(%94) # /home/kelechi/detectron2/detectron2/structures/image_list.py:85:12
          %96 : str = aten::add(%50, %95) # /home/kelechi/detectron2/detectron2/structures/image_list.py:85:12
           = prim::RaiseException(%96, %57) # /home/kelechi/detectron2/detectron2/structures/image_list.py:85:12
          -> ()
      -> (%58)
  %image_sizes.1 : (int, int)[] = prim::ListConstruct()
  %98 : int = aten::len(%images.5) # /home/kelechi/detectron2/detectron2/structures/image_list.py:87:22
   = prim::Loop(%98, %58) # /home/kelechi/detectron2/detectron2/structures/image_list.py:87:22
    block0(%99 : int):
      %im.1 : Tensor = aten::__getitem__(%images.5, %99) # /home/kelechi/detectron2/detectron2/structures/image_list.py:87:22
      %101 : int[] = aten::size(%im.1) # <string>:13:9
      %102 : int = aten::__getitem__(%101, %51) # /home/kelechi/detectron2/detectron2/structures/image_list.py:87:24
      %103 : int[] = aten::size(%im.1) # <string>:13:9
      %104 : int = aten::__getitem__(%103, %52) # /home/kelechi/detectron2/detectron2/structures/image_list.py:87:38
      %105 : (int, int) = prim::TupleConstruct(%102, %104)
      %106 : (int, int)[] = aten::append(%image_sizes.1, %105) # /home/kelechi/detectron2/detectron2/structures/image_list.py:87:22
      -> (%58)
  %image_sizes_tensor.1 : Tensor[] = prim::ListConstruct()
  %108 : int = aten::len(%image_sizes.1) # /home/kelechi/detectron2/detectron2/structures/image_list.py:88:29
   = prim::Loop(%108, %58) # /home/kelechi/detectron2/detectron2/structures/image_list.py:88:29
    block0(%109 : int):
      %x.41 : (int, int) = aten::__getitem__(%image_sizes.1, %109) # /home/kelechi/detectron2/detectron2/structures/image_list.py:88:29
      %111 : int, %112 : int = prim::TupleUnpack(%x.41)
      %113 : int[] = prim::ListConstruct(%111, %112)
      %114 : Tensor = aten::as_tensor(%113, %57, %57) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:29:15
      %115 : Tensor[] = aten::append(%image_sizes_tensor.1, %114) # /home/kelechi/detectron2/detectron2/structures/image_list.py:88:29
      -> (%58)
  %116 : Tensor = aten::stack(%image_sizes_tensor.1, %49) # /home/kelechi/detectron2/detectron2/structures/image_list.py:89:19
  %117 : Tensor, %118 : Tensor = aten::max(%116, %49, %46) # /home/kelechi/detectron2/detectron2/structures/image_list.py:89:19
  %square_size.1 : int = aten::get(%82, %47, %49) # /home/kelechi/detectron2/detectron2/structures/image_list.py:92:26
  %120 : bool = aten::gt(%square_size.1, %49) # /home/kelechi/detectron2/detectron2/structures/image_list.py:93:15
   = prim::If(%120) # /home/kelechi/detectron2/detectron2/structures/image_list.py:93:12
    block0():
      %121 : Tensor = aten::select(%117, %49, %49) # /home/kelechi/detectron2/detectron2/structures/image_list.py:95:16
      %122 : int = prim::dtype(%121)
      %123 : Device = prim::device(%121)
      %124 : Tensor = aten::tensor(%square_size.1, %122, %123, %46)
      %125 : Tensor = aten::copy_(%121, %124, %46) # /home/kelechi/detectron2/detectron2/structures/image_list.py:95:16
      %126 : Tensor = aten::select(%117, %49, %44) # /home/kelechi/detectron2/detectron2/structures/image_list.py:95:30
      %127 : int = prim::dtype(%126)
      %128 : Device = prim::device(%126)
      %129 : Tensor = aten::tensor(%square_size.1, %127, %128, %46)
      %130 : Tensor = aten::copy_(%126, %129, %46) # /home/kelechi/detectron2/detectron2/structures/image_list.py:95:16
      -> ()
    block1():
      -> ()
  %131 : bool = aten::__contains__(%82, %53) # /home/kelechi/detectron2/detectron2/structures/image_list.py:96:15
  %size_divisibility.27 : int = prim::If(%131) # /home/kelechi/detectron2/detectron2/structures/image_list.py:96:12
    block0():
      %size_divisibility.3 : int = aten::__getitem__(%82, %53) # /home/kelechi/detectron2/detectron2/structures/image_list.py:97:36
      -> (%size_divisibility.3)
    block1():
      -> (%_size_divisibility)
  %134 : bool = aten::gt(%size_divisibility.27, %44) # /home/kelechi/detectron2/detectron2/structures/image_list.py:98:11
  %max_size : Tensor = prim::If(%134) # /home/kelechi/detectron2/detectron2/structures/image_list.py:98:8
    block0():
      %136 : int = aten::sub(%size_divisibility.27, %44) # /home/kelechi/detectron2/detectron2/structures/image_list.py:101:36
      %137 : Tensor = aten::add(%117, %136, %44) # /home/kelechi/detectron2/detectron2/structures/image_list.py:101:24
      %138 : Tensor = aten::div(%137, %size_divisibility.27, %54) # /home/kelechi/detectron2/detectron2/structures/image_list.py:101:24
      %max_size.9 : Tensor = aten::mul(%138, %size_divisibility.27) # /home/kelechi/detectron2/detectron2/structures/image_list.py:101:24
      -> (%max_size.9)
    block1():
      -> (%117)
  %140 : Tensor = aten::to(%max_size, %55, %46, %46, %57) # /home/kelechi/detectron2/detectron2/structures/image_list.py:105:34
  %max_size.25 : int[] = prim::tolist(%140, %44, %49)
  %142 : int = aten::len(%images.5) # /home/kelechi/detectron2/detectron2/structures/image_list.py:110:11
  %143 : bool = aten::eq(%142, %44) # /home/kelechi/detectron2/detectron2/structures/image_list.py:110:11
  %batched_imgs : Tensor = prim::If(%143) # /home/kelechi/detectron2/detectron2/structures/image_list.py:110:8
    block0():
      %image_size.2 : (int, int) = aten::__getitem__(%image_sizes.1, %49) # /home/kelechi/detectron2/detectron2/structures/image_list.py:113:25
      %146 : int = aten::__getitem__(%max_size.25, %52) # /home/kelechi/detectron2/detectron2/structures/image_list.py:114:31
      %147 : int = prim::TupleIndex(%image_size.2, %44)
      %148 : int = aten::sub(%146, %147) # /home/kelechi/detectron2/detectron2/structures/image_list.py:114:31
      %149 : int = aten::__getitem__(%max_size.25, %51) # /home/kelechi/detectron2/detectron2/structures/image_list.py:114:64
      %150 : int = prim::TupleIndex(%image_size.2, %49)
      %151 : int = aten::sub(%149, %150) # /home/kelechi/detectron2/detectron2/structures/image_list.py:114:64
      %padding_size.1 : int[] = prim::ListConstruct(%49, %148, %49, %151)
      %153 : Tensor = aten::__getitem__(%images.5, %49) # /home/kelechi/detectron2/detectron2/structures/image_list.py:115:33
      %154 : Tensor = aten::pad(%153, %padding_size.1, %56, %43) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4552:11
      %batched_imgs.1 : Tensor = aten::unsqueeze_(%154, %49) # /home/kelechi/detectron2/detectron2/structures/image_list.py:115:27
      -> (%batched_imgs.1)
    block1():
      %156 : int = aten::len(%images.5) # /home/kelechi/detectron2/detectron2/structures/image_list.py:118:27
      %157 : int[] = prim::ListConstruct(%156)
      %158 : Tensor = aten::__getitem__(%images.5, %49) # /home/kelechi/detectron2/detectron2/structures/image_list.py:118:48
      %159 : int[] = aten::size(%158) # <string>:13:9
      %160 : int[] = aten::slice(%159, %57, %51, %44) # /home/kelechi/detectron2/detectron2/structures/image_list.py:118:48
      %161 : int[] = aten::list(%160) # /home/kelechi/detectron2/detectron2/structures/image_list.py:118:43
      %162 : int[] = aten::add(%157, %161) # /home/kelechi/detectron2/detectron2/structures/image_list.py:118:26
      %163 : int[] = aten::list(%max_size.25) # /home/kelechi/detectron2/detectron2/structures/image_list.py:118:73
      %batch_shape.1 : int[] = aten::add(%162, %163) # /home/kelechi/detectron2/detectron2/structures/image_list.py:118:26
      %165 : Tensor = aten::__getitem__(%images.5, %49) # /home/kelechi/detectron2/detectron2/structures/image_list.py:122:27
      %batched_imgs.3 : Tensor = aten::new_full(%165, %batch_shape.1, %43, %57, %57, %57, %57) # /home/kelechi/detectron2/detectron2/structures/image_list.py:122:27
      %167 : Tensor = aten::__getitem__(%images.5, %49) # /home/kelechi/detectron2/detectron2/structures/image_list.py:123:58
      %168 : Device = prim::device(%167)
      %batched_imgs.7 : Tensor = aten::to(%batched_imgs.3, %168, %57, %46, %46) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:177:11
      %170 : int = aten::len(%images.5) # /home/kelechi/detectron2/detectron2/structures/image_list.py:124:12
      %171 : int[] = prim::ListConstruct(%48, %170)
      %172 : int = prim::min(%171) # /home/kelechi/detectron2/detectron2/structures/image_list.py:124:12
       = prim::Loop(%172, %58) # /home/kelechi/detectron2/detectron2/structures/image_list.py:124:12
        block0(%i.3 : int):
          %img.1 : Tensor = aten::__getitem__(%images.5, %i.3) # /home/kelechi/detectron2/detectron2/structures/image_list.py:124:12
          %175 : Tensor = aten::select(%batched_imgs.7, %49, %i.3) # /home/kelechi/detectron2/detectron2/structures/image_list.py:127:16
          %176 : int[] = aten::size(%img.1) # <string>:13:9
          %177 : int = aten::__getitem__(%176, %51) # /home/kelechi/detectron2/detectron2/structures/image_list.py:127:39
          %178 : Tensor = aten::slice(%175, %51, %57, %177, %44) # /home/kelechi/detectron2/detectron2/structures/image_list.py:127:16
          %179 : int[] = aten::size(%img.1) # <string>:13:9
          %180 : int = aten::__getitem__(%179, %52) # /home/kelechi/detectron2/detectron2/structures/image_list.py:127:56
          %181 : Tensor = aten::slice(%178, %52, %57, %180, %44) # /home/kelechi/detectron2/detectron2/structures/image_list.py:127:16
          %182 : Tensor = aten::copy_(%181, %img.1, %46) # /home/kelechi/detectron2/detectron2/structures/image_list.py:127:16
          -> (%58)
      -> (%batched_imgs.7)
  %183 : Tensor = aten::contiguous(%batched_imgs, %49) # /home/kelechi/detectron2/detectron2/structures/image_list.py:129:25
  %images.2 : __torch__.detectron2.structures.image_list.ImageList = prim::CreateObject() # /home/kelechi/detectron2/detectron2/structures/image_list.py:129:15
   = prim::SetAttr[name="tensor"](%images.2, %183)
   = prim::SetAttr[name="image_sizes"](%images.2, %image_sizes.1)
  %backbone.2 : __torch__.detectron2.modeling.backbone.fpn.FPN = prim::GetAttr[name="backbone"](%model)
  %tensor.43 : Tensor = prim::GetAttr[name="tensor"](%images.2)
  %bottom_up : __torch__.detectron2.modeling.backbone.resnet.ResNet = prim::GetAttr[name="bottom_up"](%backbone.2)
  %188 : int = aten::dim(%tensor.43) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:443:15
  %189 : bool = aten::eq(%188, %55) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:443:15
   = prim::If(%189) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:443:8
    block0():
      -> ()
    block1():
      %190 : int[] = aten::size(%tensor.43) # <string>:13:9
      %191 : str = aten::format(%38, %190) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:443:29
      %192 : str = aten::add(%50, %191) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:443:8
       = prim::RaiseException(%192, %57) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:443:8
      -> ()
  %bottom_up_features.1 : Dict(str, Tensor) = prim::DictConstruct()
  %stem : __torch__.detectron2.modeling.backbone.resnet.BasicStem = prim::GetAttr[name="stem"](%bottom_up)
  %conv1.2 : __torch__.detectron2.layers.wrappers.Conv2d = prim::GetAttr[name="conv1"](%stem)
  %weight.21 : Tensor = prim::GetAttr[name="weight"](%conv1.2)
  %bias.34 : Tensor? = prim::GetAttr[name="bias"](%conv1.2)
  %198 : int[] = prim::ListConstruct(%36, %36)
  %199 : int[] = prim::ListConstruct(%35, %35)
  %200 : int[] = prim::ListConstruct(%44, %44)
  %x.49 : Tensor = aten::conv2d(%tensor.43, %weight.21, %bias.34, %198, %199, %200, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.7 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv1.2)
  %203 : bool = prim::requires_grad(%x.49)
  %x.83 : Tensor = prim::If(%203) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.23 : Tensor = prim::GetAttr[name="weight"](%norm.7)
      %running_var.14 : Tensor = prim::GetAttr[name="running_var"](%norm.7)
      %eps.14 : float = prim::GetAttr[name="eps"](%norm.7)
      %208 : Tensor = aten::add(%running_var.14, %eps.14, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %209 : Tensor = aten::rsqrt(%208) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.4 : Tensor = aten::mul(%weight.23, %209) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.36 : Tensor = prim::GetAttr[name="bias"](%norm.7)
      %running_mean.14 : Tensor = prim::GetAttr[name="running_mean"](%norm.7)
      %213 : Tensor = aten::mul(%running_mean.14, %scale.4) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.38 : Tensor = aten::sub(%bias.36, %213, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %215 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.18 : Tensor = aten::reshape(%scale.4, %215) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %217 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.40 : Tensor = aten::reshape(%bias.38, %217) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.8 : int = prim::dtype(%x.49)
      %220 : Tensor = aten::to(%scale.18, %out_dtype.8, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %221 : Tensor = aten::mul(%x.49, %220) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %222 : Tensor = aten::to(%bias.40, %out_dtype.8, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %223 : Tensor = aten::add(%221, %222, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%223)
    block1():
      %running_mean.16 : Tensor = prim::GetAttr[name="running_mean"](%norm.7)
      %running_var.16 : Tensor = prim::GetAttr[name="running_var"](%norm.7)
      %weight.25 : Tensor = prim::GetAttr[name="weight"](%norm.7)
      %bias.42 : Tensor = prim::GetAttr[name="bias"](%norm.7)
      %eps.16 : float = prim::GetAttr[name="eps"](%norm.7)
      %229 : Tensor = aten::batch_norm(%x.49, %weight.25, %bias.42, %running_mean.16, %running_var.16, %46, %37, %eps.16, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%229)
  %x.61 : Tensor = aten::relu_(%x.83) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:357:12
  %231 : int[] = prim::ListConstruct(%35, %35)
  %232 : int[] = prim::ListConstruct(%36, %36)
  %233 : int[] = prim::ListConstruct(%44, %44)
  %234 : int[] = prim::ListConstruct(%44, %44)
  %x.79 : Tensor = aten::max_pool2d(%x.61, %231, %232, %233, %234, %46) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:796:11
  %_out_features.1 : str[] = prim::GetAttr[name="_out_features"](%bottom_up)
  %237 : bool = aten::__contains__(%_out_features.1, %39) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:446:11
   = prim::If(%237) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:446:8
    block0():
       = aten::_set_item(%bottom_up_features.1, %39, %x.79) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:447:12
      -> ()
    block1():
      -> ()
  %stage_names : (str, str, str, str) = prim::GetAttr[name="stage_names"](%bottom_up)
  %name.1 : str, %name.7 : str, %name.13 : str, %name.19 : str = prim::TupleUnpack(%stage_names)
  %stages : __torch__.torch.nn.modules.container.ModuleList = prim::GetAttr[name="stages"](%bottom_up)
  %_0.1 : __torch__.torch.nn.modules.container.Sequential = prim::GetAttr[name="0"](%stages)
  %_1.1 : __torch__.torch.nn.modules.container.___torch_mangle_12.Sequential = prim::GetAttr[name="1"](%stages)
  %_2.1 : __torch__.torch.nn.modules.container.___torch_mangle_20.Sequential = prim::GetAttr[name="2"](%stages)
  %_3.1 : __torch__.torch.nn.modules.container.___torch_mangle_28.Sequential = prim::GetAttr[name="3"](%stages)
  %_0.3 : __torch__.detectron2.modeling.backbone.resnet.BottleneckBlock = prim::GetAttr[name="0"](%_0.1)
  %_1.3 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_4.BottleneckBlock = prim::GetAttr[name="1"](%_0.1)
  %_2.3 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_4.BottleneckBlock = prim::GetAttr[name="2"](%_0.1)
  %conv1.4 : __torch__.detectron2.layers.wrappers.___torch_mangle_1.Conv2d = prim::GetAttr[name="conv1"](%_0.3)
  %weight.27 : Tensor = prim::GetAttr[name="weight"](%conv1.4)
  %bias.44 : Tensor? = prim::GetAttr[name="bias"](%conv1.4)
  %254 : int[] = prim::ListConstruct(%44, %44)
  %255 : int[] = prim::ListConstruct(%49, %49)
  %256 : int[] = prim::ListConstruct(%44, %44)
  %x.59 : Tensor = aten::conv2d(%x.79, %weight.27, %bias.44, %254, %255, %256, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.9 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv1.4)
  %259 : bool = prim::requires_grad(%x.59)
  %out.3 : Tensor = prim::If(%259) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.29 : Tensor = prim::GetAttr[name="weight"](%norm.9)
      %running_var.18 : Tensor = prim::GetAttr[name="running_var"](%norm.9)
      %eps.18 : float = prim::GetAttr[name="eps"](%norm.9)
      %264 : Tensor = aten::add(%running_var.18, %eps.18, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %265 : Tensor = aten::rsqrt(%264) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.20 : Tensor = aten::mul(%weight.29, %265) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.46 : Tensor = prim::GetAttr[name="bias"](%norm.9)
      %running_mean.18 : Tensor = prim::GetAttr[name="running_mean"](%norm.9)
      %269 : Tensor = aten::mul(%running_mean.18, %scale.20) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.48 : Tensor = aten::sub(%bias.46, %269, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %271 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.22 : Tensor = aten::reshape(%scale.20, %271) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %273 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.50 : Tensor = aten::reshape(%bias.48, %273) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.10 : int = prim::dtype(%x.59)
      %276 : Tensor = aten::to(%scale.22, %out_dtype.10, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %277 : Tensor = aten::mul(%x.59, %276) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %278 : Tensor = aten::to(%bias.50, %out_dtype.10, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %279 : Tensor = aten::add(%277, %278, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%279)
    block1():
      %running_mean.20 : Tensor = prim::GetAttr[name="running_mean"](%norm.9)
      %running_var.20 : Tensor = prim::GetAttr[name="running_var"](%norm.9)
      %weight.31 : Tensor = prim::GetAttr[name="weight"](%norm.9)
      %bias.52 : Tensor = prim::GetAttr[name="bias"](%norm.9)
      %eps.20 : float = prim::GetAttr[name="eps"](%norm.9)
      %285 : Tensor = aten::batch_norm(%x.59, %weight.31, %bias.52, %running_mean.20, %running_var.20, %46, %37, %eps.20, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%285)
  %out.7 : Tensor = aten::relu_(%out.3) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.2 : __torch__.detectron2.layers.wrappers.___torch_mangle_2.Conv2d = prim::GetAttr[name="conv2"](%_0.3)
  %weight.33 : Tensor = prim::GetAttr[name="weight"](%conv2.2)
  %bias.54 : Tensor? = prim::GetAttr[name="bias"](%conv2.2)
  %290 : int[] = prim::ListConstruct(%44, %44)
  %291 : int[] = prim::ListConstruct(%44, %44)
  %292 : int[] = prim::ListConstruct(%44, %44)
  %x.87 : Tensor = aten::conv2d(%out.7, %weight.33, %bias.54, %290, %291, %292, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.11 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv2.2)
  %295 : bool = prim::requires_grad(%x.87)
  %out.11 : Tensor = prim::If(%295) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.35 : Tensor = prim::GetAttr[name="weight"](%norm.11)
      %running_var.22 : Tensor = prim::GetAttr[name="running_var"](%norm.11)
      %eps.22 : float = prim::GetAttr[name="eps"](%norm.11)
      %300 : Tensor = aten::add(%running_var.22, %eps.22, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %301 : Tensor = aten::rsqrt(%300) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.24 : Tensor = aten::mul(%weight.35, %301) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.56 : Tensor = prim::GetAttr[name="bias"](%norm.11)
      %running_mean.22 : Tensor = prim::GetAttr[name="running_mean"](%norm.11)
      %305 : Tensor = aten::mul(%running_mean.22, %scale.24) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.58 : Tensor = aten::sub(%bias.56, %305, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %307 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.26 : Tensor = aten::reshape(%scale.24, %307) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %309 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.60 : Tensor = aten::reshape(%bias.58, %309) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.12 : int = prim::dtype(%x.87)
      %312 : Tensor = aten::to(%scale.26, %out_dtype.12, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %313 : Tensor = aten::mul(%x.87, %312) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %314 : Tensor = aten::to(%bias.60, %out_dtype.12, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %315 : Tensor = aten::add(%313, %314, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%315)
    block1():
      %running_mean.24 : Tensor = prim::GetAttr[name="running_mean"](%norm.11)
      %running_var.24 : Tensor = prim::GetAttr[name="running_var"](%norm.11)
      %weight.37 : Tensor = prim::GetAttr[name="weight"](%norm.11)
      %bias.62 : Tensor = prim::GetAttr[name="bias"](%norm.11)
      %eps.24 : float = prim::GetAttr[name="eps"](%norm.11)
      %321 : Tensor = aten::batch_norm(%x.87, %weight.37, %bias.62, %running_mean.24, %running_var.24, %46, %37, %eps.24, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%321)
  %out.15 : Tensor = aten::relu_(%out.11) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.2 : __torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d = prim::GetAttr[name="conv3"](%_0.3)
  %weight.39 : Tensor = prim::GetAttr[name="weight"](%conv3.2)
  %bias.64 : Tensor? = prim::GetAttr[name="bias"](%conv3.2)
  %326 : int[] = prim::ListConstruct(%44, %44)
  %327 : int[] = prim::ListConstruct(%49, %49)
  %328 : int[] = prim::ListConstruct(%44, %44)
  %x.32 : Tensor = aten::conv2d(%out.15, %weight.39, %bias.64, %326, %327, %328, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.13 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv3.2)
  %331 : bool = prim::requires_grad(%x.32)
  %out.19 : Tensor = prim::If(%331) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.41 : Tensor = prim::GetAttr[name="weight"](%norm.13)
      %running_var.26 : Tensor = prim::GetAttr[name="running_var"](%norm.13)
      %eps.26 : float = prim::GetAttr[name="eps"](%norm.13)
      %336 : Tensor = aten::add(%running_var.26, %eps.26, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %337 : Tensor = aten::rsqrt(%336) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.28 : Tensor = aten::mul(%weight.41, %337) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.66 : Tensor = prim::GetAttr[name="bias"](%norm.13)
      %running_mean.26 : Tensor = prim::GetAttr[name="running_mean"](%norm.13)
      %341 : Tensor = aten::mul(%running_mean.26, %scale.28) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.68 : Tensor = aten::sub(%bias.66, %341, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %343 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.30 : Tensor = aten::reshape(%scale.28, %343) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %345 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.70 : Tensor = aten::reshape(%bias.68, %345) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.14 : int = prim::dtype(%x.32)
      %348 : Tensor = aten::to(%scale.30, %out_dtype.14, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %349 : Tensor = aten::mul(%x.32, %348) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %350 : Tensor = aten::to(%bias.70, %out_dtype.14, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %351 : Tensor = aten::add(%349, %350, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%351)
    block1():
      %running_mean.28 : Tensor = prim::GetAttr[name="running_mean"](%norm.13)
      %running_var.28 : Tensor = prim::GetAttr[name="running_var"](%norm.13)
      %weight.43 : Tensor = prim::GetAttr[name="weight"](%norm.13)
      %bias.72 : Tensor = prim::GetAttr[name="bias"](%norm.13)
      %eps.28 : float = prim::GetAttr[name="eps"](%norm.13)
      %357 : Tensor = aten::batch_norm(%x.32, %weight.43, %bias.72, %running_mean.28, %running_var.28, %46, %37, %eps.28, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%357)
  %shortcut.4 : __torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d = prim::GetAttr[name="shortcut"](%_0.3)
  %weight.45 : Tensor = prim::GetAttr[name="weight"](%shortcut.4)
  %bias.74 : Tensor? = prim::GetAttr[name="bias"](%shortcut.4)
  %361 : int[] = prim::ListConstruct(%44, %44)
  %362 : int[] = prim::ListConstruct(%49, %49)
  %363 : int[] = prim::ListConstruct(%44, %44)
  %x.34 : Tensor = aten::conv2d(%x.79, %weight.45, %bias.74, %361, %362, %363, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.15 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%shortcut.4)
  %366 : bool = prim::requires_grad(%x.34)
  %shortcut.6 : Tensor = prim::If(%366) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.47 : Tensor = prim::GetAttr[name="weight"](%norm.15)
      %running_var.30 : Tensor = prim::GetAttr[name="running_var"](%norm.15)
      %eps.30 : float = prim::GetAttr[name="eps"](%norm.15)
      %371 : Tensor = aten::add(%running_var.30, %eps.30, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %372 : Tensor = aten::rsqrt(%371) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.32 : Tensor = aten::mul(%weight.47, %372) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.76 : Tensor = prim::GetAttr[name="bias"](%norm.15)
      %running_mean.30 : Tensor = prim::GetAttr[name="running_mean"](%norm.15)
      %376 : Tensor = aten::mul(%running_mean.30, %scale.32) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.78 : Tensor = aten::sub(%bias.76, %376, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %378 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.34 : Tensor = aten::reshape(%scale.32, %378) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %380 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.80 : Tensor = aten::reshape(%bias.78, %380) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.16 : int = prim::dtype(%x.34)
      %383 : Tensor = aten::to(%scale.34, %out_dtype.16, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %384 : Tensor = aten::mul(%x.34, %383) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %385 : Tensor = aten::to(%bias.80, %out_dtype.16, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %386 : Tensor = aten::add(%384, %385, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%386)
    block1():
      %running_mean.32 : Tensor = prim::GetAttr[name="running_mean"](%norm.15)
      %running_var.32 : Tensor = prim::GetAttr[name="running_var"](%norm.15)
      %weight.49 : Tensor = prim::GetAttr[name="weight"](%norm.15)
      %bias.82 : Tensor = prim::GetAttr[name="bias"](%norm.15)
      %eps.32 : float = prim::GetAttr[name="eps"](%norm.15)
      %392 : Tensor = aten::batch_norm(%x.34, %weight.49, %bias.82, %running_mean.32, %running_var.32, %46, %37, %eps.32, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%392)
  %out.23 : Tensor = aten::add_(%out.19, %shortcut.6, %44) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:208:8
  %input.6 : Tensor = aten::relu_(%out.23) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:209:14
  %conv1.6 : __torch__.detectron2.layers.wrappers.___torch_mangle_3.Conv2d = prim::GetAttr[name="conv1"](%_1.3)
  %weight.51 : Tensor = prim::GetAttr[name="weight"](%conv1.6)
  %bias.84 : Tensor? = prim::GetAttr[name="bias"](%conv1.6)
  %398 : int[] = prim::ListConstruct(%44, %44)
  %399 : int[] = prim::ListConstruct(%49, %49)
  %400 : int[] = prim::ListConstruct(%44, %44)
  %x.36 : Tensor = aten::conv2d(%input.6, %weight.51, %bias.84, %398, %399, %400, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.17 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv1.6)
  %403 : bool = prim::requires_grad(%x.36)
  %out.25 : Tensor = prim::If(%403) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.53 : Tensor = prim::GetAttr[name="weight"](%norm.17)
      %running_var.34 : Tensor = prim::GetAttr[name="running_var"](%norm.17)
      %eps.34 : float = prim::GetAttr[name="eps"](%norm.17)
      %408 : Tensor = aten::add(%running_var.34, %eps.34, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %409 : Tensor = aten::rsqrt(%408) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.36 : Tensor = aten::mul(%weight.53, %409) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.86 : Tensor = prim::GetAttr[name="bias"](%norm.17)
      %running_mean.34 : Tensor = prim::GetAttr[name="running_mean"](%norm.17)
      %413 : Tensor = aten::mul(%running_mean.34, %scale.36) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.88 : Tensor = aten::sub(%bias.86, %413, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %415 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.38 : Tensor = aten::reshape(%scale.36, %415) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %417 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.90 : Tensor = aten::reshape(%bias.88, %417) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.18 : int = prim::dtype(%x.36)
      %420 : Tensor = aten::to(%scale.38, %out_dtype.18, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %421 : Tensor = aten::mul(%x.36, %420) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %422 : Tensor = aten::to(%bias.90, %out_dtype.18, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %423 : Tensor = aten::add(%421, %422, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%423)
    block1():
      %running_mean.36 : Tensor = prim::GetAttr[name="running_mean"](%norm.17)
      %running_var.36 : Tensor = prim::GetAttr[name="running_var"](%norm.17)
      %weight.55 : Tensor = prim::GetAttr[name="weight"](%norm.17)
      %bias.92 : Tensor = prim::GetAttr[name="bias"](%norm.17)
      %eps.36 : float = prim::GetAttr[name="eps"](%norm.17)
      %429 : Tensor = aten::batch_norm(%x.36, %weight.55, %bias.92, %running_mean.36, %running_var.36, %46, %37, %eps.36, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%429)
  %out.27 : Tensor = aten::relu_(%out.25) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.4 : __torch__.detectron2.layers.wrappers.___torch_mangle_2.Conv2d = prim::GetAttr[name="conv2"](%_1.3)
  %weight.57 : Tensor = prim::GetAttr[name="weight"](%conv2.4)
  %bias.94 : Tensor? = prim::GetAttr[name="bias"](%conv2.4)
  %434 : int[] = prim::ListConstruct(%44, %44)
  %435 : int[] = prim::ListConstruct(%44, %44)
  %436 : int[] = prim::ListConstruct(%44, %44)
  %x.38 : Tensor = aten::conv2d(%out.27, %weight.57, %bias.94, %434, %435, %436, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.19 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv2.4)
  %439 : bool = prim::requires_grad(%x.38)
  %out.29 : Tensor = prim::If(%439) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.59 : Tensor = prim::GetAttr[name="weight"](%norm.19)
      %running_var.38 : Tensor = prim::GetAttr[name="running_var"](%norm.19)
      %eps.38 : float = prim::GetAttr[name="eps"](%norm.19)
      %444 : Tensor = aten::add(%running_var.38, %eps.38, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %445 : Tensor = aten::rsqrt(%444) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.40 : Tensor = aten::mul(%weight.59, %445) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.96 : Tensor = prim::GetAttr[name="bias"](%norm.19)
      %running_mean.38 : Tensor = prim::GetAttr[name="running_mean"](%norm.19)
      %449 : Tensor = aten::mul(%running_mean.38, %scale.40) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.98 : Tensor = aten::sub(%bias.96, %449, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %451 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.42 : Tensor = aten::reshape(%scale.40, %451) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %453 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.100 : Tensor = aten::reshape(%bias.98, %453) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.20 : int = prim::dtype(%x.38)
      %456 : Tensor = aten::to(%scale.42, %out_dtype.20, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %457 : Tensor = aten::mul(%x.38, %456) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %458 : Tensor = aten::to(%bias.100, %out_dtype.20, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %459 : Tensor = aten::add(%457, %458, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%459)
    block1():
      %running_mean.40 : Tensor = prim::GetAttr[name="running_mean"](%norm.19)
      %running_var.40 : Tensor = prim::GetAttr[name="running_var"](%norm.19)
      %weight.61 : Tensor = prim::GetAttr[name="weight"](%norm.19)
      %bias.102 : Tensor = prim::GetAttr[name="bias"](%norm.19)
      %eps.40 : float = prim::GetAttr[name="eps"](%norm.19)
      %465 : Tensor = aten::batch_norm(%x.38, %weight.61, %bias.102, %running_mean.40, %running_var.40, %46, %37, %eps.40, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%465)
  %out.31 : Tensor = aten::relu_(%out.29) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.4 : __torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d = prim::GetAttr[name="conv3"](%_1.3)
  %weight.63 : Tensor = prim::GetAttr[name="weight"](%conv3.4)
  %bias.104 : Tensor? = prim::GetAttr[name="bias"](%conv3.4)
  %470 : int[] = prim::ListConstruct(%44, %44)
  %471 : int[] = prim::ListConstruct(%49, %49)
  %472 : int[] = prim::ListConstruct(%44, %44)
  %x.40 : Tensor = aten::conv2d(%out.31, %weight.63, %bias.104, %470, %471, %472, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.21 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv3.4)
  %475 : bool = prim::requires_grad(%x.40)
  %out.33 : Tensor = prim::If(%475) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.65 : Tensor = prim::GetAttr[name="weight"](%norm.21)
      %running_var.42 : Tensor = prim::GetAttr[name="running_var"](%norm.21)
      %eps.42 : float = prim::GetAttr[name="eps"](%norm.21)
      %480 : Tensor = aten::add(%running_var.42, %eps.42, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %481 : Tensor = aten::rsqrt(%480) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.44 : Tensor = aten::mul(%weight.65, %481) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.106 : Tensor = prim::GetAttr[name="bias"](%norm.21)
      %running_mean.42 : Tensor = prim::GetAttr[name="running_mean"](%norm.21)
      %485 : Tensor = aten::mul(%running_mean.42, %scale.44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.108 : Tensor = aten::sub(%bias.106, %485, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %487 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.46 : Tensor = aten::reshape(%scale.44, %487) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %489 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.110 : Tensor = aten::reshape(%bias.108, %489) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.22 : int = prim::dtype(%x.40)
      %492 : Tensor = aten::to(%scale.46, %out_dtype.22, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %493 : Tensor = aten::mul(%x.40, %492) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %494 : Tensor = aten::to(%bias.110, %out_dtype.22, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %495 : Tensor = aten::add(%493, %494, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%495)
    block1():
      %running_mean.44 : Tensor = prim::GetAttr[name="running_mean"](%norm.21)
      %running_var.44 : Tensor = prim::GetAttr[name="running_var"](%norm.21)
      %weight.67 : Tensor = prim::GetAttr[name="weight"](%norm.21)
      %bias.112 : Tensor = prim::GetAttr[name="bias"](%norm.21)
      %eps.44 : float = prim::GetAttr[name="eps"](%norm.21)
      %501 : Tensor = aten::batch_norm(%x.40, %weight.67, %bias.112, %running_mean.44, %running_var.44, %46, %37, %eps.44, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%501)
  %out.35 : Tensor = aten::add_(%out.33, %input.6, %44) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:208:8
  %input.31 : Tensor = aten::relu_(%out.35) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:209:14
  %conv1.8 : __torch__.detectron2.layers.wrappers.___torch_mangle_3.Conv2d = prim::GetAttr[name="conv1"](%_2.3)
  %weight.69 : Tensor = prim::GetAttr[name="weight"](%conv1.8)
  %bias.114 : Tensor? = prim::GetAttr[name="bias"](%conv1.8)
  %507 : int[] = prim::ListConstruct(%44, %44)
  %508 : int[] = prim::ListConstruct(%49, %49)
  %509 : int[] = prim::ListConstruct(%44, %44)
  %x.44 : Tensor = aten::conv2d(%input.31, %weight.69, %bias.114, %507, %508, %509, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.23 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv1.8)
  %512 : bool = prim::requires_grad(%x.44)
  %out.37 : Tensor = prim::If(%512) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.71 : Tensor = prim::GetAttr[name="weight"](%norm.23)
      %running_var.46 : Tensor = prim::GetAttr[name="running_var"](%norm.23)
      %eps.46 : float = prim::GetAttr[name="eps"](%norm.23)
      %517 : Tensor = aten::add(%running_var.46, %eps.46, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %518 : Tensor = aten::rsqrt(%517) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.48 : Tensor = aten::mul(%weight.71, %518) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.116 : Tensor = prim::GetAttr[name="bias"](%norm.23)
      %running_mean.46 : Tensor = prim::GetAttr[name="running_mean"](%norm.23)
      %522 : Tensor = aten::mul(%running_mean.46, %scale.48) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.118 : Tensor = aten::sub(%bias.116, %522, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %524 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.50 : Tensor = aten::reshape(%scale.48, %524) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %526 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.120 : Tensor = aten::reshape(%bias.118, %526) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.24 : int = prim::dtype(%x.44)
      %529 : Tensor = aten::to(%scale.50, %out_dtype.24, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %530 : Tensor = aten::mul(%x.44, %529) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %531 : Tensor = aten::to(%bias.120, %out_dtype.24, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %532 : Tensor = aten::add(%530, %531, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%532)
    block1():
      %running_mean.48 : Tensor = prim::GetAttr[name="running_mean"](%norm.23)
      %running_var.48 : Tensor = prim::GetAttr[name="running_var"](%norm.23)
      %weight.73 : Tensor = prim::GetAttr[name="weight"](%norm.23)
      %bias.122 : Tensor = prim::GetAttr[name="bias"](%norm.23)
      %eps.48 : float = prim::GetAttr[name="eps"](%norm.23)
      %538 : Tensor = aten::batch_norm(%x.44, %weight.73, %bias.122, %running_mean.48, %running_var.48, %46, %37, %eps.48, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%538)
  %out.39 : Tensor = aten::relu_(%out.37) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.6 : __torch__.detectron2.layers.wrappers.___torch_mangle_2.Conv2d = prim::GetAttr[name="conv2"](%_2.3)
  %weight.75 : Tensor = prim::GetAttr[name="weight"](%conv2.6)
  %bias.124 : Tensor? = prim::GetAttr[name="bias"](%conv2.6)
  %543 : int[] = prim::ListConstruct(%44, %44)
  %544 : int[] = prim::ListConstruct(%44, %44)
  %545 : int[] = prim::ListConstruct(%44, %44)
  %x.46 : Tensor = aten::conv2d(%out.39, %weight.75, %bias.124, %543, %544, %545, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.25 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv2.6)
  %548 : bool = prim::requires_grad(%x.46)
  %out.41 : Tensor = prim::If(%548) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.77 : Tensor = prim::GetAttr[name="weight"](%norm.25)
      %running_var.50 : Tensor = prim::GetAttr[name="running_var"](%norm.25)
      %eps.50 : float = prim::GetAttr[name="eps"](%norm.25)
      %553 : Tensor = aten::add(%running_var.50, %eps.50, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %554 : Tensor = aten::rsqrt(%553) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.52 : Tensor = aten::mul(%weight.77, %554) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.126 : Tensor = prim::GetAttr[name="bias"](%norm.25)
      %running_mean.50 : Tensor = prim::GetAttr[name="running_mean"](%norm.25)
      %558 : Tensor = aten::mul(%running_mean.50, %scale.52) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.128 : Tensor = aten::sub(%bias.126, %558, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %560 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.54 : Tensor = aten::reshape(%scale.52, %560) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %562 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.130 : Tensor = aten::reshape(%bias.128, %562) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.26 : int = prim::dtype(%x.46)
      %565 : Tensor = aten::to(%scale.54, %out_dtype.26, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %566 : Tensor = aten::mul(%x.46, %565) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %567 : Tensor = aten::to(%bias.130, %out_dtype.26, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %568 : Tensor = aten::add(%566, %567, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%568)
    block1():
      %running_mean.52 : Tensor = prim::GetAttr[name="running_mean"](%norm.25)
      %running_var.52 : Tensor = prim::GetAttr[name="running_var"](%norm.25)
      %weight.79 : Tensor = prim::GetAttr[name="weight"](%norm.25)
      %bias.132 : Tensor = prim::GetAttr[name="bias"](%norm.25)
      %eps.52 : float = prim::GetAttr[name="eps"](%norm.25)
      %574 : Tensor = aten::batch_norm(%x.46, %weight.79, %bias.132, %running_mean.52, %running_var.52, %46, %37, %eps.52, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%574)
  %out.43 : Tensor = aten::relu_(%out.41) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.6 : __torch__.detectron2.layers.wrappers.___torch_mangle_0.Conv2d = prim::GetAttr[name="conv3"](%_2.3)
  %weight.81 : Tensor = prim::GetAttr[name="weight"](%conv3.6)
  %bias.134 : Tensor? = prim::GetAttr[name="bias"](%conv3.6)
  %579 : int[] = prim::ListConstruct(%44, %44)
  %580 : int[] = prim::ListConstruct(%49, %49)
  %581 : int[] = prim::ListConstruct(%44, %44)
  %x.48 : Tensor = aten::conv2d(%out.43, %weight.81, %bias.134, %579, %580, %581, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.27 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv3.6)
  %584 : bool = prim::requires_grad(%x.48)
  %out.45 : Tensor = prim::If(%584) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.83 : Tensor = prim::GetAttr[name="weight"](%norm.27)
      %running_var.54 : Tensor = prim::GetAttr[name="running_var"](%norm.27)
      %eps.54 : float = prim::GetAttr[name="eps"](%norm.27)
      %589 : Tensor = aten::add(%running_var.54, %eps.54, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %590 : Tensor = aten::rsqrt(%589) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.56 : Tensor = aten::mul(%weight.83, %590) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.136 : Tensor = prim::GetAttr[name="bias"](%norm.27)
      %running_mean.54 : Tensor = prim::GetAttr[name="running_mean"](%norm.27)
      %594 : Tensor = aten::mul(%running_mean.54, %scale.56) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.138 : Tensor = aten::sub(%bias.136, %594, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %596 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.58 : Tensor = aten::reshape(%scale.56, %596) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %598 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.140 : Tensor = aten::reshape(%bias.138, %598) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.28 : int = prim::dtype(%x.48)
      %601 : Tensor = aten::to(%scale.58, %out_dtype.28, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %602 : Tensor = aten::mul(%x.48, %601) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %603 : Tensor = aten::to(%bias.140, %out_dtype.28, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %604 : Tensor = aten::add(%602, %603, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%604)
    block1():
      %running_mean.56 : Tensor = prim::GetAttr[name="running_mean"](%norm.27)
      %running_var.56 : Tensor = prim::GetAttr[name="running_var"](%norm.27)
      %weight.85 : Tensor = prim::GetAttr[name="weight"](%norm.27)
      %bias.142 : Tensor = prim::GetAttr[name="bias"](%norm.27)
      %eps.56 : float = prim::GetAttr[name="eps"](%norm.27)
      %610 : Tensor = aten::batch_norm(%x.48, %weight.85, %bias.142, %running_mean.56, %running_var.56, %46, %37, %eps.56, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%610)
  %out.47 : Tensor = aten::add_(%out.45, %input.31, %44) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:208:8
  %x.51 : Tensor = aten::relu_(%out.47) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:209:14
  %_out_features.3 : str[] = prim::GetAttr[name="_out_features"](%bottom_up)
  %614 : bool = aten::__contains__(%_out_features.3, %name.1) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:450:15
   = prim::If(%614) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:450:12
    block0():
       = aten::_set_item(%bottom_up_features.1, %name.1, %x.51) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:451:16
      -> ()
    block1():
      -> ()
  %_0.5 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_9.BottleneckBlock = prim::GetAttr[name="0"](%_1.1)
  %_1.5 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_11.BottleneckBlock = prim::GetAttr[name="1"](%_1.1)
  %_2.5 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_11.BottleneckBlock = prim::GetAttr[name="2"](%_1.1)
  %_3.3 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_11.BottleneckBlock = prim::GetAttr[name="3"](%_1.1)
  %conv1.10 : __torch__.detectron2.layers.wrappers.___torch_mangle_6.Conv2d = prim::GetAttr[name="conv1"](%_0.5)
  %weight.87 : Tensor = prim::GetAttr[name="weight"](%conv1.10)
  %bias.144 : Tensor? = prim::GetAttr[name="bias"](%conv1.10)
  %622 : int[] = prim::ListConstruct(%36, %36)
  %623 : int[] = prim::ListConstruct(%49, %49)
  %624 : int[] = prim::ListConstruct(%44, %44)
  %x.52 : Tensor = aten::conv2d(%x.51, %weight.87, %bias.144, %622, %623, %624, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.29 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv1.10)
  %627 : bool = prim::requires_grad(%x.52)
  %out.49 : Tensor = prim::If(%627) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.89 : Tensor = prim::GetAttr[name="weight"](%norm.29)
      %running_var.58 : Tensor = prim::GetAttr[name="running_var"](%norm.29)
      %eps.58 : float = prim::GetAttr[name="eps"](%norm.29)
      %632 : Tensor = aten::add(%running_var.58, %eps.58, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %633 : Tensor = aten::rsqrt(%632) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.60 : Tensor = aten::mul(%weight.89, %633) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.146 : Tensor = prim::GetAttr[name="bias"](%norm.29)
      %running_mean.58 : Tensor = prim::GetAttr[name="running_mean"](%norm.29)
      %637 : Tensor = aten::mul(%running_mean.58, %scale.60) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.148 : Tensor = aten::sub(%bias.146, %637, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %639 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.62 : Tensor = aten::reshape(%scale.60, %639) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %641 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.150 : Tensor = aten::reshape(%bias.148, %641) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.30 : int = prim::dtype(%x.52)
      %644 : Tensor = aten::to(%scale.62, %out_dtype.30, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %645 : Tensor = aten::mul(%x.52, %644) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %646 : Tensor = aten::to(%bias.150, %out_dtype.30, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %647 : Tensor = aten::add(%645, %646, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%647)
    block1():
      %running_mean.60 : Tensor = prim::GetAttr[name="running_mean"](%norm.29)
      %running_var.60 : Tensor = prim::GetAttr[name="running_var"](%norm.29)
      %weight.91 : Tensor = prim::GetAttr[name="weight"](%norm.29)
      %bias.152 : Tensor = prim::GetAttr[name="bias"](%norm.29)
      %eps.60 : float = prim::GetAttr[name="eps"](%norm.29)
      %653 : Tensor = aten::batch_norm(%x.52, %weight.91, %bias.152, %running_mean.60, %running_var.60, %46, %37, %eps.60, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%653)
  %out.51 : Tensor = aten::relu_(%out.49) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.8 : __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d = prim::GetAttr[name="conv2"](%_0.5)
  %weight.93 : Tensor = prim::GetAttr[name="weight"](%conv2.8)
  %bias.154 : Tensor? = prim::GetAttr[name="bias"](%conv2.8)
  %658 : int[] = prim::ListConstruct(%44, %44)
  %659 : int[] = prim::ListConstruct(%44, %44)
  %660 : int[] = prim::ListConstruct(%44, %44)
  %x.54 : Tensor = aten::conv2d(%out.51, %weight.93, %bias.154, %658, %659, %660, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.31 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv2.8)
  %663 : bool = prim::requires_grad(%x.54)
  %out.53 : Tensor = prim::If(%663) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.95 : Tensor = prim::GetAttr[name="weight"](%norm.31)
      %running_var.62 : Tensor = prim::GetAttr[name="running_var"](%norm.31)
      %eps.62 : float = prim::GetAttr[name="eps"](%norm.31)
      %668 : Tensor = aten::add(%running_var.62, %eps.62, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %669 : Tensor = aten::rsqrt(%668) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.64 : Tensor = aten::mul(%weight.95, %669) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.156 : Tensor = prim::GetAttr[name="bias"](%norm.31)
      %running_mean.62 : Tensor = prim::GetAttr[name="running_mean"](%norm.31)
      %673 : Tensor = aten::mul(%running_mean.62, %scale.64) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.158 : Tensor = aten::sub(%bias.156, %673, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %675 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.66 : Tensor = aten::reshape(%scale.64, %675) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %677 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.160 : Tensor = aten::reshape(%bias.158, %677) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.32 : int = prim::dtype(%x.54)
      %680 : Tensor = aten::to(%scale.66, %out_dtype.32, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %681 : Tensor = aten::mul(%x.54, %680) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %682 : Tensor = aten::to(%bias.160, %out_dtype.32, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %683 : Tensor = aten::add(%681, %682, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%683)
    block1():
      %running_mean.64 : Tensor = prim::GetAttr[name="running_mean"](%norm.31)
      %running_var.64 : Tensor = prim::GetAttr[name="running_var"](%norm.31)
      %weight.97 : Tensor = prim::GetAttr[name="weight"](%norm.31)
      %bias.162 : Tensor = prim::GetAttr[name="bias"](%norm.31)
      %eps.64 : float = prim::GetAttr[name="eps"](%norm.31)
      %689 : Tensor = aten::batch_norm(%x.54, %weight.97, %bias.162, %running_mean.64, %running_var.64, %46, %37, %eps.64, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%689)
  %out.55 : Tensor = aten::relu_(%out.53) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.8 : __torch__.detectron2.layers.wrappers.___torch_mangle_8.Conv2d = prim::GetAttr[name="conv3"](%_0.5)
  %weight.99 : Tensor = prim::GetAttr[name="weight"](%conv3.8)
  %bias.164 : Tensor? = prim::GetAttr[name="bias"](%conv3.8)
  %694 : int[] = prim::ListConstruct(%44, %44)
  %695 : int[] = prim::ListConstruct(%49, %49)
  %696 : int[] = prim::ListConstruct(%44, %44)
  %x.56 : Tensor = aten::conv2d(%out.55, %weight.99, %bias.164, %694, %695, %696, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.33 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv3.8)
  %699 : bool = prim::requires_grad(%x.56)
  %out.57 : Tensor = prim::If(%699) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.101 : Tensor = prim::GetAttr[name="weight"](%norm.33)
      %running_var.66 : Tensor = prim::GetAttr[name="running_var"](%norm.33)
      %eps.66 : float = prim::GetAttr[name="eps"](%norm.33)
      %704 : Tensor = aten::add(%running_var.66, %eps.66, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %705 : Tensor = aten::rsqrt(%704) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.68 : Tensor = aten::mul(%weight.101, %705) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.166 : Tensor = prim::GetAttr[name="bias"](%norm.33)
      %running_mean.66 : Tensor = prim::GetAttr[name="running_mean"](%norm.33)
      %709 : Tensor = aten::mul(%running_mean.66, %scale.68) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.168 : Tensor = aten::sub(%bias.166, %709, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %711 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.70 : Tensor = aten::reshape(%scale.68, %711) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %713 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.170 : Tensor = aten::reshape(%bias.168, %713) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.34 : int = prim::dtype(%x.56)
      %716 : Tensor = aten::to(%scale.70, %out_dtype.34, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %717 : Tensor = aten::mul(%x.56, %716) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %718 : Tensor = aten::to(%bias.170, %out_dtype.34, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %719 : Tensor = aten::add(%717, %718, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%719)
    block1():
      %running_mean.68 : Tensor = prim::GetAttr[name="running_mean"](%norm.33)
      %running_var.68 : Tensor = prim::GetAttr[name="running_var"](%norm.33)
      %weight.103 : Tensor = prim::GetAttr[name="weight"](%norm.33)
      %bias.172 : Tensor = prim::GetAttr[name="bias"](%norm.33)
      %eps.68 : float = prim::GetAttr[name="eps"](%norm.33)
      %725 : Tensor = aten::batch_norm(%x.56, %weight.103, %bias.172, %running_mean.68, %running_var.68, %46, %37, %eps.68, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%725)
  %shortcut.8 : __torch__.detectron2.layers.wrappers.___torch_mangle_5.Conv2d = prim::GetAttr[name="shortcut"](%_0.5)
  %weight.105 : Tensor = prim::GetAttr[name="weight"](%shortcut.8)
  %bias.174 : Tensor? = prim::GetAttr[name="bias"](%shortcut.8)
  %729 : int[] = prim::ListConstruct(%36, %36)
  %730 : int[] = prim::ListConstruct(%49, %49)
  %731 : int[] = prim::ListConstruct(%44, %44)
  %x.58 : Tensor = aten::conv2d(%x.51, %weight.105, %bias.174, %729, %730, %731, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.35 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%shortcut.8)
  %734 : bool = prim::requires_grad(%x.58)
  %shortcut.10 : Tensor = prim::If(%734) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.107 : Tensor = prim::GetAttr[name="weight"](%norm.35)
      %running_var.70 : Tensor = prim::GetAttr[name="running_var"](%norm.35)
      %eps.70 : float = prim::GetAttr[name="eps"](%norm.35)
      %739 : Tensor = aten::add(%running_var.70, %eps.70, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %740 : Tensor = aten::rsqrt(%739) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.72 : Tensor = aten::mul(%weight.107, %740) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.176 : Tensor = prim::GetAttr[name="bias"](%norm.35)
      %running_mean.70 : Tensor = prim::GetAttr[name="running_mean"](%norm.35)
      %744 : Tensor = aten::mul(%running_mean.70, %scale.72) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.178 : Tensor = aten::sub(%bias.176, %744, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %746 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.74 : Tensor = aten::reshape(%scale.72, %746) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %748 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.180 : Tensor = aten::reshape(%bias.178, %748) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.36 : int = prim::dtype(%x.58)
      %751 : Tensor = aten::to(%scale.74, %out_dtype.36, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %752 : Tensor = aten::mul(%x.58, %751) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %753 : Tensor = aten::to(%bias.180, %out_dtype.36, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %754 : Tensor = aten::add(%752, %753, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%754)
    block1():
      %running_mean.72 : Tensor = prim::GetAttr[name="running_mean"](%norm.35)
      %running_var.72 : Tensor = prim::GetAttr[name="running_var"](%norm.35)
      %weight.109 : Tensor = prim::GetAttr[name="weight"](%norm.35)
      %bias.182 : Tensor = prim::GetAttr[name="bias"](%norm.35)
      %eps.72 : float = prim::GetAttr[name="eps"](%norm.35)
      %760 : Tensor = aten::batch_norm(%x.58, %weight.109, %bias.182, %running_mean.72, %running_var.72, %46, %37, %eps.72, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%760)
  %out.59 : Tensor = aten::add_(%out.57, %shortcut.10, %44) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:208:8
  %input.33 : Tensor = aten::relu_(%out.59) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:209:14
  %conv1.12 : __torch__.detectron2.layers.wrappers.___torch_mangle_10.Conv2d = prim::GetAttr[name="conv1"](%_1.5)
  %weight.111 : Tensor = prim::GetAttr[name="weight"](%conv1.12)
  %bias.184 : Tensor? = prim::GetAttr[name="bias"](%conv1.12)
  %766 : int[] = prim::ListConstruct(%44, %44)
  %767 : int[] = prim::ListConstruct(%49, %49)
  %768 : int[] = prim::ListConstruct(%44, %44)
  %x.60 : Tensor = aten::conv2d(%input.33, %weight.111, %bias.184, %766, %767, %768, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.37 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv1.12)
  %771 : bool = prim::requires_grad(%x.60)
  %out.61 : Tensor = prim::If(%771) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.113 : Tensor = prim::GetAttr[name="weight"](%norm.37)
      %running_var.74 : Tensor = prim::GetAttr[name="running_var"](%norm.37)
      %eps.74 : float = prim::GetAttr[name="eps"](%norm.37)
      %776 : Tensor = aten::add(%running_var.74, %eps.74, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %777 : Tensor = aten::rsqrt(%776) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.76 : Tensor = aten::mul(%weight.113, %777) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.186 : Tensor = prim::GetAttr[name="bias"](%norm.37)
      %running_mean.74 : Tensor = prim::GetAttr[name="running_mean"](%norm.37)
      %781 : Tensor = aten::mul(%running_mean.74, %scale.76) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.188 : Tensor = aten::sub(%bias.186, %781, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %783 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.78 : Tensor = aten::reshape(%scale.76, %783) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %785 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.190 : Tensor = aten::reshape(%bias.188, %785) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.38 : int = prim::dtype(%x.60)
      %788 : Tensor = aten::to(%scale.78, %out_dtype.38, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %789 : Tensor = aten::mul(%x.60, %788) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %790 : Tensor = aten::to(%bias.190, %out_dtype.38, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %791 : Tensor = aten::add(%789, %790, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%791)
    block1():
      %running_mean.76 : Tensor = prim::GetAttr[name="running_mean"](%norm.37)
      %running_var.76 : Tensor = prim::GetAttr[name="running_var"](%norm.37)
      %weight.115 : Tensor = prim::GetAttr[name="weight"](%norm.37)
      %bias.192 : Tensor = prim::GetAttr[name="bias"](%norm.37)
      %eps.76 : float = prim::GetAttr[name="eps"](%norm.37)
      %797 : Tensor = aten::batch_norm(%x.60, %weight.115, %bias.192, %running_mean.76, %running_var.76, %46, %37, %eps.76, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%797)
  %out.63 : Tensor = aten::relu_(%out.61) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.10 : __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d = prim::GetAttr[name="conv2"](%_1.5)
  %weight.117 : Tensor = prim::GetAttr[name="weight"](%conv2.10)
  %bias.194 : Tensor? = prim::GetAttr[name="bias"](%conv2.10)
  %802 : int[] = prim::ListConstruct(%44, %44)
  %803 : int[] = prim::ListConstruct(%44, %44)
  %804 : int[] = prim::ListConstruct(%44, %44)
  %x.62 : Tensor = aten::conv2d(%out.63, %weight.117, %bias.194, %802, %803, %804, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.39 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv2.10)
  %807 : bool = prim::requires_grad(%x.62)
  %out.65 : Tensor = prim::If(%807) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.119 : Tensor = prim::GetAttr[name="weight"](%norm.39)
      %running_var.78 : Tensor = prim::GetAttr[name="running_var"](%norm.39)
      %eps.78 : float = prim::GetAttr[name="eps"](%norm.39)
      %812 : Tensor = aten::add(%running_var.78, %eps.78, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %813 : Tensor = aten::rsqrt(%812) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.80 : Tensor = aten::mul(%weight.119, %813) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.196 : Tensor = prim::GetAttr[name="bias"](%norm.39)
      %running_mean.78 : Tensor = prim::GetAttr[name="running_mean"](%norm.39)
      %817 : Tensor = aten::mul(%running_mean.78, %scale.80) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.198 : Tensor = aten::sub(%bias.196, %817, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %819 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.82 : Tensor = aten::reshape(%scale.80, %819) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %821 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.200 : Tensor = aten::reshape(%bias.198, %821) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.40 : int = prim::dtype(%x.62)
      %824 : Tensor = aten::to(%scale.82, %out_dtype.40, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %825 : Tensor = aten::mul(%x.62, %824) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %826 : Tensor = aten::to(%bias.200, %out_dtype.40, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %827 : Tensor = aten::add(%825, %826, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%827)
    block1():
      %running_mean.80 : Tensor = prim::GetAttr[name="running_mean"](%norm.39)
      %running_var.80 : Tensor = prim::GetAttr[name="running_var"](%norm.39)
      %weight.121 : Tensor = prim::GetAttr[name="weight"](%norm.39)
      %bias.202 : Tensor = prim::GetAttr[name="bias"](%norm.39)
      %eps.80 : float = prim::GetAttr[name="eps"](%norm.39)
      %833 : Tensor = aten::batch_norm(%x.62, %weight.121, %bias.202, %running_mean.80, %running_var.80, %46, %37, %eps.80, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%833)
  %out.67 : Tensor = aten::relu_(%out.65) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.10 : __torch__.detectron2.layers.wrappers.___torch_mangle_8.Conv2d = prim::GetAttr[name="conv3"](%_1.5)
  %weight.123 : Tensor = prim::GetAttr[name="weight"](%conv3.10)
  %bias.204 : Tensor? = prim::GetAttr[name="bias"](%conv3.10)
  %838 : int[] = prim::ListConstruct(%44, %44)
  %839 : int[] = prim::ListConstruct(%49, %49)
  %840 : int[] = prim::ListConstruct(%44, %44)
  %x.64 : Tensor = aten::conv2d(%out.67, %weight.123, %bias.204, %838, %839, %840, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.41 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv3.10)
  %843 : bool = prim::requires_grad(%x.64)
  %out.69 : Tensor = prim::If(%843) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.125 : Tensor = prim::GetAttr[name="weight"](%norm.41)
      %running_var.82 : Tensor = prim::GetAttr[name="running_var"](%norm.41)
      %eps.82 : float = prim::GetAttr[name="eps"](%norm.41)
      %848 : Tensor = aten::add(%running_var.82, %eps.82, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %849 : Tensor = aten::rsqrt(%848) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.84 : Tensor = aten::mul(%weight.125, %849) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.206 : Tensor = prim::GetAttr[name="bias"](%norm.41)
      %running_mean.82 : Tensor = prim::GetAttr[name="running_mean"](%norm.41)
      %853 : Tensor = aten::mul(%running_mean.82, %scale.84) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.208 : Tensor = aten::sub(%bias.206, %853, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %855 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.86 : Tensor = aten::reshape(%scale.84, %855) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %857 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.210 : Tensor = aten::reshape(%bias.208, %857) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.42 : int = prim::dtype(%x.64)
      %860 : Tensor = aten::to(%scale.86, %out_dtype.42, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %861 : Tensor = aten::mul(%x.64, %860) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %862 : Tensor = aten::to(%bias.210, %out_dtype.42, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %863 : Tensor = aten::add(%861, %862, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%863)
    block1():
      %running_mean.84 : Tensor = prim::GetAttr[name="running_mean"](%norm.41)
      %running_var.84 : Tensor = prim::GetAttr[name="running_var"](%norm.41)
      %weight.127 : Tensor = prim::GetAttr[name="weight"](%norm.41)
      %bias.212 : Tensor = prim::GetAttr[name="bias"](%norm.41)
      %eps.84 : float = prim::GetAttr[name="eps"](%norm.41)
      %869 : Tensor = aten::batch_norm(%x.64, %weight.127, %bias.212, %running_mean.84, %running_var.84, %46, %37, %eps.84, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%869)
  %out.71 : Tensor = aten::add_(%out.69, %input.33, %44) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:208:8
  %input.35 : Tensor = aten::relu_(%out.71) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:209:14
  %conv1.14 : __torch__.detectron2.layers.wrappers.___torch_mangle_10.Conv2d = prim::GetAttr[name="conv1"](%_2.5)
  %weight.129 : Tensor = prim::GetAttr[name="weight"](%conv1.14)
  %bias.214 : Tensor? = prim::GetAttr[name="bias"](%conv1.14)
  %875 : int[] = prim::ListConstruct(%44, %44)
  %876 : int[] = prim::ListConstruct(%49, %49)
  %877 : int[] = prim::ListConstruct(%44, %44)
  %x.66 : Tensor = aten::conv2d(%input.35, %weight.129, %bias.214, %875, %876, %877, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.43 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv1.14)
  %880 : bool = prim::requires_grad(%x.66)
  %out.73 : Tensor = prim::If(%880) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.131 : Tensor = prim::GetAttr[name="weight"](%norm.43)
      %running_var.86 : Tensor = prim::GetAttr[name="running_var"](%norm.43)
      %eps.86 : float = prim::GetAttr[name="eps"](%norm.43)
      %885 : Tensor = aten::add(%running_var.86, %eps.86, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %886 : Tensor = aten::rsqrt(%885) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.88 : Tensor = aten::mul(%weight.131, %886) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.216 : Tensor = prim::GetAttr[name="bias"](%norm.43)
      %running_mean.86 : Tensor = prim::GetAttr[name="running_mean"](%norm.43)
      %890 : Tensor = aten::mul(%running_mean.86, %scale.88) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.218 : Tensor = aten::sub(%bias.216, %890, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %892 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.90 : Tensor = aten::reshape(%scale.88, %892) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %894 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.220 : Tensor = aten::reshape(%bias.218, %894) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.44 : int = prim::dtype(%x.66)
      %897 : Tensor = aten::to(%scale.90, %out_dtype.44, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %898 : Tensor = aten::mul(%x.66, %897) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %899 : Tensor = aten::to(%bias.220, %out_dtype.44, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %900 : Tensor = aten::add(%898, %899, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%900)
    block1():
      %running_mean.88 : Tensor = prim::GetAttr[name="running_mean"](%norm.43)
      %running_var.88 : Tensor = prim::GetAttr[name="running_var"](%norm.43)
      %weight.133 : Tensor = prim::GetAttr[name="weight"](%norm.43)
      %bias.222 : Tensor = prim::GetAttr[name="bias"](%norm.43)
      %eps.88 : float = prim::GetAttr[name="eps"](%norm.43)
      %906 : Tensor = aten::batch_norm(%x.66, %weight.133, %bias.222, %running_mean.88, %running_var.88, %46, %37, %eps.88, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%906)
  %out.75 : Tensor = aten::relu_(%out.73) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.12 : __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d = prim::GetAttr[name="conv2"](%_2.5)
  %weight.135 : Tensor = prim::GetAttr[name="weight"](%conv2.12)
  %bias.224 : Tensor? = prim::GetAttr[name="bias"](%conv2.12)
  %911 : int[] = prim::ListConstruct(%44, %44)
  %912 : int[] = prim::ListConstruct(%44, %44)
  %913 : int[] = prim::ListConstruct(%44, %44)
  %x.68 : Tensor = aten::conv2d(%out.75, %weight.135, %bias.224, %911, %912, %913, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.45 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv2.12)
  %916 : bool = prim::requires_grad(%x.68)
  %out.77 : Tensor = prim::If(%916) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.137 : Tensor = prim::GetAttr[name="weight"](%norm.45)
      %running_var.90 : Tensor = prim::GetAttr[name="running_var"](%norm.45)
      %eps.90 : float = prim::GetAttr[name="eps"](%norm.45)
      %921 : Tensor = aten::add(%running_var.90, %eps.90, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %922 : Tensor = aten::rsqrt(%921) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.92 : Tensor = aten::mul(%weight.137, %922) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.226 : Tensor = prim::GetAttr[name="bias"](%norm.45)
      %running_mean.90 : Tensor = prim::GetAttr[name="running_mean"](%norm.45)
      %926 : Tensor = aten::mul(%running_mean.90, %scale.92) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.228 : Tensor = aten::sub(%bias.226, %926, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %928 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.94 : Tensor = aten::reshape(%scale.92, %928) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %930 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.230 : Tensor = aten::reshape(%bias.228, %930) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.46 : int = prim::dtype(%x.68)
      %933 : Tensor = aten::to(%scale.94, %out_dtype.46, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %934 : Tensor = aten::mul(%x.68, %933) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %935 : Tensor = aten::to(%bias.230, %out_dtype.46, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %936 : Tensor = aten::add(%934, %935, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%936)
    block1():
      %running_mean.92 : Tensor = prim::GetAttr[name="running_mean"](%norm.45)
      %running_var.92 : Tensor = prim::GetAttr[name="running_var"](%norm.45)
      %weight.139 : Tensor = prim::GetAttr[name="weight"](%norm.45)
      %bias.232 : Tensor = prim::GetAttr[name="bias"](%norm.45)
      %eps.92 : float = prim::GetAttr[name="eps"](%norm.45)
      %942 : Tensor = aten::batch_norm(%x.68, %weight.139, %bias.232, %running_mean.92, %running_var.92, %46, %37, %eps.92, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%942)
  %out.79 : Tensor = aten::relu_(%out.77) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.12 : __torch__.detectron2.layers.wrappers.___torch_mangle_8.Conv2d = prim::GetAttr[name="conv3"](%_2.5)
  %weight.141 : Tensor = prim::GetAttr[name="weight"](%conv3.12)
  %bias.234 : Tensor? = prim::GetAttr[name="bias"](%conv3.12)
  %947 : int[] = prim::ListConstruct(%44, %44)
  %948 : int[] = prim::ListConstruct(%49, %49)
  %949 : int[] = prim::ListConstruct(%44, %44)
  %x.70 : Tensor = aten::conv2d(%out.79, %weight.141, %bias.234, %947, %948, %949, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.47 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv3.12)
  %952 : bool = prim::requires_grad(%x.70)
  %out.81 : Tensor = prim::If(%952) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.143 : Tensor = prim::GetAttr[name="weight"](%norm.47)
      %running_var.94 : Tensor = prim::GetAttr[name="running_var"](%norm.47)
      %eps.94 : float = prim::GetAttr[name="eps"](%norm.47)
      %957 : Tensor = aten::add(%running_var.94, %eps.94, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %958 : Tensor = aten::rsqrt(%957) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.96 : Tensor = aten::mul(%weight.143, %958) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.236 : Tensor = prim::GetAttr[name="bias"](%norm.47)
      %running_mean.94 : Tensor = prim::GetAttr[name="running_mean"](%norm.47)
      %962 : Tensor = aten::mul(%running_mean.94, %scale.96) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.238 : Tensor = aten::sub(%bias.236, %962, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %964 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.98 : Tensor = aten::reshape(%scale.96, %964) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %966 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.240 : Tensor = aten::reshape(%bias.238, %966) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.48 : int = prim::dtype(%x.70)
      %969 : Tensor = aten::to(%scale.98, %out_dtype.48, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %970 : Tensor = aten::mul(%x.70, %969) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %971 : Tensor = aten::to(%bias.240, %out_dtype.48, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %972 : Tensor = aten::add(%970, %971, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%972)
    block1():
      %running_mean.96 : Tensor = prim::GetAttr[name="running_mean"](%norm.47)
      %running_var.96 : Tensor = prim::GetAttr[name="running_var"](%norm.47)
      %weight.145 : Tensor = prim::GetAttr[name="weight"](%norm.47)
      %bias.242 : Tensor = prim::GetAttr[name="bias"](%norm.47)
      %eps.96 : float = prim::GetAttr[name="eps"](%norm.47)
      %978 : Tensor = aten::batch_norm(%x.70, %weight.145, %bias.242, %running_mean.96, %running_var.96, %46, %37, %eps.96, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%978)
  %out.83 : Tensor = aten::add_(%out.81, %input.35, %44) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:208:8
  %input.37 : Tensor = aten::relu_(%out.83) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:209:14
  %conv1.16 : __torch__.detectron2.layers.wrappers.___torch_mangle_10.Conv2d = prim::GetAttr[name="conv1"](%_3.3)
  %weight.147 : Tensor = prim::GetAttr[name="weight"](%conv1.16)
  %bias.244 : Tensor? = prim::GetAttr[name="bias"](%conv1.16)
  %984 : int[] = prim::ListConstruct(%44, %44)
  %985 : int[] = prim::ListConstruct(%49, %49)
  %986 : int[] = prim::ListConstruct(%44, %44)
  %x.76 : Tensor = aten::conv2d(%input.37, %weight.147, %bias.244, %984, %985, %986, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.49 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv1.16)
  %989 : bool = prim::requires_grad(%x.76)
  %out.85 : Tensor = prim::If(%989) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.149 : Tensor = prim::GetAttr[name="weight"](%norm.49)
      %running_var.98 : Tensor = prim::GetAttr[name="running_var"](%norm.49)
      %eps.98 : float = prim::GetAttr[name="eps"](%norm.49)
      %994 : Tensor = aten::add(%running_var.98, %eps.98, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %995 : Tensor = aten::rsqrt(%994) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.100 : Tensor = aten::mul(%weight.149, %995) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.246 : Tensor = prim::GetAttr[name="bias"](%norm.49)
      %running_mean.98 : Tensor = prim::GetAttr[name="running_mean"](%norm.49)
      %999 : Tensor = aten::mul(%running_mean.98, %scale.100) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.248 : Tensor = aten::sub(%bias.246, %999, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1001 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.102 : Tensor = aten::reshape(%scale.100, %1001) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1003 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.250 : Tensor = aten::reshape(%bias.248, %1003) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.50 : int = prim::dtype(%x.76)
      %1006 : Tensor = aten::to(%scale.102, %out_dtype.50, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1007 : Tensor = aten::mul(%x.76, %1006) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1008 : Tensor = aten::to(%bias.250, %out_dtype.50, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1009 : Tensor = aten::add(%1007, %1008, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1009)
    block1():
      %running_mean.100 : Tensor = prim::GetAttr[name="running_mean"](%norm.49)
      %running_var.100 : Tensor = prim::GetAttr[name="running_var"](%norm.49)
      %weight.151 : Tensor = prim::GetAttr[name="weight"](%norm.49)
      %bias.252 : Tensor = prim::GetAttr[name="bias"](%norm.49)
      %eps.100 : float = prim::GetAttr[name="eps"](%norm.49)
      %1015 : Tensor = aten::batch_norm(%x.76, %weight.151, %bias.252, %running_mean.100, %running_var.100, %46, %37, %eps.100, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1015)
  %out.87 : Tensor = aten::relu_(%out.85) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.14 : __torch__.detectron2.layers.wrappers.___torch_mangle_7.Conv2d = prim::GetAttr[name="conv2"](%_3.3)
  %weight.153 : Tensor = prim::GetAttr[name="weight"](%conv2.14)
  %bias.254 : Tensor? = prim::GetAttr[name="bias"](%conv2.14)
  %1020 : int[] = prim::ListConstruct(%44, %44)
  %1021 : int[] = prim::ListConstruct(%44, %44)
  %1022 : int[] = prim::ListConstruct(%44, %44)
  %x.78 : Tensor = aten::conv2d(%out.87, %weight.153, %bias.254, %1020, %1021, %1022, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.51 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv2.14)
  %1025 : bool = prim::requires_grad(%x.78)
  %out.89 : Tensor = prim::If(%1025) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.155 : Tensor = prim::GetAttr[name="weight"](%norm.51)
      %running_var.102 : Tensor = prim::GetAttr[name="running_var"](%norm.51)
      %eps.102 : float = prim::GetAttr[name="eps"](%norm.51)
      %1030 : Tensor = aten::add(%running_var.102, %eps.102, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1031 : Tensor = aten::rsqrt(%1030) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.104 : Tensor = aten::mul(%weight.155, %1031) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.256 : Tensor = prim::GetAttr[name="bias"](%norm.51)
      %running_mean.102 : Tensor = prim::GetAttr[name="running_mean"](%norm.51)
      %1035 : Tensor = aten::mul(%running_mean.102, %scale.104) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.258 : Tensor = aten::sub(%bias.256, %1035, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1037 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.106 : Tensor = aten::reshape(%scale.104, %1037) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1039 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.260 : Tensor = aten::reshape(%bias.258, %1039) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.52 : int = prim::dtype(%x.78)
      %1042 : Tensor = aten::to(%scale.106, %out_dtype.52, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1043 : Tensor = aten::mul(%x.78, %1042) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1044 : Tensor = aten::to(%bias.260, %out_dtype.52, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1045 : Tensor = aten::add(%1043, %1044, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1045)
    block1():
      %running_mean.104 : Tensor = prim::GetAttr[name="running_mean"](%norm.51)
      %running_var.104 : Tensor = prim::GetAttr[name="running_var"](%norm.51)
      %weight.157 : Tensor = prim::GetAttr[name="weight"](%norm.51)
      %bias.262 : Tensor = prim::GetAttr[name="bias"](%norm.51)
      %eps.104 : float = prim::GetAttr[name="eps"](%norm.51)
      %1051 : Tensor = aten::batch_norm(%x.78, %weight.157, %bias.262, %running_mean.104, %running_var.104, %46, %37, %eps.104, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1051)
  %out.91 : Tensor = aten::relu_(%out.89) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.14 : __torch__.detectron2.layers.wrappers.___torch_mangle_8.Conv2d = prim::GetAttr[name="conv3"](%_3.3)
  %weight.159 : Tensor = prim::GetAttr[name="weight"](%conv3.14)
  %bias.264 : Tensor? = prim::GetAttr[name="bias"](%conv3.14)
  %1056 : int[] = prim::ListConstruct(%44, %44)
  %1057 : int[] = prim::ListConstruct(%49, %49)
  %1058 : int[] = prim::ListConstruct(%44, %44)
  %x.80 : Tensor = aten::conv2d(%out.91, %weight.159, %bias.264, %1056, %1057, %1058, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.53 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv3.14)
  %1061 : bool = prim::requires_grad(%x.80)
  %out.93 : Tensor = prim::If(%1061) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.161 : Tensor = prim::GetAttr[name="weight"](%norm.53)
      %running_var.106 : Tensor = prim::GetAttr[name="running_var"](%norm.53)
      %eps.106 : float = prim::GetAttr[name="eps"](%norm.53)
      %1066 : Tensor = aten::add(%running_var.106, %eps.106, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1067 : Tensor = aten::rsqrt(%1066) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.108 : Tensor = aten::mul(%weight.161, %1067) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.266 : Tensor = prim::GetAttr[name="bias"](%norm.53)
      %running_mean.106 : Tensor = prim::GetAttr[name="running_mean"](%norm.53)
      %1071 : Tensor = aten::mul(%running_mean.106, %scale.108) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.268 : Tensor = aten::sub(%bias.266, %1071, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1073 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.110 : Tensor = aten::reshape(%scale.108, %1073) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1075 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.270 : Tensor = aten::reshape(%bias.268, %1075) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.54 : int = prim::dtype(%x.80)
      %1078 : Tensor = aten::to(%scale.110, %out_dtype.54, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1079 : Tensor = aten::mul(%x.80, %1078) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1080 : Tensor = aten::to(%bias.270, %out_dtype.54, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1081 : Tensor = aten::add(%1079, %1080, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1081)
    block1():
      %running_mean.108 : Tensor = prim::GetAttr[name="running_mean"](%norm.53)
      %running_var.108 : Tensor = prim::GetAttr[name="running_var"](%norm.53)
      %weight.163 : Tensor = prim::GetAttr[name="weight"](%norm.53)
      %bias.272 : Tensor = prim::GetAttr[name="bias"](%norm.53)
      %eps.108 : float = prim::GetAttr[name="eps"](%norm.53)
      %1087 : Tensor = aten::batch_norm(%x.80, %weight.163, %bias.272, %running_mean.108, %running_var.108, %46, %37, %eps.108, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1087)
  %out.95 : Tensor = aten::add_(%out.93, %input.37, %44) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:208:8
  %x.42 : Tensor = aten::relu_(%out.95) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:209:14
  %_out_features.5 : str[] = prim::GetAttr[name="_out_features"](%bottom_up)
  %1091 : bool = aten::__contains__(%_out_features.5, %name.7) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:450:15
   = prim::If(%1091) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:450:12
    block0():
       = aten::_set_item(%bottom_up_features.1, %name.7, %x.42) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:451:16
      -> ()
    block1():
      -> ()
  %_0.7 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_17.BottleneckBlock = prim::GetAttr[name="0"](%_2.1)
  %_1.7 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="1"](%_2.1)
  %_2.7 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="2"](%_2.1)
  %_3.4 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="3"](%_2.1)
  %_4.1 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="4"](%_2.1)
  %_5 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_19.BottleneckBlock = prim::GetAttr[name="5"](%_2.1)
  %conv1.18 : __torch__.detectron2.layers.wrappers.___torch_mangle_14.Conv2d = prim::GetAttr[name="conv1"](%_0.7)
  %weight.165 : Tensor = prim::GetAttr[name="weight"](%conv1.18)
  %bias.274 : Tensor? = prim::GetAttr[name="bias"](%conv1.18)
  %1101 : int[] = prim::ListConstruct(%36, %36)
  %1102 : int[] = prim::ListConstruct(%49, %49)
  %1103 : int[] = prim::ListConstruct(%44, %44)
  %x.84 : Tensor = aten::conv2d(%x.42, %weight.165, %bias.274, %1101, %1102, %1103, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.55 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv1.18)
  %1106 : bool = prim::requires_grad(%x.84)
  %out.97 : Tensor = prim::If(%1106) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.167 : Tensor = prim::GetAttr[name="weight"](%norm.55)
      %running_var.110 : Tensor = prim::GetAttr[name="running_var"](%norm.55)
      %eps.110 : float = prim::GetAttr[name="eps"](%norm.55)
      %1111 : Tensor = aten::add(%running_var.110, %eps.110, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1112 : Tensor = aten::rsqrt(%1111) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.112 : Tensor = aten::mul(%weight.167, %1112) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.276 : Tensor = prim::GetAttr[name="bias"](%norm.55)
      %running_mean.110 : Tensor = prim::GetAttr[name="running_mean"](%norm.55)
      %1116 : Tensor = aten::mul(%running_mean.110, %scale.112) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.278 : Tensor = aten::sub(%bias.276, %1116, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1118 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.114 : Tensor = aten::reshape(%scale.112, %1118) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1120 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.280 : Tensor = aten::reshape(%bias.278, %1120) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.56 : int = prim::dtype(%x.84)
      %1123 : Tensor = aten::to(%scale.114, %out_dtype.56, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1124 : Tensor = aten::mul(%x.84, %1123) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1125 : Tensor = aten::to(%bias.280, %out_dtype.56, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1126 : Tensor = aten::add(%1124, %1125, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1126)
    block1():
      %running_mean.112 : Tensor = prim::GetAttr[name="running_mean"](%norm.55)
      %running_var.112 : Tensor = prim::GetAttr[name="running_var"](%norm.55)
      %weight.169 : Tensor = prim::GetAttr[name="weight"](%norm.55)
      %bias.282 : Tensor = prim::GetAttr[name="bias"](%norm.55)
      %eps.112 : float = prim::GetAttr[name="eps"](%norm.55)
      %1132 : Tensor = aten::batch_norm(%x.84, %weight.169, %bias.282, %running_mean.112, %running_var.112, %46, %37, %eps.112, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1132)
  %out.99 : Tensor = aten::relu_(%out.97) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.16 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%_0.7)
  %weight.171 : Tensor = prim::GetAttr[name="weight"](%conv2.16)
  %bias.284 : Tensor? = prim::GetAttr[name="bias"](%conv2.16)
  %1137 : int[] = prim::ListConstruct(%44, %44)
  %1138 : int[] = prim::ListConstruct(%44, %44)
  %1139 : int[] = prim::ListConstruct(%44, %44)
  %x.86 : Tensor = aten::conv2d(%out.99, %weight.171, %bias.284, %1137, %1138, %1139, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.57 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv2.16)
  %1142 : bool = prim::requires_grad(%x.86)
  %out.101 : Tensor = prim::If(%1142) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.173 : Tensor = prim::GetAttr[name="weight"](%norm.57)
      %running_var.114 : Tensor = prim::GetAttr[name="running_var"](%norm.57)
      %eps.114 : float = prim::GetAttr[name="eps"](%norm.57)
      %1147 : Tensor = aten::add(%running_var.114, %eps.114, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1148 : Tensor = aten::rsqrt(%1147) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.116 : Tensor = aten::mul(%weight.173, %1148) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.286 : Tensor = prim::GetAttr[name="bias"](%norm.57)
      %running_mean.114 : Tensor = prim::GetAttr[name="running_mean"](%norm.57)
      %1152 : Tensor = aten::mul(%running_mean.114, %scale.116) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.288 : Tensor = aten::sub(%bias.286, %1152, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1154 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.118 : Tensor = aten::reshape(%scale.116, %1154) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1156 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.290 : Tensor = aten::reshape(%bias.288, %1156) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.58 : int = prim::dtype(%x.86)
      %1159 : Tensor = aten::to(%scale.118, %out_dtype.58, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1160 : Tensor = aten::mul(%x.86, %1159) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1161 : Tensor = aten::to(%bias.290, %out_dtype.58, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1162 : Tensor = aten::add(%1160, %1161, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1162)
    block1():
      %running_mean.116 : Tensor = prim::GetAttr[name="running_mean"](%norm.57)
      %running_var.116 : Tensor = prim::GetAttr[name="running_var"](%norm.57)
      %weight.175 : Tensor = prim::GetAttr[name="weight"](%norm.57)
      %bias.292 : Tensor = prim::GetAttr[name="bias"](%norm.57)
      %eps.116 : float = prim::GetAttr[name="eps"](%norm.57)
      %1168 : Tensor = aten::batch_norm(%x.86, %weight.175, %bias.292, %running_mean.116, %running_var.116, %46, %37, %eps.116, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1168)
  %out.103 : Tensor = aten::relu_(%out.101) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.16 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%_0.7)
  %weight.177 : Tensor = prim::GetAttr[name="weight"](%conv3.16)
  %bias.294 : Tensor? = prim::GetAttr[name="bias"](%conv3.16)
  %1173 : int[] = prim::ListConstruct(%44, %44)
  %1174 : int[] = prim::ListConstruct(%49, %49)
  %1175 : int[] = prim::ListConstruct(%44, %44)
  %x.88 : Tensor = aten::conv2d(%out.103, %weight.177, %bias.294, %1173, %1174, %1175, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.59 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv3.16)
  %1178 : bool = prim::requires_grad(%x.88)
  %out.105 : Tensor = prim::If(%1178) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.179 : Tensor = prim::GetAttr[name="weight"](%norm.59)
      %running_var.118 : Tensor = prim::GetAttr[name="running_var"](%norm.59)
      %eps.118 : float = prim::GetAttr[name="eps"](%norm.59)
      %1183 : Tensor = aten::add(%running_var.118, %eps.118, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1184 : Tensor = aten::rsqrt(%1183) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.120 : Tensor = aten::mul(%weight.179, %1184) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.296 : Tensor = prim::GetAttr[name="bias"](%norm.59)
      %running_mean.118 : Tensor = prim::GetAttr[name="running_mean"](%norm.59)
      %1188 : Tensor = aten::mul(%running_mean.118, %scale.120) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.298 : Tensor = aten::sub(%bias.296, %1188, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1190 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.122 : Tensor = aten::reshape(%scale.120, %1190) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1192 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.300 : Tensor = aten::reshape(%bias.298, %1192) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.60 : int = prim::dtype(%x.88)
      %1195 : Tensor = aten::to(%scale.122, %out_dtype.60, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1196 : Tensor = aten::mul(%x.88, %1195) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1197 : Tensor = aten::to(%bias.300, %out_dtype.60, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1198 : Tensor = aten::add(%1196, %1197, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1198)
    block1():
      %running_mean.120 : Tensor = prim::GetAttr[name="running_mean"](%norm.59)
      %running_var.120 : Tensor = prim::GetAttr[name="running_var"](%norm.59)
      %weight.181 : Tensor = prim::GetAttr[name="weight"](%norm.59)
      %bias.302 : Tensor = prim::GetAttr[name="bias"](%norm.59)
      %eps.120 : float = prim::GetAttr[name="eps"](%norm.59)
      %1204 : Tensor = aten::batch_norm(%x.88, %weight.181, %bias.302, %running_mean.120, %running_var.120, %46, %37, %eps.120, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1204)
  %shortcut.12 : __torch__.detectron2.layers.wrappers.___torch_mangle_13.Conv2d = prim::GetAttr[name="shortcut"](%_0.7)
  %weight.183 : Tensor = prim::GetAttr[name="weight"](%shortcut.12)
  %bias.304 : Tensor? = prim::GetAttr[name="bias"](%shortcut.12)
  %1208 : int[] = prim::ListConstruct(%36, %36)
  %1209 : int[] = prim::ListConstruct(%49, %49)
  %1210 : int[] = prim::ListConstruct(%44, %44)
  %x.90 : Tensor = aten::conv2d(%x.42, %weight.183, %bias.304, %1208, %1209, %1210, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.61 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%shortcut.12)
  %1213 : bool = prim::requires_grad(%x.90)
  %shortcut.14 : Tensor = prim::If(%1213) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.185 : Tensor = prim::GetAttr[name="weight"](%norm.61)
      %running_var.122 : Tensor = prim::GetAttr[name="running_var"](%norm.61)
      %eps.122 : float = prim::GetAttr[name="eps"](%norm.61)
      %1218 : Tensor = aten::add(%running_var.122, %eps.122, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1219 : Tensor = aten::rsqrt(%1218) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.124 : Tensor = aten::mul(%weight.185, %1219) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.306 : Tensor = prim::GetAttr[name="bias"](%norm.61)
      %running_mean.122 : Tensor = prim::GetAttr[name="running_mean"](%norm.61)
      %1223 : Tensor = aten::mul(%running_mean.122, %scale.124) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.308 : Tensor = aten::sub(%bias.306, %1223, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1225 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.126 : Tensor = aten::reshape(%scale.124, %1225) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1227 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.310 : Tensor = aten::reshape(%bias.308, %1227) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.62 : int = prim::dtype(%x.90)
      %1230 : Tensor = aten::to(%scale.126, %out_dtype.62, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1231 : Tensor = aten::mul(%x.90, %1230) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1232 : Tensor = aten::to(%bias.310, %out_dtype.62, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1233 : Tensor = aten::add(%1231, %1232, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1233)
    block1():
      %running_mean.124 : Tensor = prim::GetAttr[name="running_mean"](%norm.61)
      %running_var.124 : Tensor = prim::GetAttr[name="running_var"](%norm.61)
      %weight.187 : Tensor = prim::GetAttr[name="weight"](%norm.61)
      %bias.312 : Tensor = prim::GetAttr[name="bias"](%norm.61)
      %eps.124 : float = prim::GetAttr[name="eps"](%norm.61)
      %1239 : Tensor = aten::batch_norm(%x.90, %weight.187, %bias.312, %running_mean.124, %running_var.124, %46, %37, %eps.124, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1239)
  %out.107 : Tensor = aten::add_(%out.105, %shortcut.14, %44) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:208:8
  %input.39 : Tensor = aten::relu_(%out.107) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:209:14
  %conv1.20 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%_1.7)
  %weight.189 : Tensor = prim::GetAttr[name="weight"](%conv1.20)
  %bias.314 : Tensor? = prim::GetAttr[name="bias"](%conv1.20)
  %1245 : int[] = prim::ListConstruct(%44, %44)
  %1246 : int[] = prim::ListConstruct(%49, %49)
  %1247 : int[] = prim::ListConstruct(%44, %44)
  %x.92 : Tensor = aten::conv2d(%input.39, %weight.189, %bias.314, %1245, %1246, %1247, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.63 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv1.20)
  %1250 : bool = prim::requires_grad(%x.92)
  %out.109 : Tensor = prim::If(%1250) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.191 : Tensor = prim::GetAttr[name="weight"](%norm.63)
      %running_var.126 : Tensor = prim::GetAttr[name="running_var"](%norm.63)
      %eps.126 : float = prim::GetAttr[name="eps"](%norm.63)
      %1255 : Tensor = aten::add(%running_var.126, %eps.126, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1256 : Tensor = aten::rsqrt(%1255) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.128 : Tensor = aten::mul(%weight.191, %1256) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.316 : Tensor = prim::GetAttr[name="bias"](%norm.63)
      %running_mean.126 : Tensor = prim::GetAttr[name="running_mean"](%norm.63)
      %1260 : Tensor = aten::mul(%running_mean.126, %scale.128) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.318 : Tensor = aten::sub(%bias.316, %1260, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1262 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.130 : Tensor = aten::reshape(%scale.128, %1262) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1264 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.320 : Tensor = aten::reshape(%bias.318, %1264) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.64 : int = prim::dtype(%x.92)
      %1267 : Tensor = aten::to(%scale.130, %out_dtype.64, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1268 : Tensor = aten::mul(%x.92, %1267) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1269 : Tensor = aten::to(%bias.320, %out_dtype.64, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1270 : Tensor = aten::add(%1268, %1269, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1270)
    block1():
      %running_mean.128 : Tensor = prim::GetAttr[name="running_mean"](%norm.63)
      %running_var.128 : Tensor = prim::GetAttr[name="running_var"](%norm.63)
      %weight.193 : Tensor = prim::GetAttr[name="weight"](%norm.63)
      %bias.322 : Tensor = prim::GetAttr[name="bias"](%norm.63)
      %eps.128 : float = prim::GetAttr[name="eps"](%norm.63)
      %1276 : Tensor = aten::batch_norm(%x.92, %weight.193, %bias.322, %running_mean.128, %running_var.128, %46, %37, %eps.128, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1276)
  %out.111 : Tensor = aten::relu_(%out.109) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.18 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%_1.7)
  %weight.195 : Tensor = prim::GetAttr[name="weight"](%conv2.18)
  %bias.324 : Tensor? = prim::GetAttr[name="bias"](%conv2.18)
  %1281 : int[] = prim::ListConstruct(%44, %44)
  %1282 : int[] = prim::ListConstruct(%44, %44)
  %1283 : int[] = prim::ListConstruct(%44, %44)
  %x.94 : Tensor = aten::conv2d(%out.111, %weight.195, %bias.324, %1281, %1282, %1283, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.65 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv2.18)
  %1286 : bool = prim::requires_grad(%x.94)
  %out.113 : Tensor = prim::If(%1286) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.197 : Tensor = prim::GetAttr[name="weight"](%norm.65)
      %running_var.130 : Tensor = prim::GetAttr[name="running_var"](%norm.65)
      %eps.130 : float = prim::GetAttr[name="eps"](%norm.65)
      %1291 : Tensor = aten::add(%running_var.130, %eps.130, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1292 : Tensor = aten::rsqrt(%1291) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.132 : Tensor = aten::mul(%weight.197, %1292) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.326 : Tensor = prim::GetAttr[name="bias"](%norm.65)
      %running_mean.130 : Tensor = prim::GetAttr[name="running_mean"](%norm.65)
      %1296 : Tensor = aten::mul(%running_mean.130, %scale.132) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.328 : Tensor = aten::sub(%bias.326, %1296, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1298 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.134 : Tensor = aten::reshape(%scale.132, %1298) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1300 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.330 : Tensor = aten::reshape(%bias.328, %1300) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.66 : int = prim::dtype(%x.94)
      %1303 : Tensor = aten::to(%scale.134, %out_dtype.66, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1304 : Tensor = aten::mul(%x.94, %1303) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1305 : Tensor = aten::to(%bias.330, %out_dtype.66, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1306 : Tensor = aten::add(%1304, %1305, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1306)
    block1():
      %running_mean.132 : Tensor = prim::GetAttr[name="running_mean"](%norm.65)
      %running_var.132 : Tensor = prim::GetAttr[name="running_var"](%norm.65)
      %weight.199 : Tensor = prim::GetAttr[name="weight"](%norm.65)
      %bias.332 : Tensor = prim::GetAttr[name="bias"](%norm.65)
      %eps.132 : float = prim::GetAttr[name="eps"](%norm.65)
      %1312 : Tensor = aten::batch_norm(%x.94, %weight.199, %bias.332, %running_mean.132, %running_var.132, %46, %37, %eps.132, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1312)
  %out.115 : Tensor = aten::relu_(%out.113) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.18 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%_1.7)
  %weight.201 : Tensor = prim::GetAttr[name="weight"](%conv3.18)
  %bias.334 : Tensor? = prim::GetAttr[name="bias"](%conv3.18)
  %1317 : int[] = prim::ListConstruct(%44, %44)
  %1318 : int[] = prim::ListConstruct(%49, %49)
  %1319 : int[] = prim::ListConstruct(%44, %44)
  %x.96 : Tensor = aten::conv2d(%out.115, %weight.201, %bias.334, %1317, %1318, %1319, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.67 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv3.18)
  %1322 : bool = prim::requires_grad(%x.96)
  %out.117 : Tensor = prim::If(%1322) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.203 : Tensor = prim::GetAttr[name="weight"](%norm.67)
      %running_var.134 : Tensor = prim::GetAttr[name="running_var"](%norm.67)
      %eps.134 : float = prim::GetAttr[name="eps"](%norm.67)
      %1327 : Tensor = aten::add(%running_var.134, %eps.134, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1328 : Tensor = aten::rsqrt(%1327) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.136 : Tensor = aten::mul(%weight.203, %1328) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.336 : Tensor = prim::GetAttr[name="bias"](%norm.67)
      %running_mean.134 : Tensor = prim::GetAttr[name="running_mean"](%norm.67)
      %1332 : Tensor = aten::mul(%running_mean.134, %scale.136) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.338 : Tensor = aten::sub(%bias.336, %1332, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1334 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.138 : Tensor = aten::reshape(%scale.136, %1334) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1336 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.340 : Tensor = aten::reshape(%bias.338, %1336) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.68 : int = prim::dtype(%x.96)
      %1339 : Tensor = aten::to(%scale.138, %out_dtype.68, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1340 : Tensor = aten::mul(%x.96, %1339) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1341 : Tensor = aten::to(%bias.340, %out_dtype.68, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1342 : Tensor = aten::add(%1340, %1341, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1342)
    block1():
      %running_mean.136 : Tensor = prim::GetAttr[name="running_mean"](%norm.67)
      %running_var.136 : Tensor = prim::GetAttr[name="running_var"](%norm.67)
      %weight.205 : Tensor = prim::GetAttr[name="weight"](%norm.67)
      %bias.342 : Tensor = prim::GetAttr[name="bias"](%norm.67)
      %eps.136 : float = prim::GetAttr[name="eps"](%norm.67)
      %1348 : Tensor = aten::batch_norm(%x.96, %weight.205, %bias.342, %running_mean.136, %running_var.136, %46, %37, %eps.136, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1348)
  %out.119 : Tensor = aten::add_(%out.117, %input.39, %44) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:208:8
  %input.41 : Tensor = aten::relu_(%out.119) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:209:14
  %conv1.5 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%_2.7)
  %weight.40 : Tensor = prim::GetAttr[name="weight"](%conv1.5)
  %bias.67 : Tensor? = prim::GetAttr[name="bias"](%conv1.5)
  %1354 : int[] = prim::ListConstruct(%44, %44)
  %1355 : int[] = prim::ListConstruct(%49, %49)
  %1356 : int[] = prim::ListConstruct(%44, %44)
  %x.19 : Tensor = aten::conv2d(%input.41, %weight.40, %bias.67, %1354, %1355, %1356, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.14 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv1.5)
  %1359 : bool = prim::requires_grad(%x.19)
  %out.36 : Tensor = prim::If(%1359) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.42 : Tensor = prim::GetAttr[name="weight"](%norm.14)
      %running_var.27 : Tensor = prim::GetAttr[name="running_var"](%norm.14)
      %eps.27 : float = prim::GetAttr[name="eps"](%norm.14)
      %1364 : Tensor = aten::add(%running_var.27, %eps.27, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1365 : Tensor = aten::rsqrt(%1364) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.31 : Tensor = aten::mul(%weight.42, %1365) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.69 : Tensor = prim::GetAttr[name="bias"](%norm.14)
      %running_mean.27 : Tensor = prim::GetAttr[name="running_mean"](%norm.14)
      %1369 : Tensor = aten::mul(%running_mean.27, %scale.31) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.71 : Tensor = aten::sub(%bias.69, %1369, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1371 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.33 : Tensor = aten::reshape(%scale.31, %1371) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1373 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.73 : Tensor = aten::reshape(%bias.71, %1373) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.15 : int = prim::dtype(%x.19)
      %1376 : Tensor = aten::to(%scale.33, %out_dtype.15, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1377 : Tensor = aten::mul(%x.19, %1376) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1378 : Tensor = aten::to(%bias.73, %out_dtype.15, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1379 : Tensor = aten::add(%1377, %1378, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1379)
    block1():
      %running_mean.29 : Tensor = prim::GetAttr[name="running_mean"](%norm.14)
      %running_var.29 : Tensor = prim::GetAttr[name="running_var"](%norm.14)
      %weight.44 : Tensor = prim::GetAttr[name="weight"](%norm.14)
      %bias.75 : Tensor = prim::GetAttr[name="bias"](%norm.14)
      %eps.29 : float = prim::GetAttr[name="eps"](%norm.14)
      %1385 : Tensor = aten::batch_norm(%x.19, %weight.44, %bias.75, %running_mean.29, %running_var.29, %46, %37, %eps.29, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1385)
  %out.38 : Tensor = aten::relu_(%out.36) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.5 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%_2.7)
  %weight.46 : Tensor = prim::GetAttr[name="weight"](%conv2.5)
  %bias.77 : Tensor? = prim::GetAttr[name="bias"](%conv2.5)
  %1390 : int[] = prim::ListConstruct(%44, %44)
  %1391 : int[] = prim::ListConstruct(%44, %44)
  %1392 : int[] = prim::ListConstruct(%44, %44)
  %x.91 : Tensor = aten::conv2d(%out.38, %weight.46, %bias.77, %1390, %1391, %1392, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.16 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv2.5)
  %1395 : bool = prim::requires_grad(%x.91)
  %out.40 : Tensor = prim::If(%1395) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.48 : Tensor = prim::GetAttr[name="weight"](%norm.16)
      %running_var.31 : Tensor = prim::GetAttr[name="running_var"](%norm.16)
      %eps.31 : float = prim::GetAttr[name="eps"](%norm.16)
      %1400 : Tensor = aten::add(%running_var.31, %eps.31, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1401 : Tensor = aten::rsqrt(%1400) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.35 : Tensor = aten::mul(%weight.48, %1401) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.79 : Tensor = prim::GetAttr[name="bias"](%norm.16)
      %running_mean.31 : Tensor = prim::GetAttr[name="running_mean"](%norm.16)
      %1405 : Tensor = aten::mul(%running_mean.31, %scale.35) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.81 : Tensor = aten::sub(%bias.79, %1405, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1407 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.37 : Tensor = aten::reshape(%scale.35, %1407) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1409 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.83 : Tensor = aten::reshape(%bias.81, %1409) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.17 : int = prim::dtype(%x.91)
      %1412 : Tensor = aten::to(%scale.37, %out_dtype.17, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1413 : Tensor = aten::mul(%x.91, %1412) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1414 : Tensor = aten::to(%bias.83, %out_dtype.17, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1415 : Tensor = aten::add(%1413, %1414, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1415)
    block1():
      %running_mean.33 : Tensor = prim::GetAttr[name="running_mean"](%norm.16)
      %running_var.33 : Tensor = prim::GetAttr[name="running_var"](%norm.16)
      %weight.50 : Tensor = prim::GetAttr[name="weight"](%norm.16)
      %bias.85 : Tensor = prim::GetAttr[name="bias"](%norm.16)
      %eps.33 : float = prim::GetAttr[name="eps"](%norm.16)
      %1421 : Tensor = aten::batch_norm(%x.91, %weight.50, %bias.85, %running_mean.33, %running_var.33, %46, %37, %eps.33, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1421)
  %out.42 : Tensor = aten::relu_(%out.40) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.5 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%_2.7)
  %weight.52 : Tensor = prim::GetAttr[name="weight"](%conv3.5)
  %bias.87 : Tensor? = prim::GetAttr[name="bias"](%conv3.5)
  %1426 : int[] = prim::ListConstruct(%44, %44)
  %1427 : int[] = prim::ListConstruct(%49, %49)
  %1428 : int[] = prim::ListConstruct(%44, %44)
  %x.23 : Tensor = aten::conv2d(%out.42, %weight.52, %bias.87, %1426, %1427, %1428, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.18 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv3.5)
  %1431 : bool = prim::requires_grad(%x.23)
  %out.44 : Tensor = prim::If(%1431) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.54 : Tensor = prim::GetAttr[name="weight"](%norm.18)
      %running_var.35 : Tensor = prim::GetAttr[name="running_var"](%norm.18)
      %eps.35 : float = prim::GetAttr[name="eps"](%norm.18)
      %1436 : Tensor = aten::add(%running_var.35, %eps.35, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1437 : Tensor = aten::rsqrt(%1436) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.39 : Tensor = aten::mul(%weight.54, %1437) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.89 : Tensor = prim::GetAttr[name="bias"](%norm.18)
      %running_mean.35 : Tensor = prim::GetAttr[name="running_mean"](%norm.18)
      %1441 : Tensor = aten::mul(%running_mean.35, %scale.39) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.91 : Tensor = aten::sub(%bias.89, %1441, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1443 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.41 : Tensor = aten::reshape(%scale.39, %1443) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1445 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.93 : Tensor = aten::reshape(%bias.91, %1445) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.19 : int = prim::dtype(%x.23)
      %1448 : Tensor = aten::to(%scale.41, %out_dtype.19, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1449 : Tensor = aten::mul(%x.23, %1448) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1450 : Tensor = aten::to(%bias.93, %out_dtype.19, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1451 : Tensor = aten::add(%1449, %1450, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1451)
    block1():
      %running_mean.37 : Tensor = prim::GetAttr[name="running_mean"](%norm.18)
      %running_var.37 : Tensor = prim::GetAttr[name="running_var"](%norm.18)
      %weight.56 : Tensor = prim::GetAttr[name="weight"](%norm.18)
      %bias.95 : Tensor = prim::GetAttr[name="bias"](%norm.18)
      %eps.37 : float = prim::GetAttr[name="eps"](%norm.18)
      %1457 : Tensor = aten::batch_norm(%x.23, %weight.56, %bias.95, %running_mean.37, %running_var.37, %46, %37, %eps.37, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1457)
  %out.46 : Tensor = aten::add_(%out.44, %input.41, %44) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:208:8
  %input.22 : Tensor = aten::relu_(%out.46) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:209:14
  %conv1.7 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%_3.4)
  %weight.58 : Tensor = prim::GetAttr[name="weight"](%conv1.7)
  %bias.97 : Tensor? = prim::GetAttr[name="bias"](%conv1.7)
  %1463 : int[] = prim::ListConstruct(%44, %44)
  %1464 : int[] = prim::ListConstruct(%49, %49)
  %1465 : int[] = prim::ListConstruct(%44, %44)
  %x.93 : Tensor = aten::conv2d(%input.22, %weight.58, %bias.97, %1463, %1464, %1465, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.20 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv1.7)
  %1468 : bool = prim::requires_grad(%x.93)
  %out.48 : Tensor = prim::If(%1468) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.60 : Tensor = prim::GetAttr[name="weight"](%norm.20)
      %running_var.39 : Tensor = prim::GetAttr[name="running_var"](%norm.20)
      %eps.39 : float = prim::GetAttr[name="eps"](%norm.20)
      %1473 : Tensor = aten::add(%running_var.39, %eps.39, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1474 : Tensor = aten::rsqrt(%1473) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.43 : Tensor = aten::mul(%weight.60, %1474) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.99 : Tensor = prim::GetAttr[name="bias"](%norm.20)
      %running_mean.39 : Tensor = prim::GetAttr[name="running_mean"](%norm.20)
      %1478 : Tensor = aten::mul(%running_mean.39, %scale.43) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.101 : Tensor = aten::sub(%bias.99, %1478, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1480 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.45 : Tensor = aten::reshape(%scale.43, %1480) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1482 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.103 : Tensor = aten::reshape(%bias.101, %1482) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.21 : int = prim::dtype(%x.93)
      %1485 : Tensor = aten::to(%scale.45, %out_dtype.21, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1486 : Tensor = aten::mul(%x.93, %1485) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1487 : Tensor = aten::to(%bias.103, %out_dtype.21, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1488 : Tensor = aten::add(%1486, %1487, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1488)
    block1():
      %running_mean.41 : Tensor = prim::GetAttr[name="running_mean"](%norm.20)
      %running_var.41 : Tensor = prim::GetAttr[name="running_var"](%norm.20)
      %weight.62 : Tensor = prim::GetAttr[name="weight"](%norm.20)
      %bias.105 : Tensor = prim::GetAttr[name="bias"](%norm.20)
      %eps.41 : float = prim::GetAttr[name="eps"](%norm.20)
      %1494 : Tensor = aten::batch_norm(%x.93, %weight.62, %bias.105, %running_mean.41, %running_var.41, %46, %37, %eps.41, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1494)
  %out.50 : Tensor = aten::relu_(%out.48) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.7 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%_3.4)
  %weight.64 : Tensor = prim::GetAttr[name="weight"](%conv2.7)
  %bias.107 : Tensor? = prim::GetAttr[name="bias"](%conv2.7)
  %1499 : int[] = prim::ListConstruct(%44, %44)
  %1500 : int[] = prim::ListConstruct(%44, %44)
  %1501 : int[] = prim::ListConstruct(%44, %44)
  %x.27 : Tensor = aten::conv2d(%out.50, %weight.64, %bias.107, %1499, %1500, %1501, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.22 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv2.7)
  %1504 : bool = prim::requires_grad(%x.27)
  %out.52 : Tensor = prim::If(%1504) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.66 : Tensor = prim::GetAttr[name="weight"](%norm.22)
      %running_var.43 : Tensor = prim::GetAttr[name="running_var"](%norm.22)
      %eps.43 : float = prim::GetAttr[name="eps"](%norm.22)
      %1509 : Tensor = aten::add(%running_var.43, %eps.43, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1510 : Tensor = aten::rsqrt(%1509) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.47 : Tensor = aten::mul(%weight.66, %1510) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.109 : Tensor = prim::GetAttr[name="bias"](%norm.22)
      %running_mean.43 : Tensor = prim::GetAttr[name="running_mean"](%norm.22)
      %1514 : Tensor = aten::mul(%running_mean.43, %scale.47) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.111 : Tensor = aten::sub(%bias.109, %1514, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1516 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.49 : Tensor = aten::reshape(%scale.47, %1516) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1518 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.113 : Tensor = aten::reshape(%bias.111, %1518) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.23 : int = prim::dtype(%x.27)
      %1521 : Tensor = aten::to(%scale.49, %out_dtype.23, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1522 : Tensor = aten::mul(%x.27, %1521) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1523 : Tensor = aten::to(%bias.113, %out_dtype.23, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1524 : Tensor = aten::add(%1522, %1523, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1524)
    block1():
      %running_mean.45 : Tensor = prim::GetAttr[name="running_mean"](%norm.22)
      %running_var.45 : Tensor = prim::GetAttr[name="running_var"](%norm.22)
      %weight.68 : Tensor = prim::GetAttr[name="weight"](%norm.22)
      %bias.115 : Tensor = prim::GetAttr[name="bias"](%norm.22)
      %eps.45 : float = prim::GetAttr[name="eps"](%norm.22)
      %1530 : Tensor = aten::batch_norm(%x.27, %weight.68, %bias.115, %running_mean.45, %running_var.45, %46, %37, %eps.45, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1530)
  %out.54 : Tensor = aten::relu_(%out.52) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.7 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%_3.4)
  %weight.70 : Tensor = prim::GetAttr[name="weight"](%conv3.7)
  %bias.117 : Tensor? = prim::GetAttr[name="bias"](%conv3.7)
  %1535 : int[] = prim::ListConstruct(%44, %44)
  %1536 : int[] = prim::ListConstruct(%49, %49)
  %1537 : int[] = prim::ListConstruct(%44, %44)
  %x.29 : Tensor = aten::conv2d(%out.54, %weight.70, %bias.117, %1535, %1536, %1537, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.24 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv3.7)
  %1540 : bool = prim::requires_grad(%x.29)
  %out.56 : Tensor = prim::If(%1540) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.72 : Tensor = prim::GetAttr[name="weight"](%norm.24)
      %running_var.47 : Tensor = prim::GetAttr[name="running_var"](%norm.24)
      %eps.47 : float = prim::GetAttr[name="eps"](%norm.24)
      %1545 : Tensor = aten::add(%running_var.47, %eps.47, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1546 : Tensor = aten::rsqrt(%1545) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.51 : Tensor = aten::mul(%weight.72, %1546) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.119 : Tensor = prim::GetAttr[name="bias"](%norm.24)
      %running_mean.47 : Tensor = prim::GetAttr[name="running_mean"](%norm.24)
      %1550 : Tensor = aten::mul(%running_mean.47, %scale.51) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.121 : Tensor = aten::sub(%bias.119, %1550, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1552 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.53 : Tensor = aten::reshape(%scale.51, %1552) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1554 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.123 : Tensor = aten::reshape(%bias.121, %1554) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.25 : int = prim::dtype(%x.29)
      %1557 : Tensor = aten::to(%scale.53, %out_dtype.25, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1558 : Tensor = aten::mul(%x.29, %1557) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1559 : Tensor = aten::to(%bias.123, %out_dtype.25, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1560 : Tensor = aten::add(%1558, %1559, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1560)
    block1():
      %running_mean.49 : Tensor = prim::GetAttr[name="running_mean"](%norm.24)
      %running_var.49 : Tensor = prim::GetAttr[name="running_var"](%norm.24)
      %weight.74 : Tensor = prim::GetAttr[name="weight"](%norm.24)
      %bias.125 : Tensor = prim::GetAttr[name="bias"](%norm.24)
      %eps.49 : float = prim::GetAttr[name="eps"](%norm.24)
      %1566 : Tensor = aten::batch_norm(%x.29, %weight.74, %bias.125, %running_mean.49, %running_var.49, %46, %37, %eps.49, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1566)
  %out.58 : Tensor = aten::add_(%out.56, %input.22, %44) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:208:8
  %input.27 : Tensor = aten::relu_(%out.58) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:209:14
  %conv1.9 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%_4.1)
  %weight.76 : Tensor = prim::GetAttr[name="weight"](%conv1.9)
  %bias.127 : Tensor? = prim::GetAttr[name="bias"](%conv1.9)
  %1572 : int[] = prim::ListConstruct(%44, %44)
  %1573 : int[] = prim::ListConstruct(%49, %49)
  %1574 : int[] = prim::ListConstruct(%44, %44)
  %x.67 : Tensor = aten::conv2d(%input.27, %weight.76, %bias.127, %1572, %1573, %1574, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.26 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv1.9)
  %1577 : bool = prim::requires_grad(%x.67)
  %out.60 : Tensor = prim::If(%1577) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.78 : Tensor = prim::GetAttr[name="weight"](%norm.26)
      %running_var.51 : Tensor = prim::GetAttr[name="running_var"](%norm.26)
      %eps.51 : float = prim::GetAttr[name="eps"](%norm.26)
      %1582 : Tensor = aten::add(%running_var.51, %eps.51, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1583 : Tensor = aten::rsqrt(%1582) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.55 : Tensor = aten::mul(%weight.78, %1583) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.129 : Tensor = prim::GetAttr[name="bias"](%norm.26)
      %running_mean.51 : Tensor = prim::GetAttr[name="running_mean"](%norm.26)
      %1587 : Tensor = aten::mul(%running_mean.51, %scale.55) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.131 : Tensor = aten::sub(%bias.129, %1587, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1589 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.57 : Tensor = aten::reshape(%scale.55, %1589) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1591 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.133 : Tensor = aten::reshape(%bias.131, %1591) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.27 : int = prim::dtype(%x.67)
      %1594 : Tensor = aten::to(%scale.57, %out_dtype.27, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1595 : Tensor = aten::mul(%x.67, %1594) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1596 : Tensor = aten::to(%bias.133, %out_dtype.27, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1597 : Tensor = aten::add(%1595, %1596, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1597)
    block1():
      %running_mean.53 : Tensor = prim::GetAttr[name="running_mean"](%norm.26)
      %running_var.53 : Tensor = prim::GetAttr[name="running_var"](%norm.26)
      %weight.80 : Tensor = prim::GetAttr[name="weight"](%norm.26)
      %bias.135 : Tensor = prim::GetAttr[name="bias"](%norm.26)
      %eps.53 : float = prim::GetAttr[name="eps"](%norm.26)
      %1603 : Tensor = aten::batch_norm(%x.67, %weight.80, %bias.135, %running_mean.53, %running_var.53, %46, %37, %eps.53, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1603)
  %out.62 : Tensor = aten::relu_(%out.60) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.9 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%_4.1)
  %weight.82 : Tensor = prim::GetAttr[name="weight"](%conv2.9)
  %bias.137 : Tensor? = prim::GetAttr[name="bias"](%conv2.9)
  %1608 : int[] = prim::ListConstruct(%44, %44)
  %1609 : int[] = prim::ListConstruct(%44, %44)
  %1610 : int[] = prim::ListConstruct(%44, %44)
  %x.33 : Tensor = aten::conv2d(%out.62, %weight.82, %bias.137, %1608, %1609, %1610, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.28 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv2.9)
  %1613 : bool = prim::requires_grad(%x.33)
  %out.64 : Tensor = prim::If(%1613) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.84 : Tensor = prim::GetAttr[name="weight"](%norm.28)
      %running_var.55 : Tensor = prim::GetAttr[name="running_var"](%norm.28)
      %eps.55 : float = prim::GetAttr[name="eps"](%norm.28)
      %1618 : Tensor = aten::add(%running_var.55, %eps.55, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1619 : Tensor = aten::rsqrt(%1618) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.59 : Tensor = aten::mul(%weight.84, %1619) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.139 : Tensor = prim::GetAttr[name="bias"](%norm.28)
      %running_mean.55 : Tensor = prim::GetAttr[name="running_mean"](%norm.28)
      %1623 : Tensor = aten::mul(%running_mean.55, %scale.59) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.141 : Tensor = aten::sub(%bias.139, %1623, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1625 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.61 : Tensor = aten::reshape(%scale.59, %1625) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1627 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.143 : Tensor = aten::reshape(%bias.141, %1627) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.29 : int = prim::dtype(%x.33)
      %1630 : Tensor = aten::to(%scale.61, %out_dtype.29, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1631 : Tensor = aten::mul(%x.33, %1630) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1632 : Tensor = aten::to(%bias.143, %out_dtype.29, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1633 : Tensor = aten::add(%1631, %1632, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1633)
    block1():
      %running_mean.57 : Tensor = prim::GetAttr[name="running_mean"](%norm.28)
      %running_var.57 : Tensor = prim::GetAttr[name="running_var"](%norm.28)
      %weight.86 : Tensor = prim::GetAttr[name="weight"](%norm.28)
      %bias.145 : Tensor = prim::GetAttr[name="bias"](%norm.28)
      %eps.57 : float = prim::GetAttr[name="eps"](%norm.28)
      %1639 : Tensor = aten::batch_norm(%x.33, %weight.86, %bias.145, %running_mean.57, %running_var.57, %46, %37, %eps.57, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1639)
  %out.66 : Tensor = aten::relu_(%out.64) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.9 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%_4.1)
  %weight.88 : Tensor = prim::GetAttr[name="weight"](%conv3.9)
  %bias.147 : Tensor? = prim::GetAttr[name="bias"](%conv3.9)
  %1644 : int[] = prim::ListConstruct(%44, %44)
  %1645 : int[] = prim::ListConstruct(%49, %49)
  %1646 : int[] = prim::ListConstruct(%44, %44)
  %x.35 : Tensor = aten::conv2d(%out.66, %weight.88, %bias.147, %1644, %1645, %1646, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.30 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv3.9)
  %1649 : bool = prim::requires_grad(%x.35)
  %out.68 : Tensor = prim::If(%1649) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.90 : Tensor = prim::GetAttr[name="weight"](%norm.30)
      %running_var.59 : Tensor = prim::GetAttr[name="running_var"](%norm.30)
      %eps.59 : float = prim::GetAttr[name="eps"](%norm.30)
      %1654 : Tensor = aten::add(%running_var.59, %eps.59, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1655 : Tensor = aten::rsqrt(%1654) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.63 : Tensor = aten::mul(%weight.90, %1655) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.149 : Tensor = prim::GetAttr[name="bias"](%norm.30)
      %running_mean.59 : Tensor = prim::GetAttr[name="running_mean"](%norm.30)
      %1659 : Tensor = aten::mul(%running_mean.59, %scale.63) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.151 : Tensor = aten::sub(%bias.149, %1659, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1661 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.65 : Tensor = aten::reshape(%scale.63, %1661) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1663 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.153 : Tensor = aten::reshape(%bias.151, %1663) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.31 : int = prim::dtype(%x.35)
      %1666 : Tensor = aten::to(%scale.65, %out_dtype.31, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1667 : Tensor = aten::mul(%x.35, %1666) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1668 : Tensor = aten::to(%bias.153, %out_dtype.31, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1669 : Tensor = aten::add(%1667, %1668, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1669)
    block1():
      %running_mean.61 : Tensor = prim::GetAttr[name="running_mean"](%norm.30)
      %running_var.61 : Tensor = prim::GetAttr[name="running_var"](%norm.30)
      %weight.92 : Tensor = prim::GetAttr[name="weight"](%norm.30)
      %bias.155 : Tensor = prim::GetAttr[name="bias"](%norm.30)
      %eps.61 : float = prim::GetAttr[name="eps"](%norm.30)
      %1675 : Tensor = aten::batch_norm(%x.35, %weight.92, %bias.155, %running_mean.61, %running_var.61, %46, %37, %eps.61, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1675)
  %out.70 : Tensor = aten::add_(%out.68, %input.27, %44) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:208:8
  %input.29 : Tensor = aten::relu_(%out.70) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:209:14
  %conv1.22 : __torch__.detectron2.layers.wrappers.___torch_mangle_18.Conv2d = prim::GetAttr[name="conv1"](%_5)
  %weight.207 : Tensor = prim::GetAttr[name="weight"](%conv1.22)
  %bias.344 : Tensor? = prim::GetAttr[name="bias"](%conv1.22)
  %1681 : int[] = prim::ListConstruct(%44, %44)
  %1682 : int[] = prim::ListConstruct(%49, %49)
  %1683 : int[] = prim::ListConstruct(%44, %44)
  %x.98 : Tensor = aten::conv2d(%input.29, %weight.207, %bias.344, %1681, %1682, %1683, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.69 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv1.22)
  %1686 : bool = prim::requires_grad(%x.98)
  %out.121 : Tensor = prim::If(%1686) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.209 : Tensor = prim::GetAttr[name="weight"](%norm.69)
      %running_var.138 : Tensor = prim::GetAttr[name="running_var"](%norm.69)
      %eps.138 : float = prim::GetAttr[name="eps"](%norm.69)
      %1691 : Tensor = aten::add(%running_var.138, %eps.138, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1692 : Tensor = aten::rsqrt(%1691) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.140 : Tensor = aten::mul(%weight.209, %1692) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.346 : Tensor = prim::GetAttr[name="bias"](%norm.69)
      %running_mean.138 : Tensor = prim::GetAttr[name="running_mean"](%norm.69)
      %1696 : Tensor = aten::mul(%running_mean.138, %scale.140) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.348 : Tensor = aten::sub(%bias.346, %1696, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1698 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.142 : Tensor = aten::reshape(%scale.140, %1698) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1700 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.350 : Tensor = aten::reshape(%bias.348, %1700) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.70 : int = prim::dtype(%x.98)
      %1703 : Tensor = aten::to(%scale.142, %out_dtype.70, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1704 : Tensor = aten::mul(%x.98, %1703) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1705 : Tensor = aten::to(%bias.350, %out_dtype.70, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1706 : Tensor = aten::add(%1704, %1705, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1706)
    block1():
      %running_mean.140 : Tensor = prim::GetAttr[name="running_mean"](%norm.69)
      %running_var.140 : Tensor = prim::GetAttr[name="running_var"](%norm.69)
      %weight.211 : Tensor = prim::GetAttr[name="weight"](%norm.69)
      %bias.352 : Tensor = prim::GetAttr[name="bias"](%norm.69)
      %eps.140 : float = prim::GetAttr[name="eps"](%norm.69)
      %1712 : Tensor = aten::batch_norm(%x.98, %weight.211, %bias.352, %running_mean.140, %running_var.140, %46, %37, %eps.140, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1712)
  %out.123 : Tensor = aten::relu_(%out.121) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.20 : __torch__.detectron2.layers.wrappers.___torch_mangle_15.Conv2d = prim::GetAttr[name="conv2"](%_5)
  %weight.213 : Tensor = prim::GetAttr[name="weight"](%conv2.20)
  %bias.354 : Tensor? = prim::GetAttr[name="bias"](%conv2.20)
  %1717 : int[] = prim::ListConstruct(%44, %44)
  %1718 : int[] = prim::ListConstruct(%44, %44)
  %1719 : int[] = prim::ListConstruct(%44, %44)
  %x.100 : Tensor = aten::conv2d(%out.123, %weight.213, %bias.354, %1717, %1718, %1719, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.71 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv2.20)
  %1722 : bool = prim::requires_grad(%x.100)
  %out.125 : Tensor = prim::If(%1722) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.215 : Tensor = prim::GetAttr[name="weight"](%norm.71)
      %running_var.142 : Tensor = prim::GetAttr[name="running_var"](%norm.71)
      %eps.142 : float = prim::GetAttr[name="eps"](%norm.71)
      %1727 : Tensor = aten::add(%running_var.142, %eps.142, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1728 : Tensor = aten::rsqrt(%1727) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.144 : Tensor = aten::mul(%weight.215, %1728) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.356 : Tensor = prim::GetAttr[name="bias"](%norm.71)
      %running_mean.142 : Tensor = prim::GetAttr[name="running_mean"](%norm.71)
      %1732 : Tensor = aten::mul(%running_mean.142, %scale.144) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.358 : Tensor = aten::sub(%bias.356, %1732, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1734 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.146 : Tensor = aten::reshape(%scale.144, %1734) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1736 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.360 : Tensor = aten::reshape(%bias.358, %1736) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.72 : int = prim::dtype(%x.100)
      %1739 : Tensor = aten::to(%scale.146, %out_dtype.72, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1740 : Tensor = aten::mul(%x.100, %1739) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1741 : Tensor = aten::to(%bias.360, %out_dtype.72, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1742 : Tensor = aten::add(%1740, %1741, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1742)
    block1():
      %running_mean.144 : Tensor = prim::GetAttr[name="running_mean"](%norm.71)
      %running_var.144 : Tensor = prim::GetAttr[name="running_var"](%norm.71)
      %weight.217 : Tensor = prim::GetAttr[name="weight"](%norm.71)
      %bias.362 : Tensor = prim::GetAttr[name="bias"](%norm.71)
      %eps.144 : float = prim::GetAttr[name="eps"](%norm.71)
      %1748 : Tensor = aten::batch_norm(%x.100, %weight.217, %bias.362, %running_mean.144, %running_var.144, %46, %37, %eps.144, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1748)
  %out.127 : Tensor = aten::relu_(%out.125) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.20 : __torch__.detectron2.layers.wrappers.___torch_mangle_16.Conv2d = prim::GetAttr[name="conv3"](%_5)
  %weight.219 : Tensor = prim::GetAttr[name="weight"](%conv3.20)
  %bias.364 : Tensor? = prim::GetAttr[name="bias"](%conv3.20)
  %1753 : int[] = prim::ListConstruct(%44, %44)
  %1754 : int[] = prim::ListConstruct(%49, %49)
  %1755 : int[] = prim::ListConstruct(%44, %44)
  %x.102 : Tensor = aten::conv2d(%out.127, %weight.219, %bias.364, %1753, %1754, %1755, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.73 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv3.20)
  %1758 : bool = prim::requires_grad(%x.102)
  %out.129 : Tensor = prim::If(%1758) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.221 : Tensor = prim::GetAttr[name="weight"](%norm.73)
      %running_var.146 : Tensor = prim::GetAttr[name="running_var"](%norm.73)
      %eps.146 : float = prim::GetAttr[name="eps"](%norm.73)
      %1763 : Tensor = aten::add(%running_var.146, %eps.146, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1764 : Tensor = aten::rsqrt(%1763) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.148 : Tensor = aten::mul(%weight.221, %1764) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.366 : Tensor = prim::GetAttr[name="bias"](%norm.73)
      %running_mean.146 : Tensor = prim::GetAttr[name="running_mean"](%norm.73)
      %1768 : Tensor = aten::mul(%running_mean.146, %scale.148) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.368 : Tensor = aten::sub(%bias.366, %1768, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1770 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.150 : Tensor = aten::reshape(%scale.148, %1770) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1772 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.370 : Tensor = aten::reshape(%bias.368, %1772) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.74 : int = prim::dtype(%x.102)
      %1775 : Tensor = aten::to(%scale.150, %out_dtype.74, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1776 : Tensor = aten::mul(%x.102, %1775) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1777 : Tensor = aten::to(%bias.370, %out_dtype.74, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1778 : Tensor = aten::add(%1776, %1777, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1778)
    block1():
      %running_mean.148 : Tensor = prim::GetAttr[name="running_mean"](%norm.73)
      %running_var.148 : Tensor = prim::GetAttr[name="running_var"](%norm.73)
      %weight.223 : Tensor = prim::GetAttr[name="weight"](%norm.73)
      %bias.372 : Tensor = prim::GetAttr[name="bias"](%norm.73)
      %eps.148 : float = prim::GetAttr[name="eps"](%norm.73)
      %1784 : Tensor = aten::batch_norm(%x.102, %weight.223, %bias.372, %running_mean.148, %running_var.148, %46, %37, %eps.148, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1784)
  %out.131 : Tensor = aten::add_(%out.129, %input.29, %44) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:208:8
  %x.72 : Tensor = aten::relu_(%out.131) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:209:14
  %_out_features.7 : str[] = prim::GetAttr[name="_out_features"](%bottom_up)
  %1788 : bool = aten::__contains__(%_out_features.7, %name.13) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:450:15
   = prim::If(%1788) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:450:12
    block0():
       = aten::_set_item(%bottom_up_features.1, %name.13, %x.72) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:451:16
      -> ()
    block1():
      -> ()
  %_0.6 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_25.BottleneckBlock = prim::GetAttr[name="0"](%_3.1)
  %_1.2 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_27.BottleneckBlock = prim::GetAttr[name="1"](%_3.1)
  %_2.2 : __torch__.detectron2.modeling.backbone.resnet.___torch_mangle_27.BottleneckBlock = prim::GetAttr[name="2"](%_3.1)
  %conv1.1 : __torch__.detectron2.layers.wrappers.___torch_mangle_22.Conv2d = prim::GetAttr[name="conv1"](%_0.6)
  %weight.118 : Tensor = prim::GetAttr[name="weight"](%conv1.1)
  %bias.191 : Tensor? = prim::GetAttr[name="bias"](%conv1.1)
  %1795 : int[] = prim::ListConstruct(%36, %36)
  %1796 : int[] = prim::ListConstruct(%49, %49)
  %1797 : int[] = prim::ListConstruct(%44, %44)
  %x.73 : Tensor = aten::conv2d(%x.72, %weight.118, %bias.191, %1795, %1796, %1797, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.2 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv1.1)
  %1800 : bool = prim::requires_grad(%x.73)
  %out.2 : Tensor = prim::If(%1800) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.6 : Tensor = prim::GetAttr[name="weight"](%norm.2)
      %running_var.3 : Tensor = prim::GetAttr[name="running_var"](%norm.2)
      %eps.3 : float = prim::GetAttr[name="eps"](%norm.2)
      %1805 : Tensor = aten::add(%running_var.3, %eps.3, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1806 : Tensor = aten::rsqrt(%1805) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.3 : Tensor = aten::mul(%weight.6, %1806) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.195 : Tensor = prim::GetAttr[name="bias"](%norm.2)
      %running_mean.3 : Tensor = prim::GetAttr[name="running_mean"](%norm.2)
      %1810 : Tensor = aten::mul(%running_mean.3, %scale.3) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.183 : Tensor = aten::sub(%bias.195, %1810, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1812 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.9 : Tensor = aten::reshape(%scale.3, %1812) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1814 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.185 : Tensor = aten::reshape(%bias.183, %1814) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.3 : int = prim::dtype(%x.73)
      %1817 : Tensor = aten::to(%scale.9, %out_dtype.3, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1818 : Tensor = aten::mul(%x.73, %1817) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1819 : Tensor = aten::to(%bias.185, %out_dtype.3, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1820 : Tensor = aten::add(%1818, %1819, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1820)
    block1():
      %running_mean.5 : Tensor = prim::GetAttr[name="running_mean"](%norm.2)
      %running_var.5 : Tensor = prim::GetAttr[name="running_var"](%norm.2)
      %weight.8 : Tensor = prim::GetAttr[name="weight"](%norm.2)
      %bias.15 : Tensor = prim::GetAttr[name="bias"](%norm.2)
      %eps.5 : float = prim::GetAttr[name="eps"](%norm.2)
      %1826 : Tensor = aten::batch_norm(%x.73, %weight.8, %bias.15, %running_mean.5, %running_var.5, %46, %37, %eps.5, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1826)
  %out.6 : Tensor = aten::relu_(%out.2) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.1 : __torch__.detectron2.layers.wrappers.___torch_mangle_23.Conv2d = prim::GetAttr[name="conv2"](%_0.6)
  %weight.10 : Tensor = prim::GetAttr[name="weight"](%conv2.1)
  %bias.17 : Tensor? = prim::GetAttr[name="bias"](%conv2.1)
  %1831 : int[] = prim::ListConstruct(%44, %44)
  %1832 : int[] = prim::ListConstruct(%44, %44)
  %1833 : int[] = prim::ListConstruct(%44, %44)
  %x.55 : Tensor = aten::conv2d(%out.6, %weight.10, %bias.17, %1831, %1832, %1833, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.4 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv2.1)
  %1836 : bool = prim::requires_grad(%x.55)
  %out.10 : Tensor = prim::If(%1836) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.12 : Tensor = prim::GetAttr[name="weight"](%norm.4)
      %running_var.7 : Tensor = prim::GetAttr[name="running_var"](%norm.4)
      %eps.7 : float = prim::GetAttr[name="eps"](%norm.4)
      %1841 : Tensor = aten::add(%running_var.7, %eps.7, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1842 : Tensor = aten::rsqrt(%1841) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.11 : Tensor = aten::mul(%weight.12, %1842) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.19 : Tensor = prim::GetAttr[name="bias"](%norm.4)
      %running_mean.7 : Tensor = prim::GetAttr[name="running_mean"](%norm.4)
      %1846 : Tensor = aten::mul(%running_mean.7, %scale.11) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.21 : Tensor = aten::sub(%bias.19, %1846, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1848 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.13 : Tensor = aten::reshape(%scale.11, %1848) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1850 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.23 : Tensor = aten::reshape(%bias.21, %1850) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.5 : int = prim::dtype(%x.55)
      %1853 : Tensor = aten::to(%scale.13, %out_dtype.5, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1854 : Tensor = aten::mul(%x.55, %1853) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1855 : Tensor = aten::to(%bias.23, %out_dtype.5, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1856 : Tensor = aten::add(%1854, %1855, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1856)
    block1():
      %running_mean.9 : Tensor = prim::GetAttr[name="running_mean"](%norm.4)
      %running_var.9 : Tensor = prim::GetAttr[name="running_var"](%norm.4)
      %weight.14 : Tensor = prim::GetAttr[name="weight"](%norm.4)
      %bias.25 : Tensor = prim::GetAttr[name="bias"](%norm.4)
      %eps.9 : float = prim::GetAttr[name="eps"](%norm.4)
      %1862 : Tensor = aten::batch_norm(%x.55, %weight.14, %bias.25, %running_mean.9, %running_var.9, %46, %37, %eps.9, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1862)
  %out.14 : Tensor = aten::relu_(%out.10) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.1 : __torch__.detectron2.layers.wrappers.___torch_mangle_24.Conv2d = prim::GetAttr[name="conv3"](%_0.6)
  %weight.15 : Tensor = prim::GetAttr[name="weight"](%conv3.1)
  %bias.24 : Tensor? = prim::GetAttr[name="bias"](%conv3.1)
  %1867 : int[] = prim::ListConstruct(%44, %44)
  %1868 : int[] = prim::ListConstruct(%49, %49)
  %1869 : int[] = prim::ListConstruct(%44, %44)
  %x.81 : Tensor = aten::conv2d(%out.14, %weight.15, %bias.24, %1867, %1868, %1869, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.5 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv3.1)
  %1872 : bool = prim::requires_grad(%x.81)
  %out.18 : Tensor = prim::If(%1872) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.17 : Tensor = prim::GetAttr[name="weight"](%norm.5)
      %running_var.10 : Tensor = prim::GetAttr[name="running_var"](%norm.5)
      %eps.10 : float = prim::GetAttr[name="eps"](%norm.5)
      %1877 : Tensor = aten::add(%running_var.10, %eps.10, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1878 : Tensor = aten::rsqrt(%1877) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.14 : Tensor = aten::mul(%weight.17, %1878) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.26 : Tensor = prim::GetAttr[name="bias"](%norm.5)
      %running_mean.10 : Tensor = prim::GetAttr[name="running_mean"](%norm.5)
      %1882 : Tensor = aten::mul(%running_mean.10, %scale.14) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.28 : Tensor = aten::sub(%bias.26, %1882, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1884 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.16 : Tensor = aten::reshape(%scale.14, %1884) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1886 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.30 : Tensor = aten::reshape(%bias.28, %1886) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.6 : int = prim::dtype(%x.81)
      %1889 : Tensor = aten::to(%scale.16, %out_dtype.6, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1890 : Tensor = aten::mul(%x.81, %1889) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1891 : Tensor = aten::to(%bias.30, %out_dtype.6, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1892 : Tensor = aten::add(%1890, %1891, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1892)
    block1():
      %running_mean.12 : Tensor = prim::GetAttr[name="running_mean"](%norm.5)
      %running_var.12 : Tensor = prim::GetAttr[name="running_var"](%norm.5)
      %weight.19 : Tensor = prim::GetAttr[name="weight"](%norm.5)
      %bias.32 : Tensor = prim::GetAttr[name="bias"](%norm.5)
      %eps.12 : float = prim::GetAttr[name="eps"](%norm.5)
      %1898 : Tensor = aten::batch_norm(%x.81, %weight.19, %bias.32, %running_mean.12, %running_var.12, %46, %37, %eps.12, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1898)
  %shortcut.3 : __torch__.detectron2.layers.wrappers.___torch_mangle_21.Conv2d = prim::GetAttr[name="shortcut"](%_0.6)
  %weight.16 : Tensor = prim::GetAttr[name="weight"](%shortcut.3)
  %bias.27 : Tensor? = prim::GetAttr[name="bias"](%shortcut.3)
  %1902 : int[] = prim::ListConstruct(%36, %36)
  %1903 : int[] = prim::ListConstruct(%49, %49)
  %1904 : int[] = prim::ListConstruct(%44, %44)
  %x.65 : Tensor = aten::conv2d(%x.72, %weight.16, %bias.27, %1902, %1903, %1904, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.6 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%shortcut.3)
  %1907 : bool = prim::requires_grad(%x.65)
  %shortcut.5 : Tensor = prim::If(%1907) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.18 : Tensor = prim::GetAttr[name="weight"](%norm.6)
      %running_var.11 : Tensor = prim::GetAttr[name="running_var"](%norm.6)
      %eps.11 : float = prim::GetAttr[name="eps"](%norm.6)
      %1912 : Tensor = aten::add(%running_var.11, %eps.11, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1913 : Tensor = aten::rsqrt(%1912) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.15 : Tensor = aten::mul(%weight.18, %1913) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.29 : Tensor = prim::GetAttr[name="bias"](%norm.6)
      %running_mean.11 : Tensor = prim::GetAttr[name="running_mean"](%norm.6)
      %1917 : Tensor = aten::mul(%running_mean.11, %scale.15) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.31 : Tensor = aten::sub(%bias.29, %1917, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1919 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.17 : Tensor = aten::reshape(%scale.15, %1919) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1921 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.33 : Tensor = aten::reshape(%bias.31, %1921) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.7 : int = prim::dtype(%x.65)
      %1924 : Tensor = aten::to(%scale.17, %out_dtype.7, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1925 : Tensor = aten::mul(%x.65, %1924) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1926 : Tensor = aten::to(%bias.33, %out_dtype.7, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1927 : Tensor = aten::add(%1925, %1926, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1927)
    block1():
      %running_mean.13 : Tensor = prim::GetAttr[name="running_mean"](%norm.6)
      %running_var.13 : Tensor = prim::GetAttr[name="running_var"](%norm.6)
      %weight.20 : Tensor = prim::GetAttr[name="weight"](%norm.6)
      %bias.35 : Tensor = prim::GetAttr[name="bias"](%norm.6)
      %eps.13 : float = prim::GetAttr[name="eps"](%norm.6)
      %1933 : Tensor = aten::batch_norm(%x.65, %weight.20, %bias.35, %running_mean.13, %running_var.13, %46, %37, %eps.13, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1933)
  %out.22 : Tensor = aten::add_(%out.18, %shortcut.5, %44) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:208:8
  %input.5 : Tensor = aten::relu_(%out.22) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:209:14
  %conv1.3 : __torch__.detectron2.layers.wrappers.___torch_mangle_26.Conv2d = prim::GetAttr[name="conv1"](%_1.2)
  %weight.22 : Tensor = prim::GetAttr[name="weight"](%conv1.3)
  %bias.37 : Tensor? = prim::GetAttr[name="bias"](%conv1.3)
  %1939 : int[] = prim::ListConstruct(%44, %44)
  %1940 : int[] = prim::ListConstruct(%49, %49)
  %1941 : int[] = prim::ListConstruct(%44, %44)
  %x.85 : Tensor = aten::conv2d(%input.5, %weight.22, %bias.37, %1939, %1940, %1941, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.8 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv1.3)
  %1944 : bool = prim::requires_grad(%x.85)
  %out.24 : Tensor = prim::If(%1944) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.24 : Tensor = prim::GetAttr[name="weight"](%norm.8)
      %running_var.15 : Tensor = prim::GetAttr[name="running_var"](%norm.8)
      %eps.15 : float = prim::GetAttr[name="eps"](%norm.8)
      %1949 : Tensor = aten::add(%running_var.15, %eps.15, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1950 : Tensor = aten::rsqrt(%1949) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.19 : Tensor = aten::mul(%weight.24, %1950) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.39 : Tensor = prim::GetAttr[name="bias"](%norm.8)
      %running_mean.15 : Tensor = prim::GetAttr[name="running_mean"](%norm.8)
      %1954 : Tensor = aten::mul(%running_mean.15, %scale.19) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.41 : Tensor = aten::sub(%bias.39, %1954, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1956 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.21 : Tensor = aten::reshape(%scale.19, %1956) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1958 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.43 : Tensor = aten::reshape(%bias.41, %1958) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.9 : int = prim::dtype(%x.85)
      %1961 : Tensor = aten::to(%scale.21, %out_dtype.9, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1962 : Tensor = aten::mul(%x.85, %1961) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1963 : Tensor = aten::to(%bias.43, %out_dtype.9, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %1964 : Tensor = aten::add(%1962, %1963, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%1964)
    block1():
      %running_mean.17 : Tensor = prim::GetAttr[name="running_mean"](%norm.8)
      %running_var.17 : Tensor = prim::GetAttr[name="running_var"](%norm.8)
      %weight.26 : Tensor = prim::GetAttr[name="weight"](%norm.8)
      %bias.45 : Tensor = prim::GetAttr[name="bias"](%norm.8)
      %eps.17 : float = prim::GetAttr[name="eps"](%norm.8)
      %1970 : Tensor = aten::batch_norm(%x.85, %weight.26, %bias.45, %running_mean.17, %running_var.17, %46, %37, %eps.17, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%1970)
  %out.26 : Tensor = aten::relu_(%out.24) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:196:14
  %conv2.3 : __torch__.detectron2.layers.wrappers.___torch_mangle_23.Conv2d = prim::GetAttr[name="conv2"](%_1.2)
  %weight.28 : Tensor = prim::GetAttr[name="weight"](%conv2.3)
  %bias.47 : Tensor? = prim::GetAttr[name="bias"](%conv2.3)
  %1975 : int[] = prim::ListConstruct(%44, %44)
  %1976 : int[] = prim::ListConstruct(%44, %44)
  %1977 : int[] = prim::ListConstruct(%44, %44)
  %x.15 : Tensor = aten::conv2d(%out.26, %weight.28, %bias.47, %1975, %1976, %1977, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.10 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv2.3)
  %1980 : bool = prim::requires_grad(%x.15)
  %out.28 : Tensor = prim::If(%1980) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.30 : Tensor = prim::GetAttr[name="weight"](%norm.10)
      %running_var.19 : Tensor = prim::GetAttr[name="running_var"](%norm.10)
      %eps.19 : float = prim::GetAttr[name="eps"](%norm.10)
      %1985 : Tensor = aten::add(%running_var.19, %eps.19, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %1986 : Tensor = aten::rsqrt(%1985) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.23 : Tensor = aten::mul(%weight.30, %1986) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.49 : Tensor = prim::GetAttr[name="bias"](%norm.10)
      %running_mean.19 : Tensor = prim::GetAttr[name="running_mean"](%norm.10)
      %1990 : Tensor = aten::mul(%running_mean.19, %scale.23) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.51 : Tensor = aten::sub(%bias.49, %1990, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %1992 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.25 : Tensor = aten::reshape(%scale.23, %1992) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %1994 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.53 : Tensor = aten::reshape(%bias.51, %1994) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.11 : int = prim::dtype(%x.15)
      %1997 : Tensor = aten::to(%scale.25, %out_dtype.11, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %1998 : Tensor = aten::mul(%x.15, %1997) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %1999 : Tensor = aten::to(%bias.53, %out_dtype.11, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %2000 : Tensor = aten::add(%1998, %1999, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%2000)
    block1():
      %running_mean.21 : Tensor = prim::GetAttr[name="running_mean"](%norm.10)
      %running_var.21 : Tensor = prim::GetAttr[name="running_var"](%norm.10)
      %weight.32 : Tensor = prim::GetAttr[name="weight"](%norm.10)
      %bias.55 : Tensor = prim::GetAttr[name="bias"](%norm.10)
      %eps.21 : float = prim::GetAttr[name="eps"](%norm.10)
      %2006 : Tensor = aten::batch_norm(%x.15, %weight.32, %bias.55, %running_mean.21, %running_var.21, %46, %37, %eps.21, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%2006)
  %out.30 : Tensor = aten::relu_(%out.28) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:199:14
  %conv3.3 : __torch__.detectron2.layers.wrappers.___torch_mangle_24.Conv2d = prim::GetAttr[name="conv3"](%_1.2)
  %weight.34 : Tensor = prim::GetAttr[name="weight"](%conv3.3)
  %bias.57 : Tensor? = prim::GetAttr[name="bias"](%conv3.3)
  %2011 : int[] = prim::ListConstruct(%44, %44)
  %2012 : int[] = prim::ListConstruct(%49, %49)
  %2013 : int[] = prim::ListConstruct(%44, %44)
  %x.89 : Tensor = aten::conv2d(%out.30, %weight.34, %bias.57, %2011, %2012, %2013, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.12 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv3.3)
  %2016 : bool = prim::requires_grad(%x.89)
  %out.32 : Tensor = prim::If(%2016) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.36 : Tensor = prim::GetAttr[name="weight"](%norm.12)
      %running_var.23 : Tensor = prim::GetAttr[name="running_var"](%norm.12)
      %eps.23 : float = prim::GetAttr[name="eps"](%norm.12)
      %2021 : Tensor = aten::add(%running_var.23, %eps.23, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %2022 : Tensor = aten::rsqrt(%2021) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.27 : Tensor = aten::mul(%weight.36, %2022) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.59 : Tensor = prim::GetAttr[name="bias"](%norm.12)
      %running_mean.23 : Tensor = prim::GetAttr[name="running_mean"](%norm.12)
      %2026 : Tensor = aten::mul(%running_mean.23, %scale.27) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.61 : Tensor = aten::sub(%bias.59, %2026, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %2028 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.29 : Tensor = aten::reshape(%scale.27, %2028) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %2030 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.63 : Tensor = aten::reshape(%bias.61, %2030) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.13 : int = prim::dtype(%x.89)
      %2033 : Tensor = aten::to(%scale.29, %out_dtype.13, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %2034 : Tensor = aten::mul(%x.89, %2033) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %2035 : Tensor = aten::to(%bias.63, %out_dtype.13, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %2036 : Tensor = aten::add(%2034, %2035, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%2036)
    block1():
      %running_mean.25 : Tensor = prim::GetAttr[name="running_mean"](%norm.12)
      %running_var.25 : Tensor = prim::GetAttr[name="running_var"](%norm.12)
      %weight.38 : Tensor = prim::GetAttr[name="weight"](%norm.12)
      %bias.65 : Tensor = prim::GetAttr[name="bias"](%norm.12)
      %eps.25 : float = prim::GetAttr[name="eps"](%norm.12)
      %2042 : Tensor = aten::batch_norm(%x.89, %weight.38, %bias.65, %running_mean.25, %running_var.25, %46, %37, %eps.25, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%2042)
  %out.34 : Tensor = aten::add_(%out.32, %input.5, %44) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:208:8
  %input.9 : Tensor = aten::relu_(%out.34) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:209:14
  %conv1 : __torch__.detectron2.layers.wrappers.___torch_mangle_26.Conv2d = prim::GetAttr[name="conv1"](%_2.2)
  %weight.112 : Tensor = prim::GetAttr[name="weight"](%conv1)
  %bias.181 : Tensor? = prim::GetAttr[name="bias"](%conv1)
  %2048 : int[] = prim::ListConstruct(%44, %44)
  %2049 : int[] = prim::ListConstruct(%49, %49)
  %2050 : int[] = prim::ListConstruct(%44, %44)
  %x.77 : Tensor = aten::conv2d(%input.9, %weight.112, %bias.181, %2048, %2049, %2050, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.1 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv1)
  %2053 : bool = prim::requires_grad(%x.77)
  %out.1 : Tensor = prim::If(%2053) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.128 : Tensor = prim::GetAttr[name="weight"](%norm.1)
      %running_var.2 : Tensor = prim::GetAttr[name="running_var"](%norm.1)
      %eps.2 : float = prim::GetAttr[name="eps"](%norm.1)
      %2058 : Tensor = aten::add(%running_var.2, %eps.2, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %2059 : Tensor = aten::rsqrt(%2058) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.2 : Tensor = aten::mul(%weight.128, %2059) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.6 : Tensor = prim::GetAttr[name="bias"](%norm.1)
      %running_mean.2 : Tensor = prim::GetAttr[name="running_mean"](%norm.1)
      %2063 : Tensor = aten::mul(%running_mean.2, %scale.2) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.8 : Tensor = aten::sub(%bias.6, %2063, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %2065 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.8 : Tensor = aten::reshape(%scale.2, %2065) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %2067 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.10 : Tensor = aten::reshape(%bias.8, %2067) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.2 : int = prim::dtype(%x.77)
      %2070 : Tensor = aten::to(%scale.8, %out_dtype.2, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %2071 : Tensor = aten::mul(%x.77, %2070) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %2072 : Tensor = aten::to(%bias.10, %out_dtype.2, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %2073 : Tensor = aten::add(%2071, %2072, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%2073)
    block1():
      %running_mean.4 : Tensor = prim::GetAttr[name="running_mean"](%norm.1)
      %running_var.4 : Tensor = prim::GetAttr[name="running_var"](%norm.1)
      %weight.130 : Tensor = prim::GetAttr[name="weight"](%norm.1)
      %bias.12 : Tensor = prim::GetAttr[name="bias"](%norm.1)
      %eps.4 : float = prim::GetAttr[name="eps"](%norm.1)
      %2079 : Tensor = aten::batch_norm(%x.77, %weight.130, %bias.12, %running_mean.4, %running_var.4, %46, %37, %eps.4, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%2079)
  %out.5 : Tensor = aten::relu_(%out.1) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:196:14
  %conv2 : __torch__.detectron2.layers.wrappers.___torch_mangle_23.Conv2d = prim::GetAttr[name="conv2"](%_2.2)
  %weight.132 : Tensor = prim::GetAttr[name="weight"](%conv2)
  %bias.14 : Tensor? = prim::GetAttr[name="bias"](%conv2)
  %2084 : int[] = prim::ListConstruct(%44, %44)
  %2085 : int[] = prim::ListConstruct(%44, %44)
  %2086 : int[] = prim::ListConstruct(%44, %44)
  %x.47 : Tensor = aten::conv2d(%out.5, %weight.132, %bias.14, %2084, %2085, %2086, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm.3 : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv2)
  %2089 : bool = prim::requires_grad(%x.47)
  %out.9 : Tensor = prim::If(%2089) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.120 : Tensor = prim::GetAttr[name="weight"](%norm.3)
      %running_var.6 : Tensor = prim::GetAttr[name="running_var"](%norm.3)
      %eps.6 : float = prim::GetAttr[name="eps"](%norm.3)
      %2094 : Tensor = aten::add(%running_var.6, %eps.6, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %2095 : Tensor = aten::rsqrt(%2094) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.10 : Tensor = aten::mul(%weight.120, %2095) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.16 : Tensor = prim::GetAttr[name="bias"](%norm.3)
      %running_mean.6 : Tensor = prim::GetAttr[name="running_mean"](%norm.3)
      %2099 : Tensor = aten::mul(%running_mean.6, %scale.10) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.18 : Tensor = aten::sub(%bias.16, %2099, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %2101 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.12 : Tensor = aten::reshape(%scale.10, %2101) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %2103 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.20 : Tensor = aten::reshape(%bias.18, %2103) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.4 : int = prim::dtype(%x.47)
      %2106 : Tensor = aten::to(%scale.12, %out_dtype.4, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %2107 : Tensor = aten::mul(%x.47, %2106) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %2108 : Tensor = aten::to(%bias.20, %out_dtype.4, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %2109 : Tensor = aten::add(%2107, %2108, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%2109)
    block1():
      %running_mean.8 : Tensor = prim::GetAttr[name="running_mean"](%norm.3)
      %running_var.8 : Tensor = prim::GetAttr[name="running_var"](%norm.3)
      %weight.122 : Tensor = prim::GetAttr[name="weight"](%norm.3)
      %bias.22 : Tensor = prim::GetAttr[name="bias"](%norm.3)
      %eps.8 : float = prim::GetAttr[name="eps"](%norm.3)
      %2115 : Tensor = aten::batch_norm(%x.47, %weight.122, %bias.22, %running_mean.8, %running_var.8, %46, %37, %eps.8, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%2115)
  %out.13 : Tensor = aten::relu_(%out.9) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:199:14
  %conv3 : __torch__.detectron2.layers.wrappers.___torch_mangle_24.Conv2d = prim::GetAttr[name="conv3"](%_2.2)
  %weight.116 : Tensor = prim::GetAttr[name="weight"](%conv3)
  %bias.179 : Tensor? = prim::GetAttr[name="bias"](%conv3)
  %2120 : int[] = prim::ListConstruct(%44, %44)
  %2121 : int[] = prim::ListConstruct(%49, %49)
  %2122 : int[] = prim::ListConstruct(%44, %44)
  %x.53 : Tensor = aten::conv2d(%out.13, %weight.116, %bias.179, %2120, %2121, %2122, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %norm : __torch__.detectron2.layers.batch_norm.FrozenBatchNorm2d = prim::GetAttr[name="norm"](%conv3)
  %2125 : bool = prim::requires_grad(%x.53)
  %out.17 : Tensor = prim::If(%2125) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:46:8
    block0():
      %weight.110 : Tensor = prim::GetAttr[name="weight"](%norm)
      %running_var.1 : Tensor = prim::GetAttr[name="running_var"](%norm)
      %eps.1 : float = prim::GetAttr[name="eps"](%norm)
      %2130 : Tensor = aten::add(%running_var.1, %eps.1, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %2131 : Tensor = aten::rsqrt(%2130) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:35
      %scale.1 : Tensor = aten::mul(%weight.110, %2131) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:49:20
      %bias.173 : Tensor = prim::GetAttr[name="bias"](%norm)
      %running_mean.1 : Tensor = prim::GetAttr[name="running_mean"](%norm)
      %2135 : Tensor = aten::mul(%running_mean.1, %scale.1) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:31
      %bias.175 : Tensor = aten::sub(%bias.173, %2135, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:50:19
      %2137 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %scale.7 : Tensor = aten::reshape(%scale.1, %2137) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:51:20
      %2139 : int[] = prim::ListConstruct(%44, %52, %44, %44)
      %bias.193 : Tensor = aten::reshape(%bias.175, %2139) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:52:19
      %out_dtype.1 : int = prim::dtype(%x.53)
      %2142 : Tensor = aten::to(%scale.7, %out_dtype.1, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:23
      %2143 : Tensor = aten::mul(%x.53, %2142) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      %2144 : Tensor = aten::to(%bias.193, %out_dtype.1, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:45
      %2145 : Tensor = aten::add(%2143, %2144, %44) # /home/kelechi/detectron2/detectron2/layers/batch_norm.py:54:19
      -> (%2145)
    block1():
      %running_mean : Tensor = prim::GetAttr[name="running_mean"](%norm)
      %running_var : Tensor = prim::GetAttr[name="running_var"](%norm)
      %weight.94 : Tensor = prim::GetAttr[name="weight"](%norm)
      %bias.157 : Tensor = prim::GetAttr[name="bias"](%norm)
      %eps : float = prim::GetAttr[name="eps"](%norm)
      %2151 : Tensor = aten::batch_norm(%x.53, %weight.94, %bias.157, %running_mean, %running_var, %46, %37, %eps, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:2512:11
      -> (%2151)
  %out.21 : Tensor = aten::add_(%out.17, %input.9, %44) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:208:8
  %x.74 : Tensor = aten::relu_(%out.21) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:209:14
  %_out_features : str[] = prim::GetAttr[name="_out_features"](%bottom_up)
  %2155 : bool = aten::__contains__(%_out_features, %name.19) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:450:15
   = prim::If(%2155) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:450:12
    block0():
       = aten::_set_item(%bottom_up_features.1, %name.19, %x.74) # /home/kelechi/detectron2/detectron2/modeling/backbone/resnet.py:451:16
      -> ()
    block1():
      -> ()
  %2156 : Tensor[] = prim::ListConstruct()
  %lateral_convs.1 : __torch__.torch.nn.modules.container.___torch_mangle_33.ModuleList = prim::GetAttr[name="lateral_convs"](%backbone.2)
  %_0.2 : __torch__.detectron2.layers.wrappers.___torch_mangle_29.Conv2d = prim::GetAttr[name="0"](%lateral_convs.1)
  %in_features.1 : (str, str, str, str) = prim::GetAttr[name="in_features"](%backbone.2)
  %2160 : str = prim::TupleIndex(%in_features.1, %52)
  %2161 : Tensor = aten::__getitem__(%bottom_up_features.1, %2160) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:141:46
  %weight.96 : Tensor = prim::GetAttr[name="weight"](%_0.2)
  %bias.159 : Tensor? = prim::GetAttr[name="bias"](%_0.2)
  %2164 : int[] = prim::ListConstruct(%44, %44)
  %2165 : int[] = prim::ListConstruct(%49, %49)
  %2166 : int[] = prim::ListConstruct(%44, %44)
  %prev_features.1 : Tensor = aten::conv2d(%2161, %weight.96, %bias.159, %2164, %2165, %2166, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %output_convs.1 : __torch__.torch.nn.modules.container.___torch_mangle_35.ModuleList = prim::GetAttr[name="output_convs"](%backbone.2)
  %_0.4 : __torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d = prim::GetAttr[name="0"](%output_convs.1)
  %weight.98 : Tensor = prim::GetAttr[name="weight"](%_0.4)
  %bias.161 : Tensor? = prim::GetAttr[name="bias"](%_0.4)
  %2172 : int[] = prim::ListConstruct(%44, %44)
  %2173 : int[] = prim::ListConstruct(%44, %44)
  %2174 : int[] = prim::ListConstruct(%44, %44)
  %x.75 : Tensor = aten::conv2d(%prev_features.1, %weight.98, %bias.161, %2172, %2173, %2174, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %2176 : Tensor[] = aten::append(%2156, %x.75) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:142:8
  %lateral_convs : __torch__.torch.nn.modules.container.___torch_mangle_33.ModuleList = prim::GetAttr[name="lateral_convs"](%backbone.2)
  %_1.6 : __torch__.detectron2.layers.wrappers.___torch_mangle_30.Conv2d = prim::GetAttr[name="1"](%lateral_convs)
  %_2.6 : __torch__.detectron2.layers.wrappers.___torch_mangle_31.Conv2d = prim::GetAttr[name="2"](%lateral_convs)
  %_3.5 : __torch__.detectron2.layers.wrappers.___torch_mangle_32.Conv2d = prim::GetAttr[name="3"](%lateral_convs)
  %output_convs : __torch__.torch.nn.modules.container.___torch_mangle_35.ModuleList = prim::GetAttr[name="output_convs"](%backbone.2)
  %_1.8 : __torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d = prim::GetAttr[name="1"](%output_convs)
  %_2.8 : __torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d = prim::GetAttr[name="2"](%output_convs)
  %_3.2 : __torch__.detectron2.layers.wrappers.___torch_mangle_34.Conv2d = prim::GetAttr[name="3"](%output_convs)
  %in_features.5 : (str, str, str, str) = prim::GetAttr[name="in_features"](%backbone.2)
  %features.10 : str = prim::TupleIndex(%in_features.5, %51)
  %features.13 : Tensor = aten::__getitem__(%bottom_up_features.1, %features.10) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:152:27
  %scale_factors.80 : float[] = prim::ListConstruct()
   = prim::Loop(%36, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4012:28
    block0(%2189 : int):
      %2190 : float[] = aten::append(%scale_factors.80, %34) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4012:28
      -> (%58)
  %2191 : Tensor = aten::upsample_nearest2d(%prev_features.1, %57, %scale_factors.80) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4050:15
  %weight.100 : Tensor = prim::GetAttr[name="weight"](%_1.6)
  %bias.163 : Tensor? = prim::GetAttr[name="bias"](%_1.6)
  %2194 : int[] = prim::ListConstruct(%44, %44)
  %2195 : int[] = prim::ListConstruct(%49, %49)
  %2196 : int[] = prim::ListConstruct(%44, %44)
  %lateral_features.5 : Tensor = aten::conv2d(%features.13, %weight.100, %bias.163, %2194, %2195, %2196, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %prev_features.37 : Tensor = aten::add(%lateral_features.5, %2191, %44) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:155:32
  %weight.102 : Tensor = prim::GetAttr[name="weight"](%_1.8)
  %bias.165 : Tensor? = prim::GetAttr[name="bias"](%_1.8)
  %2201 : int[] = prim::ListConstruct(%44, %44)
  %2202 : int[] = prim::ListConstruct(%44, %44)
  %2203 : int[] = prim::ListConstruct(%44, %44)
  %x.57 : Tensor = aten::conv2d(%prev_features.37, %weight.102, %bias.165, %2201, %2202, %2203, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
   = aten::insert(%2156, %49, %x.57) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:158:16
  %in_features.7 : (str, str, str, str) = prim::GetAttr[name="in_features"](%backbone.2)
  %features.17 : str = prim::TupleIndex(%in_features.7, %32)
  %features.21 : Tensor = aten::__getitem__(%bottom_up_features.1, %features.17) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:152:27
  %2208 : Tensor = prim::Uninitialized()
  %2209 : int = aten::dim(%prev_features.37) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:3970:10
  %dim.4 : int = aten::sub(%2209, %36) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:3970:10
  %scale_factors.94 : float[] = prim::ListConstruct()
   = prim::Loop(%dim.4, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4012:28
    block0(%2212 : int):
      %2213 : float[] = aten::append(%scale_factors.94, %34) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4012:28
      -> (%58)
  %2214 : int = aten::dim(%prev_features.37) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4047:7
  %2215 : bool = aten::eq(%2214, %35) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4047:7
  %top_down_features.9 : Tensor = prim::If(%2215) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4047:4
    block0():
      %2217 : Tensor = aten::upsample_nearest1d(%prev_features.37, %57, %scale_factors.94) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4048:15
      -> (%2217)
    block1():
      %2218 : int = aten::dim(%prev_features.37) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4049:7
      %2219 : bool = aten::eq(%2218, %55) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4049:7
      %2220 : Tensor = prim::If(%2219) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4049:4
        block0():
          %2221 : Tensor = aten::upsample_nearest2d(%prev_features.37, %57, %scale_factors.94) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4050:15
          -> (%2221)
        block1():
          %2222 : int = aten::dim(%prev_features.37) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4051:7
          %2223 : bool = aten::eq(%2222, %40) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4051:7
          %2224 : Tensor = prim::If(%2223) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4051:4
            block0():
              %2225 : Tensor = aten::upsample_nearest3d(%prev_features.37, %57, %scale_factors.94) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4052:15
              -> (%2225)
            block1():
              %2226 : int = aten::dim(%prev_features.37) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4111:9
              %2227 : str = aten::format(%42, %2226, %33) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4111:8
               = prim::RaiseException(%2227, %41) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4110:4
              -> (%2208)
          -> (%2224)
      -> (%2220)
  %weight.104 : Tensor = prim::GetAttr[name="weight"](%_2.6)
  %bias.167 : Tensor? = prim::GetAttr[name="bias"](%_2.6)
  %2230 : int[] = prim::ListConstruct(%44, %44)
  %2231 : int[] = prim::ListConstruct(%49, %49)
  %2232 : int[] = prim::ListConstruct(%44, %44)
  %lateral_features.9 : Tensor = aten::conv2d(%features.21, %weight.104, %bias.167, %2230, %2231, %2232, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %prev_features.67 : Tensor = aten::add(%lateral_features.9, %top_down_features.9, %44) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:155:32
  %weight.106 : Tensor = prim::GetAttr[name="weight"](%_2.8)
  %bias.169 : Tensor? = prim::GetAttr[name="bias"](%_2.8)
  %2237 : int[] = prim::ListConstruct(%44, %44)
  %2238 : int[] = prim::ListConstruct(%44, %44)
  %2239 : int[] = prim::ListConstruct(%44, %44)
  %x.37 : Tensor = aten::conv2d(%prev_features.67, %weight.106, %bias.169, %2237, %2238, %2239, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
   = aten::insert(%2156, %49, %x.37) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:158:16
  %in_features.2 : (str, str, str, str) = prim::GetAttr[name="in_features"](%backbone.2)
  %features.25 : str = prim::TupleIndex(%in_features.2, %31)
  %features.29 : Tensor = aten::__getitem__(%bottom_up_features.1, %features.25) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:152:27
  %2244 : Tensor = prim::Uninitialized()
  %2245 : int = aten::dim(%prev_features.67) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:3970:10
  %dim.1 : int = aten::sub(%2245, %36) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:3970:10
  %scale_factors.3 : float[] = prim::ListConstruct()
   = prim::Loop(%dim.1, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4012:28
    block0(%2248 : int):
      %2249 : float[] = aten::append(%scale_factors.3, %34) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4012:28
      -> (%58)
  %2250 : int = aten::dim(%prev_features.67) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4047:7
  %2251 : bool = aten::eq(%2250, %35) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4047:7
  %top_down_features.13 : Tensor = prim::If(%2251) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4047:4
    block0():
      %2253 : Tensor = aten::upsample_nearest1d(%prev_features.67, %57, %scale_factors.3) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4048:15
      -> (%2253)
    block1():
      %2254 : int = aten::dim(%prev_features.67) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4049:7
      %2255 : bool = aten::eq(%2254, %55) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4049:7
      %2256 : Tensor = prim::If(%2255) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4049:4
        block0():
          %2257 : Tensor = aten::upsample_nearest2d(%prev_features.67, %57, %scale_factors.3) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4050:15
          -> (%2257)
        block1():
          %2258 : int = aten::dim(%prev_features.67) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4051:7
          %2259 : bool = aten::eq(%2258, %40) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4051:7
          %2260 : Tensor = prim::If(%2259) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4051:4
            block0():
              %2261 : Tensor = aten::upsample_nearest3d(%prev_features.67, %57, %scale_factors.3) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4052:15
              -> (%2261)
            block1():
              %2262 : int = aten::dim(%prev_features.67) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4111:9
              %2263 : str = aten::format(%42, %2262, %33) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4111:8
               = prim::RaiseException(%2263, %41) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:4110:4
              -> (%2244)
          -> (%2260)
      -> (%2256)
  %weight.108 : Tensor = prim::GetAttr[name="weight"](%_3.5)
  %bias.171 : Tensor? = prim::GetAttr[name="bias"](%_3.5)
  %2266 : int[] = prim::ListConstruct(%44, %44)
  %2267 : int[] = prim::ListConstruct(%49, %49)
  %2268 : int[] = prim::ListConstruct(%44, %44)
  %lateral_features.13 : Tensor = aten::conv2d(%features.29, %weight.108, %bias.171, %2266, %2267, %2268, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
  %prev_features.97 : Tensor = aten::add(%lateral_features.13, %top_down_features.13, %44) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:155:32
  %weight.114 : Tensor = prim::GetAttr[name="weight"](%_3.2)
  %bias.177 : Tensor? = prim::GetAttr[name="bias"](%_3.2)
  %2273 : int[] = prim::ListConstruct(%44, %44)
  %2274 : int[] = prim::ListConstruct(%44, %44)
  %2275 : int[] = prim::ListConstruct(%44, %44)
  %x.43 : Tensor = aten::conv2d(%prev_features.97, %weight.114, %bias.177, %2273, %2274, %2275, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
   = aten::insert(%2156, %49, %x.43) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:158:16
  %top_block.3 : __torch__.detectron2.modeling.backbone.fpn.LastLevelMaxPool = prim::GetAttr[name="top_block"](%backbone.2)
  %in_feature.1 : str = prim::GetAttr[name="in_feature"](%top_block.3)
  %2279 : bool = aten::__contains__(%bottom_up_features.1, %in_feature.1) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:161:15
  %top_block_in_feature : Tensor = prim::If(%2279) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:161:12
    block0():
      %top_block.5 : __torch__.detectron2.modeling.backbone.fpn.LastLevelMaxPool = prim::GetAttr[name="top_block"](%backbone.2)
      %in_feature.3 : str = prim::GetAttr[name="in_feature"](%top_block.5)
      %top_block_in_feature.1 : Tensor = aten::__getitem__(%bottom_up_features.1, %in_feature.3) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:162:39
      -> (%top_block_in_feature.1)
    block1():
      %_out_features.2 : str[] = prim::GetAttr[name="_out_features"](%backbone.2)
      %top_block.7 : __torch__.detectron2.modeling.backbone.fpn.LastLevelMaxPool = prim::GetAttr[name="top_block"](%backbone.2)
      %in_feature : str = prim::GetAttr[name="in_feature"](%top_block.7)
      %2287 : int = aten::index(%_out_features.2, %in_feature) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:164:47
      %top_block_in_feature.3 : Tensor = aten::__getitem__(%2156, %2287) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:164:39
      -> (%top_block_in_feature.3)
  %2289 : int[] = prim::ListConstruct(%44, %44)
  %2290 : int[] = prim::ListConstruct(%36, %36)
  %2291 : int[] = prim::ListConstruct(%49, %49)
  %2292 : int[] = prim::ListConstruct(%44, %44)
  %2293 : Tensor = aten::max_pool2d(%top_block_in_feature, %2289, %2290, %2291, %2292, %46) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:796:11
  %2294 : Tensor[] = prim::ListConstruct(%2293)
   = aten::extend(%2156, %2294) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:165:12
  %_out_features.4 : str[] = prim::GetAttr[name="_out_features"](%backbone.2)
  %2296 : int = aten::len(%_out_features.4) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:166:15
  %2297 : int = aten::len(%2156) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:166:42
  %2298 : bool = aten::eq(%2296, %2297) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:166:15
   = prim::If(%2298) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:166:8
    block0():
      -> ()
    block1():
       = prim::RaiseException(%50, %57) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:166:8
      -> ()
  %features.1 : Dict(str, Tensor) = prim::DictConstruct()
  %_out_features.6 : str[] = prim::GetAttr[name="_out_features"](%backbone.2)
  %2301 : int = aten::len(%_out_features.6) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:167:15
  %2302 : int = aten::len(%2156) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:167:15
  %2303 : int[] = prim::ListConstruct(%2301, %2302)
  %2304 : int = prim::min(%2303) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:167:15
   = prim::Loop(%2304, %58) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:167:15
    block0(%2305 : int):
      %f.4 : str = aten::__getitem__(%_out_features.6, %2305) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:167:15
      %res.2 : Tensor = aten::__getitem__(%2156, %2305) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:167:15
       = aten::_set_item(%features.1, %f.4, %res.2) # /home/kelechi/detectron2/detectron2/modeling/backbone/fpn.py:167:15
      -> (%58)
  %2308 : bool = aten::__is__(%3, %57) # /home/kelechi/detectron2/detectron2/modeling/meta_arch/rcnn.py:206:11
  %instances.3 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::If(%2308) # /home/kelechi/detectron2/detectron2/modeling/meta_arch/rcnn.py:206:8
    block0():
      %proposal_generator : __torch__.detectron2.modeling.proposal_generator.rpn.RPN = prim::GetAttr[name="proposal_generator"](%model)
      %features.7 : Tensor[] = prim::ListConstruct()
      %in_features : str[] = prim::GetAttr[name="in_features"](%proposal_generator)
      %2313 : int = aten::len(%in_features) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:451:19
       = prim::Loop(%2313, %58) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:451:19
        block0(%2314 : int):
          %f.6 : str = aten::__getitem__(%in_features, %2314) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:451:19
          %2316 : Tensor = aten::__getitem__(%features.1, %f.6) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:451:20
          %2317 : Tensor[] = aten::append(%features.7, %2316) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:451:19
          -> (%58)
      %anchor_generator.1 : __torch__.detectron2.modeling.anchor_generator.DefaultAnchorGenerator = prim::GetAttr[name="anchor_generator"](%proposal_generator)
      %grid_sizes.1 : int[][] = prim::ListConstruct()
      %2320 : int = aten::len(%features.7) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:229:21
       = prim::Loop(%2320, %58) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:229:21
        block0(%2321 : int):
          %feature_map.1 : Tensor = aten::__getitem__(%features.7, %2321) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:229:21
          %2323 : int[] = aten::size(%feature_map.1) # <string>:13:9
          %2324 : int[] = aten::slice(%2323, %51, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:229:22
          %2325 : int[][] = aten::append(%grid_sizes.1, %2324) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:229:21
          -> (%58)
      %anchors_over_all_feature_maps.1 : Tensor[] = prim::ListConstruct()
      %buffers.1 : Tensor[] = prim::ListConstruct()
      %cell_anchors : __torch__.detectron2.modeling.anchor_generator.BufferList = prim::GetAttr[name="cell_anchors"](%anchor_generator.1)
      %_0 : Tensor = prim::GetAttr[name="0"](%cell_anchors)
      %_1 : Tensor = prim::GetAttr[name="1"](%cell_anchors)
      %_2 : Tensor = prim::GetAttr[name="2"](%cell_anchors)
      %_3 : Tensor = prim::GetAttr[name="3"](%cell_anchors)
      %_4 : Tensor = prim::GetAttr[name="4"](%cell_anchors)
      %2334 : Tensor[] = aten::append(%buffers.1, %_0) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:172:38
      %2335 : Tensor[] = aten::append(%buffers.1, %_1) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:172:38
      %2336 : Tensor[] = aten::append(%buffers.1, %_2) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:172:38
      %2337 : Tensor[] = aten::append(%buffers.1, %_3) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:172:38
      %2338 : Tensor[] = aten::append(%buffers.1, %_4) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:172:38
      %strides : int[] = prim::GetAttr[name="strides"](%anchor_generator.1)
      %2340 : int = aten::len(%grid_sizes.1) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:173:8
      %2341 : int = aten::len(%strides) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:173:8
      %2342 : int = aten::len(%buffers.1) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:173:8
      %2343 : int[] = prim::ListConstruct(%2340, %2341, %2342)
      %2344 : int = prim::min(%2343) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:173:8
       = prim::Loop(%2344, %58) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:173:8
        block0(%2345 : int):
          %size.1 : int[] = aten::__getitem__(%grid_sizes.1, %2345) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:173:8
          %stride.1 : int = aten::__getitem__(%strides, %2345) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:173:8
          %base_anchors.1 : Tensor = aten::__getitem__(%buffers.1, %2345) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:173:8
          %offset : float = prim::GetAttr[name="offset"](%anchor_generator.1)
          %grid_height.1 : int, %grid_width.1 : int = prim::ListUnpack(%size.1)
          %2352 : float = aten::mul(%offset, %stride.1) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:44:21
          %2353 : int = aten::mul(%grid_width.1, %stride.1) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:44:38
          %2354 : Tensor = aten::arange(%2352, %2353, %stride.1, %22, %57, %57, %57) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:44:8
          %2355 : Device = prim::device(%base_anchors.1)
          %shifts_x.1 : Tensor = aten::to(%2354, %2355, %57, %46, %46) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:177:11
          %2357 : float = aten::mul(%offset, %stride.1) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:48:21
          %2358 : int = aten::mul(%grid_height.1, %stride.1) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:48:38
          %2359 : Tensor = aten::arange(%2357, %2358, %stride.1, %22, %57, %57, %57) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:48:8
          %2360 : Device = prim::device(%base_anchors.1)
          %shifts_y.1 : Tensor = aten::to(%2359, %2360, %57, %46, %46) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:177:11
          %2362 : Tensor[] = prim::ListConstruct(%shifts_y.1, %shifts_x.1)
          %2363 : Tensor[] = aten::meshgrid(%2362) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:52:23
          %shift_y.1 : Tensor, %shift_x.1 : Tensor = prim::ListUnpack(%2363)
          %2366 : int[] = prim::ListConstruct(%52)
          %shift_x.5 : Tensor = aten::reshape(%shift_x.1, %2366) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:53:14
          %2368 : int[] = prim::ListConstruct(%52)
          %shift_y.5 : Tensor = aten::reshape(%shift_y.1, %2368) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:54:14
          %2370 : (Tensor, Tensor) = prim::TupleConstruct(%shift_x.5, %shift_y.5)
          %shift_x.2 : Tensor, %shift_y.2 : Tensor = prim::TupleUnpack(%2370)
          %2373 : Tensor[] = prim::ListConstruct(%shift_x.2, %shift_y.2, %shift_x.2, %shift_y.2)
          %shifts.1 : Tensor = aten::stack(%2373, %44) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:175:21
          %2375 : int[] = prim::ListConstruct(%52, %44, %55)
          %2376 : Tensor = aten::view(%shifts.1, %2375) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:177:28
          %2377 : int[] = prim::ListConstruct(%44, %52, %55)
          %2378 : Tensor = aten::view(%base_anchors.1, %2377) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:177:52
          %2379 : Tensor = aten::add(%2376, %2378, %44) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:177:28
          %2380 : int[] = prim::ListConstruct(%52, %55)
          %2381 : Tensor = aten::reshape(%2379, %2380) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:177:28
          %2382 : Tensor[] = aten::append(%anchors_over_all_feature_maps.1, %2381) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:177:12
          -> (%58)
      %anchors.1 : __torch__.detectron2.structures.boxes.Boxes[] = prim::ListConstruct()
      %2384 : int = aten::len(%anchors_over_all_feature_maps.1) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:231:15
       = prim::Loop(%2384, %58) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:231:15
        block0(%2385 : int):
          %x.4 : Tensor = aten::__getitem__(%anchors_over_all_feature_maps.1, %2385) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:231:15
          %2387 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject() # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:231:16
          %tensor.27 : Tensor = aten::to(%x.4, %22, %46, %46, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:150:21
          %2389 : int = aten::numel(%tensor.27) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:11
          %2390 : bool = aten::eq(%2389, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:11
          %tensor.31 : Tensor = prim::If(%2390) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:8
            block0():
              %2392 : int[] = prim::ListConstruct(%52, %55)
              %2393 : Tensor = aten::reshape(%tensor.27, %2392) # /home/kelechi/detectron2/detectron2/structures/boxes.py:154:21
              %tensor.33 : Tensor = aten::to(%2393, %22, %46, %46, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:154:21
              -> (%tensor.33)
            block1():
              -> (%tensor.27)
          %2395 : int = aten::dim(%tensor.31) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
          %2396 : bool = aten::eq(%2395, %36) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
          %2397 : bool = prim::If(%2396) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
            block0():
              %2398 : int = aten::size(%tensor.31, %52) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:37
              %2399 : bool = aten::eq(%2398, %55) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:37
              -> (%2399)
            block1():
              -> (%46)
           = prim::If(%2397) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
            block0():
              -> ()
            block1():
              %2400 : int[] = aten::size(%tensor.31) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:59
              %2401 : str = aten::str(%2400) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
              %2402 : str = aten::add(%50, %2401) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
               = prim::RaiseException(%2402, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
              -> ()
           = prim::SetAttr[name="tensor"](%2387, %tensor.31)
          %2403 : __torch__.detectron2.structures.boxes.Boxes[] = aten::append(%anchors.1, %2387) # /home/kelechi/detectron2/detectron2/modeling/anchor_generator.py:231:15
          -> (%58)
      %rpn_head : __torch__.detectron2.modeling.proposal_generator.rpn.StandardRPNHead = prim::GetAttr[name="rpn_head"](%proposal_generator)
      %2405 : Tensor[] = prim::ListConstruct()
      %2406 : Tensor[] = prim::ListConstruct()
      %2407 : int = aten::len(%features.7) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:173:8
       = prim::Loop(%2407, %58) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:173:8
        block0(%2408 : int):
          %x.71 : Tensor = aten::__getitem__(%features.7, %2408) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:173:8
          %conv : __torch__.detectron2.layers.wrappers.___torch_mangle_36.Conv2d = prim::GetAttr[name="conv"](%rpn_head)
          %weight.124 : Tensor = prim::GetAttr[name="weight"](%conv)
          %bias.187 : Tensor? = prim::GetAttr[name="bias"](%conv)
          %2413 : int[] = prim::ListConstruct(%44, %44)
          %2414 : int[] = prim::ListConstruct(%44, %44)
          %2415 : int[] = prim::ListConstruct(%44, %44)
          %x.95 : Tensor = aten::conv2d(%x.71, %weight.124, %bias.187, %2413, %2414, %2415, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
          %t.10 : Tensor = aten::relu(%x.95) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:1500:17
          %objectness_logits : __torch__.torch.nn.modules.conv.Conv2d = prim::GetAttr[name="objectness_logits"](%rpn_head)
          %weight.126 : Tensor = prim::GetAttr[name="weight"](%objectness_logits)
          %bias.189 : Tensor? = prim::GetAttr[name="bias"](%objectness_logits)
          %2421 : int[] = prim::ListConstruct(%44, %44)
          %2422 : int[] = prim::ListConstruct(%49, %49)
          %2423 : int[] = prim::ListConstruct(%44, %44)
          %2424 : Tensor = aten::conv2d(%t.10, %weight.126, %bias.189, %2421, %2422, %2423, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/modules/conv.py:454:15
          %2425 : Tensor[] = aten::append(%2405, %2424) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:175:12
          %anchor_deltas : __torch__.torch.nn.modules.conv.___torch_mangle_37.Conv2d = prim::GetAttr[name="anchor_deltas"](%rpn_head)
          %weight.134 : Tensor = prim::GetAttr[name="weight"](%anchor_deltas)
          %bias.197 : Tensor? = prim::GetAttr[name="bias"](%anchor_deltas)
          %2429 : int[] = prim::ListConstruct(%44, %44)
          %2430 : int[] = prim::ListConstruct(%49, %49)
          %2431 : int[] = prim::ListConstruct(%44, %44)
          %2432 : Tensor = aten::conv2d(%t.10, %weight.134, %bias.197, %2429, %2430, %2431, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/modules/conv.py:454:15
          %2433 : Tensor[] = aten::append(%2406, %2432) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:176:12
          -> (%58)
      %2434 : (Tensor[], Tensor[]) = prim::TupleConstruct(%2405, %2406)
      %pred_objectness_logits.1 : Tensor[], %pred_anchor_deltas.1 : Tensor[] = prim::TupleUnpack(%2434)
      %pred_objectness_logits.5 : Tensor[] = prim::ListConstruct()
      %2438 : int = aten::len(%pred_objectness_logits.1) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:456:33
       = prim::Loop(%2438, %58) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:456:33
        block0(%2439 : int):
          %score.1 : Tensor = aten::__getitem__(%pred_objectness_logits.1, %2439) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:456:33
          %2441 : int[] = prim::ListConstruct(%49, %36, %35, %44)
          %2442 : Tensor = aten::permute(%score.1, %2441) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:458:12
          %2443 : Tensor = aten::flatten(%2442, %44, %52) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:458:12
          %2444 : Tensor[] = aten::append(%pred_objectness_logits.5, %2443) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:456:33
          -> (%58)
      %pred_anchor_deltas.5 : Tensor[] = prim::ListConstruct()
      %2446 : int = aten::len(%pred_anchor_deltas.1) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:461:29
       = prim::Loop(%2446, %58) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:461:29
        block0(%2447 : int):
          %x.69 : Tensor = aten::__getitem__(%pred_anchor_deltas.1, %2447) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:461:29
          %2449 : int[] = aten::size(%x.69) # <string>:13:9
          %2450 : int = aten::__getitem__(%2449, %49) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:463:19
          %2451 : int[] = aten::size(%x.69) # <string>:13:9
          %2452 : int = aten::__getitem__(%2451, %51) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:463:66
          %2453 : int[] = aten::size(%x.69) # <string>:13:9
          %2454 : int = aten::__getitem__(%2453, %52) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:463:79
          %2455 : int[] = prim::ListConstruct(%2450, %52, %55, %2452, %2454)
          %2456 : Tensor = aten::view(%x.69, %2455) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:463:12
          %2457 : int[] = prim::ListConstruct(%49, %35, %55, %44, %36)
          %2458 : Tensor = aten::permute(%2456, %2457) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:463:12
          %2459 : Tensor = aten::flatten(%2458, %44, %51) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:463:12
          %2460 : Tensor[] = aten::append(%pred_anchor_deltas.5, %2459) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:461:29
          -> (%58)
      %losses.1 : Dict(str, Tensor) = prim::DictConstruct()
      %image_sizes : (int, int)[] = prim::GetAttr[name="image_sizes"](%images.2)
      %2463 : __torch__.torch.autograd.grad_mode.no_grad = prim::CreateObject() # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:501:13
       = prim::SetAttr[name="prev"](%2463, %46)
      %2464 : NoneType = prim::Enter(%2463)
      %2465 : Tensor = aten::__getitem__(%pred_anchor_deltas.5, %49) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:522:12
      %2466 : int[] = aten::size(%2465) # <string>:13:9
      %N.1 : int = aten::__getitem__(%2466, %49) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:522:12
      %pred_proposals.1 : Tensor[] = prim::ListConstruct()
      %2469 : int = aten::len(%anchors.1) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:525:8
      %2470 : int = aten::len(%pred_anchor_deltas.5) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:525:8
      %2471 : int[] = prim::ListConstruct(%2469, %2470)
      %2472 : int = prim::min(%2471) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:525:8
       = prim::Loop(%2472, %58) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:525:8
        block0(%2473 : int):
          %anchors_i.1 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%anchors.1, %2473) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:525:8
          %pred_anchor_deltas_i.1 : Tensor = aten::__getitem__(%pred_anchor_deltas.5, %2473) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:525:8
          %tensor.41 : Tensor = prim::GetAttr[name="tensor"](%anchors_i.1)
          %B.1 : int = aten::size(%tensor.41, %44) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:526:16
          %2478 : int[] = prim::ListConstruct(%52, %B.1)
          %pred_anchor_deltas_i.5 : Tensor = aten::reshape(%pred_anchor_deltas_i.1, %2478) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:527:35
          %tensor.29 : Tensor = prim::GetAttr[name="tensor"](%anchors_i.1)
          %2481 : Tensor = aten::unsqueeze(%tensor.29, %49) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:529:24
          %2482 : int[] = prim::ListConstruct(%N.1, %52, %52)
          %2483 : Tensor = aten::expand(%2481, %2482, %46) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:529:24
          %2484 : int[] = prim::ListConstruct(%52, %B.1)
          %anchors_i.7 : Tensor = aten::reshape(%2483, %2484) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:529:24
          %box2box_transform : __torch__.detectron2.modeling.box_regression.Box2BoxTransform = prim::GetAttr[name="box2box_transform"](%proposal_generator)
          %deltas.6 : Tensor = aten::to(%pred_anchor_deltas_i.5, %22, %46, %46, %57) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:88:17
          %2488 : int = prim::dtype(%deltas.6)
          %boxes.16 : Tensor = aten::to(%anchors_i.7, %2488, %46, %46, %57) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:89:16
          %2490 : Tensor = aten::slice(%boxes.16, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:91:17
          %2491 : Tensor = aten::select(%2490, %44, %36) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:91:17
          %2492 : Tensor = aten::slice(%boxes.16, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:91:31
          %2493 : Tensor = aten::select(%2492, %44, %49) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:91:31
          %widths.2 : Tensor = aten::sub(%2491, %2493, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:91:17
          %2495 : Tensor = aten::slice(%boxes.16, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:92:18
          %2496 : Tensor = aten::select(%2495, %44, %35) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:92:18
          %2497 : Tensor = aten::slice(%boxes.16, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:92:32
          %2498 : Tensor = aten::select(%2497, %44, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:92:32
          %heights.2 : Tensor = aten::sub(%2496, %2498, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:92:18
          %2500 : Tensor = aten::slice(%boxes.16, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:93:16
          %2501 : Tensor = aten::select(%2500, %44, %49) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:93:16
          %2502 : Tensor = aten::mul(%widths.2, %30) # <string>:3:9
          %ctr_x.2 : Tensor = aten::add(%2501, %2502, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:93:16
          %2504 : Tensor = aten::slice(%boxes.16, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:94:16
          %2505 : Tensor = aten::select(%2504, %44, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:94:16
          %2506 : Tensor = aten::mul(%heights.2, %30) # <string>:3:9
          %ctr_y.2 : Tensor = aten::add(%2505, %2506, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:94:16
          %weights.1 : (float, float, float, float) = prim::GetAttr[name="weights"](%box2box_transform)
          %wx.2 : float, %wy.2 : float, %ww.2 : float, %wh.2 : float = prim::TupleUnpack(%weights.1)
          %2513 : Tensor = aten::slice(%deltas.6, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:97:13
          %2514 : Tensor = aten::slice(%2513, %44, %49, %57, %55) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:97:13
          %dx.2 : Tensor = aten::div(%2514, %wx.2) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:97:13
          %2516 : Tensor = aten::slice(%deltas.6, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:98:13
          %2517 : Tensor = aten::slice(%2516, %44, %44, %57, %55) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:98:13
          %dy.2 : Tensor = aten::div(%2517, %wy.2) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:98:13
          %2519 : Tensor = aten::slice(%deltas.6, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:99:13
          %2520 : Tensor = aten::slice(%2519, %44, %36, %57, %55) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:99:13
          %dw.2 : Tensor = aten::div(%2520, %ww.2) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:99:13
          %2522 : Tensor = aten::slice(%deltas.6, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:100:13
          %2523 : Tensor = aten::slice(%2522, %44, %35, %57, %55) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:100:13
          %dh.2 : Tensor = aten::div(%2523, %wh.2) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:100:13
          %scale_clamp.2 : float = prim::GetAttr[name="scale_clamp"](%box2box_transform)
          %dw.6 : Tensor = aten::clamp(%dw.2, %57, %scale_clamp.2) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:103:13
          %scale_clamp.4 : float = prim::GetAttr[name="scale_clamp"](%box2box_transform)
          %dh.6 : Tensor = aten::clamp(%dh.2, %57, %scale_clamp.4) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:104:13
          %2529 : Tensor = aten::slice(%widths.2, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:106:26
          %2530 : Tensor = aten::unsqueeze(%2529, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:106:26
          %2531 : Tensor = aten::mul(%dx.2, %2530) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:106:21
          %2532 : Tensor = aten::slice(%ctr_x.2, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:106:44
          %2533 : Tensor = aten::unsqueeze(%2532, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:106:44
          %pred_ctr_x.2 : Tensor = aten::add(%2531, %2533, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:106:21
          %2535 : Tensor = aten::slice(%heights.2, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:107:26
          %2536 : Tensor = aten::unsqueeze(%2535, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:107:26
          %2537 : Tensor = aten::mul(%dy.2, %2536) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:107:21
          %2538 : Tensor = aten::slice(%ctr_y.2, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:107:45
          %2539 : Tensor = aten::unsqueeze(%2538, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:107:45
          %pred_ctr_y.2 : Tensor = aten::add(%2537, %2539, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:107:21
          %2541 : Tensor = aten::exp(%dw.6) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:108:17
          %2542 : Tensor = aten::slice(%widths.2, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:108:33
          %2543 : Tensor = aten::unsqueeze(%2542, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:108:33
          %pred_w.2 : Tensor = aten::mul(%2541, %2543) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:108:17
          %2545 : Tensor = aten::exp(%dh.6) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:109:17
          %2546 : Tensor = aten::slice(%heights.2, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:109:33
          %2547 : Tensor = aten::unsqueeze(%2546, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:109:33
          %pred_h.2 : Tensor = aten::mul(%2545, %2547) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:109:17
          %2549 : Tensor = aten::mul(%pred_w.2, %30) # <string>:3:9
          %x1.3 : Tensor = aten::sub(%pred_ctr_x.2, %2549, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:111:13
          %2551 : Tensor = aten::mul(%pred_h.2, %30) # <string>:3:9
          %y1.3 : Tensor = aten::sub(%pred_ctr_y.2, %2551, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:112:13
          %2553 : Tensor = aten::mul(%pred_w.2, %30) # <string>:3:9
          %x2.3 : Tensor = aten::add(%pred_ctr_x.2, %2553, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:113:13
          %2555 : Tensor = aten::mul(%pred_h.2, %30) # <string>:3:9
          %y2.3 : Tensor = aten::add(%pred_ctr_y.2, %2555, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:114:13
          %2557 : Tensor[] = prim::ListConstruct(%x1.3, %y1.3, %x2.3, %y2.3)
          %pred_boxes.2 : Tensor = aten::stack(%2557, %52) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:115:21
          %2559 : int[] = aten::size(%deltas.6) # <string>:13:9
          %proposals_i.2 : Tensor = aten::reshape(%pred_boxes.2, %2559) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:116:15
          %2561 : int[] = prim::ListConstruct(%N.1, %52, %B.1)
          %2562 : Tensor = aten::view(%proposals_i.2, %2561) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:532:29
          %2563 : Tensor[] = aten::append(%pred_proposals.1, %2562) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:532:12
          -> (%58)
      %nms_thresh : float = prim::GetAttr[name="nms_thresh"](%proposal_generator)
      %pre_nms_topk : Dict(bool, int) = prim::GetAttr[name="pre_nms_topk"](%proposal_generator)
      %2566 : int = aten::__getitem__(%pre_nms_topk, %46) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:508:16
      %post_nms_topk : Dict(bool, int) = prim::GetAttr[name="post_nms_topk"](%proposal_generator)
      %2568 : int = aten::__getitem__(%post_nms_topk, %46) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/rpn.py:509:16
      %min_box_size : float = prim::GetAttr[name="min_box_size"](%proposal_generator)
      %num_images.1 : int = aten::len(%image_sizes) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:60:17
      %2571 : Tensor = aten::__getitem__(%pred_proposals.1, %49) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:62:8
      %device.2 : Device = prim::device(%2571)
      %2573 : Tensor[] = prim::ListConstruct()
      %2574 : Tensor[] = prim::ListConstruct()
      %2575 : Tensor[] = prim::ListConstruct()
      %2576 : Tensor = aten::arange(%num_images.1, %57, %57, %device.2, %57) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:71:33
      %2577 : Tensor = aten::__getitem__(%pred_proposals.1, %49) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:71:74
      %2578 : Device = prim::device(%2577)
      %batch_idx.1 : Tensor = aten::to(%2576, %2578, %57, %46, %46) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:177:11
      %2580 : int = aten::len(%pred_proposals.1) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:72:4
      %2581 : int = aten::len(%pred_objectness_logits.5) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:72:4
      %2582 : int[] = prim::ListConstruct(%48, %2580, %2581)
      %2583 : int = prim::min(%2582) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:72:4
       = prim::Loop(%2583, %58) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:72:4
        block0(%level_id.1 : int):
          %proposals_i.1 : Tensor = aten::__getitem__(%pred_proposals.1, %level_id.1) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:72:4
          %logits_i.1 : Tensor = aten::__getitem__(%pred_objectness_logits.5, %level_id.1) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:72:4
          %2587 : int[] = aten::size(%logits_i.1) # <string>:13:9
          %Hi_Wi_A.1 : int = aten::__getitem__(%2587, %44) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:73:18
          %num_proposals_i.1 : int = prim::min(%Hi_Wi_A.1, %2566) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:77:30
          %topk_scores_i.1 : Tensor, %topk_idx.1 : Tensor = aten::topk(%logits_i.1, %num_proposals_i.1, %44, %58, %58) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:79:34
          %2592 : Tensor = aten::slice(%batch_idx.1, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:82:39
          %2593 : Tensor = aten::unsqueeze(%2592, %44) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:82:39
          %2594 : Tensor?[] = prim::ListConstruct(%2593, %topk_idx.1)
          %topk_proposals_i.1 : Tensor = aten::index(%proposals_i.1, %2594) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:82:27
          %2596 : Tensor[] = aten::append(%2574, %topk_proposals_i.1) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:84:8
          %2597 : Tensor[] = aten::append(%2573, %topk_scores_i.1) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:85:8
          %2598 : int[] = prim::ListConstruct(%num_proposals_i.1)
          %2599 : Tensor = aten::full(%2598, %level_id.1, %55, %57, %device.2, %57) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:88:16
          %2600 : Tensor = aten::__getitem__(%pred_proposals.1, %49) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:89:16
          %2601 : Device = prim::device(%2600)
          %2602 : Tensor = aten::to(%2599, %2601, %57, %46, %46) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:177:11
          %2603 : Tensor[] = aten::append(%2575, %2602) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:86:8
          -> (%58)
      %2604 : int = aten::len(%2573) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:7
      %2605 : bool = aten::eq(%2604, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:7
      %topk_scores.7 : Tensor = prim::If(%2605) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:4
        block0():
          %2607 : Tensor = aten::__getitem__(%2573, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:71:15
          -> (%2607)
        block1():
          %2608 : Tensor = aten::cat(%2573, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:72:11
          -> (%2608)
      %2609 : int = aten::len(%2574) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:7
      %2610 : bool = aten::eq(%2609, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:7
      %topk_proposals.7 : Tensor = prim::If(%2610) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:4
        block0():
          %2612 : Tensor = aten::__getitem__(%2574, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:71:15
          -> (%2612)
        block1():
          %2613 : Tensor = aten::cat(%2574, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:72:11
          -> (%2613)
      %2614 : int = aten::len(%2575) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:7
      %2615 : bool = aten::eq(%2614, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:7
      %level_ids.7 : Tensor = prim::If(%2615) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:4
        block0():
          %2617 : Tensor = aten::__getitem__(%2575, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:71:15
          -> (%2617)
        block1():
          %2618 : Tensor = aten::cat(%2575, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:72:11
          -> (%2618)
      %proposals.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::ListConstruct()
      %2620 : int = aten::len(%image_sizes) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:100:4
      %2621 : int[] = prim::ListConstruct(%48, %2620)
      %2622 : int = prim::min(%2621) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:100:4
       = prim::Loop(%2622, %58) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:100:4
        block0(%n.1 : int):
          %image_size.1 : (int, int) = aten::__getitem__(%image_sizes, %n.1) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:100:4
          %2625 : Tensor = aten::select(%topk_proposals.7, %49, %n.1) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:101:22
          %boxes.20 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject() # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:101:16
          %tensor.35 : Tensor = aten::to(%2625, %22, %46, %46, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:150:21
          %2628 : int = aten::numel(%tensor.35) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:11
          %2629 : bool = aten::eq(%2628, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:11
          %tensor.49 : Tensor = prim::If(%2629) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:8
            block0():
              %2631 : int[] = prim::ListConstruct(%52, %55)
              %2632 : Tensor = aten::reshape(%tensor.35, %2631) # /home/kelechi/detectron2/detectron2/structures/boxes.py:154:21
              %tensor.39 : Tensor = aten::to(%2632, %22, %46, %46, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:154:21
              -> (%tensor.39)
            block1():
              -> (%tensor.35)
          %2634 : int = aten::dim(%tensor.49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
          %2635 : bool = aten::eq(%2634, %36) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
          %2636 : bool = prim::If(%2635) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
            block0():
              %2637 : int = aten::size(%tensor.49, %52) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:37
              %2638 : bool = aten::eq(%2637, %55) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:37
              -> (%2638)
            block1():
              -> (%46)
           = prim::If(%2636) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
            block0():
              -> ()
            block1():
              %2639 : int[] = aten::size(%tensor.49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:59
              %2640 : str = aten::str(%2639) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
              %2641 : str = aten::add(%50, %2640) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
               = prim::RaiseException(%2641, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
              -> ()
           = prim::SetAttr[name="tensor"](%boxes.20, %tensor.49)
          %scores_per_img.1 : Tensor = aten::select(%topk_scores.7, %49, %n.1) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:102:25
          %tensor.37 : Tensor = prim::GetAttr[name="tensor"](%boxes.20)
          %2644 : Tensor = aten::isfinite(%tensor.37) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:105:21
          %2645 : Tensor = aten::all(%2644, %44, %46) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:105:21
          %2646 : Tensor = aten::isfinite(%scores_per_img.1) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:105:63
          %valid_mask.2 : Tensor = aten::__and__(%2645, %2646) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:105:21
          %2648 : Tensor = aten::all(%valid_mask.2) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:106:15
          %2649 : bool = aten::Bool(%2648) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:106:15
          %2650 : bool = aten::__not__(%2649) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:106:11
          %boxes.43 : __torch__.detectron2.structures.boxes.Boxes, %scores_per_img.37 : Tensor, %lvl.31 : Tensor = prim::If(%2650) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:106:8
            block0():
              %tensor.26 : Tensor = prim::GetAttr[name="tensor"](%boxes.20)
              %2655 : Tensor?[] = prim::ListConstruct(%valid_mask.2)
              %b.2 : Tensor = aten::index(%tensor.26, %2655) # /home/kelechi/detectron2/detectron2/structures/boxes.py:235:12
              %2657 : int = aten::dim(%b.2) # /home/kelechi/detectron2/detectron2/structures/boxes.py:236:15
              %2658 : bool = aten::eq(%2657, %36) # /home/kelechi/detectron2/detectron2/structures/boxes.py:236:15
               = prim::If(%2658) # /home/kelechi/detectron2/detectron2/structures/boxes.py:236:8
                block0():
                  -> ()
                block1():
                  %2659 : str = aten::format(%23, %valid_mask.2) # /home/kelechi/detectron2/detectron2/structures/boxes.py:236:29
                  %2660 : str = aten::add(%50, %2659) # /home/kelechi/detectron2/detectron2/structures/boxes.py:236:8
                   = prim::RaiseException(%2660, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:236:8
                  -> ()
              %boxes.22 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject() # /home/kelechi/detectron2/detectron2/structures/boxes.py:237:15
              %tensor.28 : Tensor = aten::to(%b.2, %22, %46, %46, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:150:21
              %2663 : int = aten::numel(%tensor.28) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:11
              %2664 : bool = aten::eq(%2663, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:11
              %tensor.55 : Tensor = prim::If(%2664) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:8
                block0():
                  %2666 : int[] = prim::ListConstruct(%52, %55)
                  %2667 : Tensor = aten::reshape(%tensor.28, %2666) # /home/kelechi/detectron2/detectron2/structures/boxes.py:154:21
                  %tensor.32 : Tensor = aten::to(%2667, %22, %46, %46, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:154:21
                  -> (%tensor.32)
                block1():
                  -> (%tensor.28)
              %2669 : int = aten::dim(%tensor.55) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
              %2670 : bool = aten::eq(%2669, %36) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
              %2671 : bool = prim::If(%2670) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
                block0():
                  %2672 : int = aten::size(%tensor.55, %52) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:37
                  %2673 : bool = aten::eq(%2672, %55) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:37
                  -> (%2673)
                block1():
                  -> (%46)
               = prim::If(%2671) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
                block0():
                  -> ()
                block1():
                  %2674 : int[] = aten::size(%tensor.55) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:59
                  %2675 : str = aten::str(%2674) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
                  %2676 : str = aten::add(%50, %2675) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
                   = prim::RaiseException(%2676, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
                  -> ()
               = prim::SetAttr[name="tensor"](%boxes.22, %tensor.55)
              %2677 : Tensor?[] = prim::ListConstruct(%valid_mask.2)
              %scores_per_img.7 : Tensor = aten::index(%scores_per_img.1, %2677) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:112:29
              %2679 : Tensor?[] = prim::ListConstruct(%valid_mask.2)
              %lvl.3 : Tensor = aten::index(%level_ids.7, %2679) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:113:18
              -> (%boxes.22, %scores_per_img.7, %lvl.3)
            block1():
              -> (%boxes.20, %scores_per_img.1, %level_ids.7)
          %tensor.59 : Tensor = prim::GetAttr[name="tensor"](%boxes.43)
          %2682 : Tensor = aten::isfinite(%tensor.59) # /home/kelechi/detectron2/detectron2/structures/boxes.py:191:15
          %2683 : Tensor = aten::all(%2682) # /home/kelechi/detectron2/detectron2/structures/boxes.py:191:15
          %2684 : bool = aten::Bool(%2683) # /home/kelechi/detectron2/detectron2/structures/boxes.py:191:15
           = prim::If(%2684) # /home/kelechi/detectron2/detectron2/structures/boxes.py:191:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%24, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:191:8
              -> ()
          %h.2 : int, %w.2 : int = prim::TupleUnpack(%image_size.1)
          %tensor.63 : Tensor = prim::GetAttr[name="tensor"](%boxes.43)
          %2688 : Tensor = aten::slice(%tensor.63, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:193:13
          %2689 : Tensor = aten::select(%2688, %44, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:193:13
          %x1.5 : Tensor = aten::clamp(%2689, %49, %w.2) # /home/kelechi/detectron2/detectron2/structures/boxes.py:193:13
          %tensor.45 : Tensor = prim::GetAttr[name="tensor"](%boxes.43)
          %2692 : Tensor = aten::slice(%tensor.45, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:194:13
          %2693 : Tensor = aten::select(%2692, %44, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:194:13
          %y1.5 : Tensor = aten::clamp(%2693, %49, %h.2) # /home/kelechi/detectron2/detectron2/structures/boxes.py:194:13
          %tensor.47 : Tensor = prim::GetAttr[name="tensor"](%boxes.43)
          %2696 : Tensor = aten::slice(%tensor.47, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:195:13
          %2697 : Tensor = aten::select(%2696, %44, %36) # /home/kelechi/detectron2/detectron2/structures/boxes.py:195:13
          %x2.5 : Tensor = aten::clamp(%2697, %49, %w.2) # /home/kelechi/detectron2/detectron2/structures/boxes.py:195:13
          %tensor.51 : Tensor = prim::GetAttr[name="tensor"](%boxes.43)
          %2700 : Tensor = aten::slice(%tensor.51, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:196:13
          %2701 : Tensor = aten::select(%2700, %44, %35) # /home/kelechi/detectron2/detectron2/structures/boxes.py:196:13
          %y2.5 : Tensor = aten::clamp(%2701, %49, %h.2) # /home/kelechi/detectron2/detectron2/structures/boxes.py:196:13
          %2703 : Tensor[] = prim::ListConstruct(%x1.5, %y1.5, %x2.5, %y2.5)
          %2704 : Tensor = aten::stack(%2703, %52) # /home/kelechi/detectron2/detectron2/structures/boxes.py:197:22
           = prim::SetAttr[name="tensor"](%boxes.43, %2704)
          %tensor.24 : Tensor = prim::GetAttr[name="tensor"](%boxes.43)
          %2706 : Tensor = aten::slice(%tensor.24, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:210:17
          %2707 : Tensor = aten::select(%2706, %44, %36) # /home/kelechi/detectron2/detectron2/structures/boxes.py:210:17
          %2708 : Tensor = aten::slice(%tensor.24, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:210:29
          %2709 : Tensor = aten::select(%2708, %44, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:210:29
          %widths.3 : Tensor = aten::sub(%2707, %2709, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:210:17
          %2711 : Tensor = aten::slice(%tensor.24, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:211:18
          %2712 : Tensor = aten::select(%2711, %44, %35) # /home/kelechi/detectron2/detectron2/structures/boxes.py:211:18
          %2713 : Tensor = aten::slice(%tensor.24, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:211:30
          %2714 : Tensor = aten::select(%2713, %44, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:211:30
          %heights.3 : Tensor = aten::sub(%2712, %2714, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:211:18
          %2716 : Tensor = aten::gt(%widths.3, %min_box_size) # /home/kelechi/detectron2/detectron2/structures/boxes.py:212:16
          %2717 : Tensor = aten::gt(%heights.3, %min_box_size) # /home/kelechi/detectron2/detectron2/structures/boxes.py:212:39
          %keep.2 : Tensor = aten::__and__(%2716, %2717) # /home/kelechi/detectron2/detectron2/structures/boxes.py:212:16
          %2719 : Tensor = aten::sum(%keep.2, %57) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:118:28
          %2720 : Scalar = aten::item(%2719) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:118:28
          %tensor.30 : Tensor = prim::GetAttr[name="tensor"](%boxes.43)
          %2722 : int[] = aten::size(%tensor.30) # <string>:13:9
          %2723 : int = aten::__getitem__(%2722, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:240:15
          %2724 : bool = aten::ne(%2720, %2723) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:118:28
          %boxes.18 : __torch__.detectron2.structures.boxes.Boxes, %scores_per_img : Tensor, %lvl : Tensor = prim::If(%2724) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:118:8
            block0():
              %tensor.34 : Tensor = prim::GetAttr[name="tensor"](%boxes.43)
              %2729 : Tensor?[] = prim::ListConstruct(%keep.2)
              %b.4 : Tensor = aten::index(%tensor.34, %2729) # /home/kelechi/detectron2/detectron2/structures/boxes.py:235:12
              %2731 : int = aten::dim(%b.4) # /home/kelechi/detectron2/detectron2/structures/boxes.py:236:15
              %2732 : bool = aten::eq(%2731, %36) # /home/kelechi/detectron2/detectron2/structures/boxes.py:236:15
               = prim::If(%2732) # /home/kelechi/detectron2/detectron2/structures/boxes.py:236:8
                block0():
                  -> ()
                block1():
                  %2733 : str = aten::format(%23, %keep.2) # /home/kelechi/detectron2/detectron2/structures/boxes.py:236:29
                  %2734 : str = aten::add(%50, %2733) # /home/kelechi/detectron2/detectron2/structures/boxes.py:236:8
                   = prim::RaiseException(%2734, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:236:8
                  -> ()
              %boxes.27 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject() # /home/kelechi/detectron2/detectron2/structures/boxes.py:237:15
              %tensor.36 : Tensor = aten::to(%b.4, %22, %46, %46, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:150:21
              %2737 : int = aten::numel(%tensor.36) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:11
              %2738 : bool = aten::eq(%2737, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:11
              %tensor.38 : Tensor = prim::If(%2738) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:8
                block0():
                  %2740 : int[] = prim::ListConstruct(%52, %55)
                  %2741 : Tensor = aten::reshape(%tensor.36, %2740) # /home/kelechi/detectron2/detectron2/structures/boxes.py:154:21
                  %tensor.40 : Tensor = aten::to(%2741, %22, %46, %46, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:154:21
                  -> (%tensor.40)
                block1():
                  -> (%tensor.36)
              %2743 : int = aten::dim(%tensor.38) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
              %2744 : bool = aten::eq(%2743, %36) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
              %2745 : bool = prim::If(%2744) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
                block0():
                  %2746 : int = aten::size(%tensor.38, %52) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:37
                  %2747 : bool = aten::eq(%2746, %55) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:37
                  -> (%2747)
                block1():
                  -> (%46)
               = prim::If(%2745) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
                block0():
                  -> ()
                block1():
                  %2748 : int[] = aten::size(%tensor.38) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:59
                  %2749 : str = aten::str(%2748) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
                  %2750 : str = aten::add(%50, %2749) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
                   = prim::RaiseException(%2750, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
                  -> ()
               = prim::SetAttr[name="tensor"](%boxes.27, %tensor.38)
              %2751 : Tensor?[] = prim::ListConstruct(%keep.2)
              %scores_per_img.21 : Tensor = aten::index(%scores_per_img.37, %2751) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:119:54
              %2753 : Tensor?[] = prim::ListConstruct(%keep.2)
              %lvl.17 : Tensor = aten::index(%lvl.31, %2753) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:119:76
              -> (%boxes.27, %scores_per_img.21, %lvl.17)
            block1():
              -> (%boxes.43, %scores_per_img.37, %lvl.31)
          %tensor.61 : Tensor = prim::GetAttr[name="tensor"](%boxes.18)
          %2756 : int[] = aten::size(%tensor.61) # <string>:13:9
          %2757 : int = aten::__getitem__(%2756, %52) # /home/kelechi/detectron2/detectron2/layers/nms.py:17:11
          %2758 : bool = aten::eq(%2757, %55) # /home/kelechi/detectron2/detectron2/layers/nms.py:17:11
           = prim::If(%2758) # /home/kelechi/detectron2/detectron2/layers/nms.py:17:4
            block0():
              -> ()
            block1():
               = prim::RaiseException(%50, %57) # /home/kelechi/detectron2/detectron2/layers/nms.py:17:4
              -> ()
          %2759 : Tensor = aten::to(%tensor.61, %22, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/nms.py:22:31
          %2760 : int = aten::numel(%2759) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:72:7
          %2761 : Device = prim::device(%2759)
          %2762 : str = prim::type(%2761)
          %2763 : bool = aten::eq(%2762, %25) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:72:32
          %2764 : int = prim::If(%2763) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:72:24
            block0():
              -> (%26)
            block1():
              -> (%27)
          %2765 : bool = aten::gt(%2760, %2764) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:72:7
          %keep.19 : Tensor = prim::If(%2765) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:72:4
            block0():
              %keep_mask.2 : Tensor = aten::zeros_like(%scores_per_img, %28, %57, %57, %57, %57) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:106:16
              %output.4 : Tensor, %inverse_indices.4 : Tensor, %counts.4 : Tensor = aten::_unique2(%lvl, %58, %46, %46) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/functional.py:911:42
              %2771 : (Tensor, Tensor, Tensor) = prim::TupleConstruct(%output.4, %inverse_indices.4, %counts.4)
              %output.6 : Tensor, %2773 : Tensor, %2774 : Tensor = prim::TupleUnpack(%2771)
              %2775 : int = aten::len(%output.6) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:107:4
               = prim::Loop(%2775, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:107:4
                block0(%2776 : int):
                  %class_id.2 : Tensor = aten::select(%output.6, %49, %2776) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:107:4
                  %2778 : Tensor = aten::eq(%lvl, %class_id.2) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:108:35
                  %2779 : Tensor[] = aten::where(%2778) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:108:23
                  %curr_indices.2 : Tensor = aten::__getitem__(%2779, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:108:23
                  %2781 : Tensor?[] = prim::ListConstruct(%curr_indices.2)
                  %2782 : Tensor = aten::index(%2759, %2781) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:109:32
                  %2783 : Tensor?[] = prim::ListConstruct(%curr_indices.2)
                  %2784 : Tensor = aten::index(%scores_per_img, %2783) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:109:53
                  %curr_keep_indices.2 : Tensor = torchvision::nms(%2782, %2784, %nms_thresh) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:41:11
                  %2786 : Tensor?[] = prim::ListConstruct(%curr_keep_indices.2)
                  %2787 : Tensor = aten::index(%curr_indices.2, %2786) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:110:18
                  %2788 : int = prim::dtype(%keep_mask.2)
                  %2789 : Device = prim::device(%keep_mask.2)
                  %2790 : Tensor = aten::tensor(%58, %2788, %2789, %46)
                  %2791 : Tensor?[] = prim::ListConstruct(%2787)
                  %2792 : Tensor = aten::index_put_(%keep_mask.2, %2791, %2790, %46) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:110:8
                  -> (%58)
              %2793 : Tensor[] = aten::where(%keep_mask.2) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:111:19
              %keep_indices.2 : Tensor = aten::__getitem__(%2793, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:111:19
              %2795 : Tensor?[] = prim::ListConstruct(%keep_indices.2)
              %2796 : Tensor = aten::index(%scores_per_img, %2795) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:112:24
              %2797 : Tensor, %2798 : Tensor = aten::sort(%2796, %52, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:112:24
              %2799 : Tensor?[] = prim::ListConstruct(%2798)
              %2800 : Tensor = aten::index(%keep_indices.2, %2799) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:112:11
              -> (%2800)
            block1():
              %2801 : int = aten::numel(%2759) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:89:7
              %2802 : bool = aten::eq(%2801, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:89:7
              %2803 : Tensor = prim::If(%2802) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:89:4
                block0():
                  %2804 : Device = prim::device(%2759)
                  %2805 : int[] = prim::ListConstruct(%49)
                  %2806 : Tensor = aten::empty(%2805, %55, %57, %2804, %57, %57) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:90:15
                  -> (%2806)
                block1():
                  %max_coordinate.4 : Tensor = aten::max(%2759) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:91:21
                  %2808 : Tensor = aten::to(%lvl, %2759, %46, %46, %57) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:92:14
                  %2809 : Tensor = aten::tensor(%44, %57, %57, %46) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:92:49
                  %2810 : Tensor = aten::to(%2809, %2759, %46, %46, %57) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:92:49
                  %2811 : Tensor = aten::add(%max_coordinate.4, %2810, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:92:32
                  %offsets.4 : Tensor = aten::mul(%2808, %2811) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:92:14
                  %2813 : Tensor = aten::slice(%offsets.4, %49, %57, %57, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:93:28
                  %2814 : Tensor = aten::unsqueeze(%2813, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:93:28
                  %boxes_for_nms.4 : Tensor = aten::add(%2759, %2814, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:93:20
                  %keep.4 : Tensor = torchvision::nms(%boxes_for_nms.4, %scores_per_img, %nms_thresh) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:41:11
                  -> (%keep.4)
              -> (%2803)
          %keep.23 : Tensor = aten::slice(%keep.19, %49, %57, %2568, %44) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:129:15
          %res.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = prim::CreateObject() # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:131:14
           = prim::SetAttr[name="image_size"](%res.1, %image_size.1)
           = prim::SetAttr[name="_field_names"](%res.1, %29)
           = prim::SetAttr[name="_proposal_boxes"](%res.1, %57)
           = prim::SetAttr[name="_objectness_logits"](%res.1, %57)
           = prim::SetAttr[name="_pred_boxes"](%res.1, %57)
           = prim::SetAttr[name="_scores"](%res.1, %57)
           = prim::SetAttr[name="_pred_classes"](%res.1, %57)
           = prim::SetAttr[name="_pred_masks"](%res.1, %57)
           = prim::SetAttr[name="_pred_keypoints"](%res.1, %57)
           = prim::SetAttr[name="_pred_keypoint_heatmaps"](%res.1, %57)
          %tensor.65 : Tensor = prim::GetAttr[name="tensor"](%boxes.18)
          %2820 : Tensor?[] = prim::ListConstruct(%keep.23)
          %b.3 : Tensor = aten::index(%tensor.65, %2820) # /home/kelechi/detectron2/detectron2/structures/boxes.py:235:12
          %2822 : int = aten::dim(%b.3) # /home/kelechi/detectron2/detectron2/structures/boxes.py:236:15
          %2823 : bool = aten::eq(%2822, %36) # /home/kelechi/detectron2/detectron2/structures/boxes.py:236:15
           = prim::If(%2823) # /home/kelechi/detectron2/detectron2/structures/boxes.py:236:8
            block0():
              -> ()
            block1():
              %2824 : str = aten::format(%23, %keep.23) # /home/kelechi/detectron2/detectron2/structures/boxes.py:236:29
              %2825 : str = aten::add(%50, %2824) # /home/kelechi/detectron2/detectron2/structures/boxes.py:236:8
               = prim::RaiseException(%2825, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:236:8
              -> ()
          %2826 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject() # /home/kelechi/detectron2/detectron2/structures/boxes.py:237:15
          %tensor.53 : Tensor = aten::to(%b.3, %22, %46, %46, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:150:21
          %2828 : int = aten::numel(%tensor.53) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:11
          %2829 : bool = aten::eq(%2828, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:11
          %tensor.67 : Tensor = prim::If(%2829) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:8
            block0():
              %2831 : int[] = prim::ListConstruct(%52, %55)
              %2832 : Tensor = aten::reshape(%tensor.53, %2831) # /home/kelechi/detectron2/detectron2/structures/boxes.py:154:21
              %tensor.57 : Tensor = aten::to(%2832, %22, %46, %46, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:154:21
              -> (%tensor.57)
            block1():
              -> (%tensor.53)
          %2834 : int = aten::dim(%tensor.67) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
          %2835 : bool = aten::eq(%2834, %36) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
          %2836 : bool = prim::If(%2835) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
            block0():
              %2837 : int = aten::size(%tensor.67, %52) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:37
              %2838 : bool = aten::eq(%2837, %55) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:37
              -> (%2838)
            block1():
              -> (%46)
           = prim::If(%2836) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
            block0():
              -> ()
            block1():
              %2839 : int[] = aten::size(%tensor.67) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:59
              %2840 : str = aten::str(%2839) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
              %2841 : str = aten::add(%50, %2840) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
               = prim::RaiseException(%2841, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
              -> ()
           = prim::SetAttr[name="tensor"](%2826, %tensor.67)
           = prim::SetAttr[name="_proposal_boxes"](%res.1, %2826)
          %2842 : Tensor?[] = prim::ListConstruct(%keep.23)
          %2843 : Tensor = aten::index(%scores_per_img, %2842) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:133:32
           = prim::SetAttr[name="_objectness_logits"](%res.1, %2843)
          %2844 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = aten::append(%proposals.1, %res.1) # /home/kelechi/detectron2/detectron2/modeling/proposal_generator/proposal_utils.py:134:8
          -> (%58)
      %2845 : Tensor = prim::Exit(%2463)
      %2846 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], Dict(str, Tensor)) = prim::TupleConstruct(%proposals.1, %losses.1)
      %proposals.2 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], %2848 : Dict(str, Tensor) = prim::TupleUnpack(%2846)
      %roi_heads.1 : __torch__.detectron2.modeling.roi_heads.roi_heads.StandardROIHeads = prim::GetAttr[name="roi_heads"](%model)
      %features.6 : Tensor[] = prim::ListConstruct()
      %box_in_features : str[] = prim::GetAttr[name="box_in_features"](%roi_heads.1)
      %2852 : int = aten::len(%box_in_features) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:797:19
       = prim::Loop(%2852, %58) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:797:19
        block0(%2853 : int):
          %f.2 : str = aten::__getitem__(%box_in_features, %2853) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:797:19
          %2855 : Tensor = aten::__getitem__(%features.1, %f.2) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:797:20
          %2856 : Tensor[] = aten::append(%features.6, %2855) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:797:19
          -> (%58)
      %box_pooler : __torch__.detectron2.modeling.poolers.ROIPooler = prim::GetAttr[name="box_pooler"](%roi_heads.1)
      %2858 : __torch__.detectron2.structures.boxes.Boxes[] = prim::ListConstruct()
      %2859 : int = aten::len(%proposals.2) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:798:49
       = prim::Loop(%2859, %58) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:798:49
        block0(%2860 : int):
          %x.8 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%proposals.2, %2860) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:798:49
          %2862 : __torch__.detectron2.structures.boxes.Boxes = prim::Uninitialized()
          %_proposal_boxes.3 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_proposal_boxes"](%x.8)
          %2864 : bool = aten::__isnot__(%_proposal_boxes.3, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:31:15
          %t.2 : __torch__.detectron2.structures.boxes.Boxes = prim::If(%2864) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:31:8
            block0():
              %t.8 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_proposal_boxes.3)
              -> (%t.8)
            block1():
               = prim::RaiseException(%19, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:31:8
              -> (%2862)
          %2867 : __torch__.detectron2.structures.boxes.Boxes[] = aten::append(%2858, %t.2) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:798:49
          -> (%58)
      %2868 : int = aten::len(%2858) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:240:11
      %2869 : bool = aten::eq(%2868, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:240:11
      %box_features.1 : Tensor = prim::If(%2869) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:240:8
        block0():
          %2871 : Tensor = aten::__getitem__(%features.6, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:241:39
          %2872 : int[] = aten::size(%2871) # <string>:13:9
          %2873 : int = aten::__getitem__(%2872, %44) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:241:39
          %output_size.2 : (int, int) = prim::GetAttr[name="output_size"](%box_pooler)
          %2875 : int, %2876 : int = prim::TupleUnpack(%output_size.2)
          %2877 : Tensor = aten::__getitem__(%features.6, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:241:73
          %2878 : int = prim::dtype(%2877)
          %2879 : Device = prim::device(%2877)
          %2880 : int[] = prim::ListConstruct(%49, %2873, %2875, %2876)
          %2881 : Tensor = aten::zeros(%2880, %2878, %57, %2879, %57) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:111:11
          -> (%2881)
        block1():
          %2882 : Tensor[] = prim::ListConstruct()
          %2883 : int = aten::len(%2858) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:95:22
           = prim::Loop(%2883, %58) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:95:22
            block0(%2884 : int):
              %x.24 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%2858, %2884) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:95:22
              %tensor.16 : Tensor = prim::GetAttr[name="tensor"](%x.24)
              %2887 : Tensor[] = aten::append(%2882, %tensor.16) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:95:22
              -> (%58)
          %boxes.6 : Tensor = aten::cat(%2882, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:95:12
          %2889 : int[] = prim::ListConstruct()
          %2890 : int = aten::len(%2858) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:97:29
           = prim::Loop(%2890, %58) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:97:29
            block0(%2891 : int):
              %x.20 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%2858, %2891) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:97:29
              %tensor.20 : Tensor = prim::GetAttr[name="tensor"](%x.20)
              %2894 : int[] = aten::size(%tensor.20) # <string>:13:9
              %2895 : int = aten::__getitem__(%2894, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:240:15
              %2896 : int[] = aten::append(%2889, %2895) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:97:29
              -> (%58)
          %sizes.2 : Tensor = aten::as_tensor(%2889, %57, %57) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:29:15
          %2898 : Device = prim::device(%boxes.6)
          %sizes.6 : Tensor = aten::to(%sizes.2, %57, %57, %2898, %57, %46, %46, %57) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:65:12
          %2900 : int = aten::len(%sizes.6) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:67:21
          %2901 : int = prim::dtype(%boxes.6)
          %2902 : Device = prim::device(%boxes.6)
          %2903 : Tensor = aten::arange(%2900, %2901, %57, %2902, %57) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:67:8
          %indices.3 : Tensor = aten::repeat_interleave(%2903, %sizes.6, %57, %57) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:66:14
          %2905 : Tensor = aten::slice(%indices.3, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:69:16
          %2906 : Tensor = aten::unsqueeze(%2905, %44) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:69:16
          %2907 : Tensor[] = prim::ListConstruct(%2906, %boxes.6)
          %pooler_fmt_boxes.14 : Tensor = aten::cat(%2907, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:72:11
          %min_level.6 : int = prim::GetAttr[name="min_level"](%box_pooler)
          %max_level.6 : int = prim::GetAttr[name="max_level"](%box_pooler)
          %canonical_box_size.6 : int = prim::GetAttr[name="canonical_box_size"](%box_pooler)
          %canonical_level.6 : int = prim::GetAttr[name="canonical_level"](%box_pooler)
          %2913 : Tensor[] = prim::ListConstruct()
          %2914 : int = aten::len(%2858) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:51:31
           = prim::Loop(%2914, %58) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:51:31
            block0(%2915 : int):
              %boxes.4 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%2858, %2915) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:51:31
              %tensor.22 : Tensor = prim::GetAttr[name="tensor"](%boxes.4)
              %2918 : Tensor = aten::slice(%tensor.22, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:16
              %2919 : Tensor = aten::select(%2918, %44, %36) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:16
              %2920 : Tensor = aten::slice(%tensor.22, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:28
              %2921 : Tensor = aten::select(%2920, %44, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:28
              %2922 : Tensor = aten::sub(%2919, %2921, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:16
              %2923 : Tensor = aten::slice(%tensor.22, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:42
              %2924 : Tensor = aten::select(%2923, %44, %35) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:42
              %2925 : Tensor = aten::slice(%tensor.22, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:54
              %2926 : Tensor = aten::select(%2925, %44, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:54
              %2927 : Tensor = aten::sub(%2924, %2926, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:42
              %area.2 : Tensor = aten::mul(%2922, %2927) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:16
              %2929 : Tensor[] = aten::append(%2913, %area.2) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:51:31
              -> (%58)
          %2930 : int = aten::len(%2913) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:7
          %2931 : bool = aten::eq(%2930, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:7
          %2932 : Tensor = prim::If(%2931) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:4
            block0():
              %2933 : Tensor = aten::__getitem__(%2913, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:71:15
              -> (%2933)
            block1():
              %2934 : Tensor = aten::cat(%2913, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:72:11
              -> (%2934)
          %box_sizes.2 : Tensor = aten::sqrt(%2932) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:51:16
          %2936 : Tensor = aten::div(%box_sizes.2, %canonical_box_size.6) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:54:37
          %2937 : Tensor = aten::add(%2936, %16, %44) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:54:37
          %2938 : Tensor = aten::log2(%2937) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:54:26
          %2939 : Tensor = aten::add(%2938, %canonical_level.6, %44) # <string>:5:9
          %level_assignments.2 : Tensor = aten::floor(%2939) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:53:24
          %level_assignments.6 : Tensor = aten::clamp(%level_assignments.2, %min_level.6, %max_level.6) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:58:24
          %2942 : Tensor = aten::to(%level_assignments.6, %55, %46, %46, %57) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:59:11
          %level_assignments.14 : Tensor = aten::sub(%2942, %min_level.6, %44) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:59:11
          %2944 : Tensor = aten::__getitem__(%features.6, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:252:23
          %2945 : int[] = aten::size(%2944) # <string>:13:9
          %num_channels.8 : int = aten::__getitem__(%2945, %44) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:252:23
          %output_size.18 : (int, int) = prim::GetAttr[name="output_size"](%box_pooler)
          %output_size.22 : int = prim::TupleIndex(%output_size.18, %49)
          %2949 : Tensor = aten::__getitem__(%features.6, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:255:89
          %2950 : int[] = aten::size(%pooler_fmt_boxes.14) # <string>:13:9
          %2951 : int = aten::__getitem__(%2950, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:109:14
          %2952 : int = prim::dtype(%2949)
          %2953 : Device = prim::device(%2949)
          %2954 : int[] = prim::ListConstruct(%2951, %num_channels.8, %output_size.22, %output_size.22)
          %output.16 : Tensor = aten::zeros(%2954, %2952, %57, %2953, %57) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:111:11
          %level_poolers.14 : __torch__.torch.nn.modules.container.___torch_mangle_38.ModuleList = prim::GetAttr[name="level_poolers"](%box_pooler)
          %_0.12 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="0"](%level_poolers.14)
          %_1.12 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="1"](%level_poolers.14)
          %_2.12 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="2"](%level_poolers.14)
          %_3.12 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="3"](%level_poolers.14)
          %2961 : Tensor = aten::eq(%level_assignments.14, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:258:33
          %2962 : int = aten::dim(%2961) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:11
          %2963 : bool = aten::eq(%2962, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:11
          %2964 : Tensor[] = prim::If(%2963) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:8
            block0():
              %2965 : Tensor = aten::unsqueeze(%2961, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              %2966 : Tensor = aten::nonzero(%2965) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              %2967 : Tensor[] = aten::unbind(%2966, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              -> (%2967)
            block1():
              %2968 : Tensor = aten::nonzero(%2961) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:166:15
              %2969 : Tensor[] = aten::unbind(%2968, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:166:15
              -> (%2969)
          %inds.56 : Tensor = aten::__getitem__(%2964, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:258:19
          %2971 : Tensor?[] = prim::ListConstruct(%inds.56)
          %pooler_fmt_boxes_level.32 : Tensor = aten::index(%pooler_fmt_boxes.14, %2971) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:259:37
          %2973 : Tensor = aten::__getitem__(%features.6, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:261:46
          %2974 : int = aten::dim(%pooler_fmt_boxes_level.32) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
          %2975 : bool = aten::eq(%2974, %36) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
          %2976 : bool = prim::If(%2975) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
            block0():
              %2977 : int = aten::size(%pooler_fmt_boxes_level.32, %44) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:35
              %2978 : bool = aten::eq(%2977, %40) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:35
              -> (%2978)
            block1():
              -> (%46)
           = prim::If(%2976) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%50, %57) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:8
              -> ()
          %2979 : bool = prim::is_quantized(%2973)
          %input.11 : Tensor = prim::If(%2979) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:56:8
            block0():
              %input.13 : Tensor = aten::dequantize(%2973) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:57:20
              -> (%input.13)
            block1():
              -> (%2973)
          %2982 : int = prim::dtype(%input.11)
          %2983 : Tensor = aten::to(%pooler_fmt_boxes_level.32, %2982, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:60:12
          %output_size.24 : (int, int) = prim::GetAttr[name="output_size"](%_0.12)
          %spatial_scale.4 : float = prim::GetAttr[name="spatial_scale"](%_0.12)
          %sampling_ratio.4 : int = prim::GetAttr[name="sampling_ratio"](%_0.12)
          %aligned.4 : bool = prim::GetAttr[name="aligned"](%_0.12)
          %2988 : int, %2989 : int = prim::TupleUnpack(%output_size.24)
          %2990 : bool = prim::isinstance[types=[list, tuple]](%2983)
           = prim::If(%2990) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:4
            block0():
              %boxes.11 : Tensor[] = prim::unchecked_cast(%2983)
              %2992 : int = aten::len(%boxes.11) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
               = prim::Loop(%2992, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
                block0(%2993 : int):
                  %_tensor.5 : Tensor = aten::__getitem__(%boxes.11, %2993) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
                  %2995 : int = aten::size(%_tensor.5, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:32:16
                  %2996 : bool = aten::eq(%2995, %55) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:32:16
                   = prim::If(%2996) # <string>:8:2
                    block0():
                      -> ()
                    block1():
                       = prim::RaiseException(%17, %57) # <string>:8:2
                      -> ()
                  -> (%58)
              -> ()
            block1():
              %2997 : int = aten::size(%2983, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:35:22
              %2998 : bool = aten::eq(%2997, %40) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:35:22
               = prim::If(%2998) # <string>:8:2
                block0():
                  -> ()
                block1():
                   = prim::RaiseException(%18, %57) # <string>:8:2
                  -> ()
              -> ()
          %2999 : bool = prim::isinstance[types=[Tensor]](%2983)
          %3000 : bool = aten::__not__(%2999) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:249:7
          %rois.15 : Tensor = prim::If(%3000) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:249:4
            block0():
              %rois.17 : Tensor[] = prim::unchecked_cast(%2983)
              %3003 : Tensor[] = prim::ListConstruct()
              %3004 : int = aten::len(%rois.17) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
               = prim::Loop(%3004, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                block0(%3005 : int):
                  %b.9 : Tensor = aten::__getitem__(%rois.17, %3005) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                  %3007 : Tensor[] = aten::append(%3003, %b.9) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                  -> (%58)
              %3008 : int = aten::len(%3003) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %3009 : bool = aten::eq(%3008, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %concat_boxes.5 : Tensor = prim::If(%3009) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:4
                block0():
                  %3011 : Tensor = aten::__getitem__(%3003, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:15
                  -> (%3011)
                block1():
                  %3012 : Tensor = aten::cat(%3003, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:15:11
                  -> (%3012)
              %3013 : Tensor[] = prim::ListConstruct()
              %3014 : int = aten::len(%rois.17) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
              %3015 : int[] = prim::ListConstruct(%48, %3014)
              %3016 : int = prim::min(%3015) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
               = prim::Loop(%3016, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
                block0(%i.13 : int):
                  %b.11 : Tensor = aten::__getitem__(%rois.17, %i.13) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
                  %3019 : Tensor = aten::slice(%b.11, %49, %57, %57, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:36
                  %3020 : Tensor = aten::slice(%3019, %44, %57, %44, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:36
                  %3021 : Tensor = aten::full_like(%3020, %i.13, %57, %57, %57, %57, %57) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:20
                  %3022 : Tensor[] = aten::append(%3013, %3021) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:8
                  -> (%58)
              %3023 : int = aten::len(%3013) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %3024 : bool = aten::eq(%3023, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %ids.5 : Tensor = prim::If(%3024) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:4
                block0():
                  %3026 : Tensor = aten::__getitem__(%3013, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:15
                  -> (%3026)
                block1():
                  %3027 : Tensor = aten::cat(%3013, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:15:11
                  -> (%3027)
              %3028 : Tensor[] = prim::ListConstruct(%ids.5, %concat_boxes.5)
              %rois.19 : Tensor = aten::cat(%3028, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:24:11
              -> (%rois.19)
            block1():
              -> (%2983)
          %3030 : Tensor = torchvision::roi_align(%input.11, %rois.15, %spatial_scale.4, %2988, %2989, %sampling_ratio.4, %aligned.4) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:257:11
          %3031 : Tensor?[] = prim::ListConstruct(%inds.56)
          %3032 : Tensor = aten::index_put_(%output.16, %3031, %3030, %46) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:261:12
          %3033 : Tensor = aten::eq(%level_assignments.14, %44) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:258:33
          %3034 : int = aten::dim(%3033) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:11
          %3035 : bool = aten::eq(%3034, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:11
          %3036 : Tensor[] = prim::If(%3035) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:8
            block0():
              %3037 : Tensor = aten::unsqueeze(%3033, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              %3038 : Tensor = aten::nonzero(%3037) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              %3039 : Tensor[] = aten::unbind(%3038, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              -> (%3039)
            block1():
              %3040 : Tensor = aten::nonzero(%3033) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:166:15
              %3041 : Tensor[] = aten::unbind(%3040, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:166:15
              -> (%3041)
          %inds.60 : Tensor = aten::__getitem__(%3036, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:258:19
          %3043 : Tensor?[] = prim::ListConstruct(%inds.60)
          %pooler_fmt_boxes_level.36 : Tensor = aten::index(%pooler_fmt_boxes.14, %3043) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:259:37
          %3045 : Tensor = aten::__getitem__(%features.6, %44) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:261:46
          %3046 : int = aten::dim(%pooler_fmt_boxes_level.36) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
          %3047 : bool = aten::eq(%3046, %36) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
          %3048 : bool = prim::If(%3047) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
            block0():
              %3049 : int = aten::size(%pooler_fmt_boxes_level.36, %44) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:35
              %3050 : bool = aten::eq(%3049, %40) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:35
              -> (%3050)
            block1():
              -> (%46)
           = prim::If(%3048) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%50, %57) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:8
              -> ()
          %3051 : bool = prim::is_quantized(%3045)
          %input.15 : Tensor = prim::If(%3051) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:56:8
            block0():
              %input.17 : Tensor = aten::dequantize(%3045) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:57:20
              -> (%input.17)
            block1():
              -> (%3045)
          %3054 : int = prim::dtype(%input.15)
          %3055 : Tensor = aten::to(%pooler_fmt_boxes_level.36, %3054, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:60:12
          %output_size.26 : (int, int) = prim::GetAttr[name="output_size"](%_1.12)
          %spatial_scale.6 : float = prim::GetAttr[name="spatial_scale"](%_1.12)
          %sampling_ratio.6 : int = prim::GetAttr[name="sampling_ratio"](%_1.12)
          %aligned.6 : bool = prim::GetAttr[name="aligned"](%_1.12)
          %3060 : int, %3061 : int = prim::TupleUnpack(%output_size.26)
          %3062 : bool = prim::isinstance[types=[list, tuple]](%3055)
           = prim::If(%3062) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:4
            block0():
              %boxes.13 : Tensor[] = prim::unchecked_cast(%3055)
              %3064 : int = aten::len(%boxes.13) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
               = prim::Loop(%3064, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
                block0(%3065 : int):
                  %_tensor.7 : Tensor = aten::__getitem__(%boxes.13, %3065) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
                  %3067 : int = aten::size(%_tensor.7, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:32:16
                  %3068 : bool = aten::eq(%3067, %55) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:32:16
                   = prim::If(%3068) # <string>:8:2
                    block0():
                      -> ()
                    block1():
                       = prim::RaiseException(%17, %57) # <string>:8:2
                      -> ()
                  -> (%58)
              -> ()
            block1():
              %3069 : int = aten::size(%3055, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:35:22
              %3070 : bool = aten::eq(%3069, %40) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:35:22
               = prim::If(%3070) # <string>:8:2
                block0():
                  -> ()
                block1():
                   = prim::RaiseException(%18, %57) # <string>:8:2
                  -> ()
              -> ()
          %3071 : bool = prim::isinstance[types=[Tensor]](%3055)
          %3072 : bool = aten::__not__(%3071) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:249:7
          %rois.21 : Tensor = prim::If(%3072) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:249:4
            block0():
              %rois.23 : Tensor[] = prim::unchecked_cast(%3055)
              %3075 : Tensor[] = prim::ListConstruct()
              %3076 : int = aten::len(%rois.23) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
               = prim::Loop(%3076, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                block0(%3077 : int):
                  %b.13 : Tensor = aten::__getitem__(%rois.23, %3077) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                  %3079 : Tensor[] = aten::append(%3075, %b.13) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                  -> (%58)
              %3080 : int = aten::len(%3075) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %3081 : bool = aten::eq(%3080, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %concat_boxes.7 : Tensor = prim::If(%3081) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:4
                block0():
                  %3083 : Tensor = aten::__getitem__(%3075, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:15
                  -> (%3083)
                block1():
                  %3084 : Tensor = aten::cat(%3075, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:15:11
                  -> (%3084)
              %3085 : Tensor[] = prim::ListConstruct()
              %3086 : int = aten::len(%rois.23) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
              %3087 : int[] = prim::ListConstruct(%48, %3086)
              %3088 : int = prim::min(%3087) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
               = prim::Loop(%3088, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
                block0(%i.7 : int):
                  %b.15 : Tensor = aten::__getitem__(%rois.23, %i.7) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
                  %3091 : Tensor = aten::slice(%b.15, %49, %57, %57, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:36
                  %3092 : Tensor = aten::slice(%3091, %44, %57, %44, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:36
                  %3093 : Tensor = aten::full_like(%3092, %i.7, %57, %57, %57, %57, %57) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:20
                  %3094 : Tensor[] = aten::append(%3085, %3093) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:8
                  -> (%58)
              %3095 : int = aten::len(%3085) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %3096 : bool = aten::eq(%3095, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %ids.7 : Tensor = prim::If(%3096) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:4
                block0():
                  %3098 : Tensor = aten::__getitem__(%3085, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:15
                  -> (%3098)
                block1():
                  %3099 : Tensor = aten::cat(%3085, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:15:11
                  -> (%3099)
              %3100 : Tensor[] = prim::ListConstruct(%ids.7, %concat_boxes.7)
              %rois.25 : Tensor = aten::cat(%3100, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:24:11
              -> (%rois.25)
            block1():
              -> (%3055)
          %3102 : Tensor = torchvision::roi_align(%input.15, %rois.21, %spatial_scale.6, %3060, %3061, %sampling_ratio.6, %aligned.6) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:257:11
          %3103 : Tensor?[] = prim::ListConstruct(%inds.60)
          %3104 : Tensor = aten::index_put_(%output.16, %3103, %3102, %46) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:261:12
          %3105 : Tensor = aten::eq(%level_assignments.14, %36) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:258:33
          %3106 : int = aten::dim(%3105) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:11
          %3107 : bool = aten::eq(%3106, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:11
          %3108 : Tensor[] = prim::If(%3107) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:8
            block0():
              %3109 : Tensor = aten::unsqueeze(%3105, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              %3110 : Tensor = aten::nonzero(%3109) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              %3111 : Tensor[] = aten::unbind(%3110, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              -> (%3111)
            block1():
              %3112 : Tensor = aten::nonzero(%3105) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:166:15
              %3113 : Tensor[] = aten::unbind(%3112, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:166:15
              -> (%3113)
          %inds.64 : Tensor = aten::__getitem__(%3108, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:258:19
          %3115 : Tensor?[] = prim::ListConstruct(%inds.64)
          %pooler_fmt_boxes_level.40 : Tensor = aten::index(%pooler_fmt_boxes.14, %3115) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:259:37
          %3117 : Tensor = aten::__getitem__(%features.6, %36) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:261:46
          %3118 : int = aten::dim(%pooler_fmt_boxes_level.40) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
          %3119 : bool = aten::eq(%3118, %36) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
          %3120 : bool = prim::If(%3119) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
            block0():
              %3121 : int = aten::size(%pooler_fmt_boxes_level.40, %44) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:35
              %3122 : bool = aten::eq(%3121, %40) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:35
              -> (%3122)
            block1():
              -> (%46)
           = prim::If(%3120) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%50, %57) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:8
              -> ()
          %3123 : bool = prim::is_quantized(%3117)
          %input.19 : Tensor = prim::If(%3123) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:56:8
            block0():
              %input.21 : Tensor = aten::dequantize(%3117) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:57:20
              -> (%input.21)
            block1():
              -> (%3117)
          %3126 : int = prim::dtype(%input.19)
          %3127 : Tensor = aten::to(%pooler_fmt_boxes_level.40, %3126, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:60:12
          %output_size.28 : (int, int) = prim::GetAttr[name="output_size"](%_2.12)
          %spatial_scale.8 : float = prim::GetAttr[name="spatial_scale"](%_2.12)
          %sampling_ratio.8 : int = prim::GetAttr[name="sampling_ratio"](%_2.12)
          %aligned.8 : bool = prim::GetAttr[name="aligned"](%_2.12)
          %3132 : int, %3133 : int = prim::TupleUnpack(%output_size.28)
          %3134 : bool = prim::isinstance[types=[list, tuple]](%3127)
           = prim::If(%3134) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:4
            block0():
              %boxes.15 : Tensor[] = prim::unchecked_cast(%3127)
              %3136 : int = aten::len(%boxes.15) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
               = prim::Loop(%3136, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
                block0(%3137 : int):
                  %_tensor.9 : Tensor = aten::__getitem__(%boxes.15, %3137) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
                  %3139 : int = aten::size(%_tensor.9, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:32:16
                  %3140 : bool = aten::eq(%3139, %55) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:32:16
                   = prim::If(%3140) # <string>:8:2
                    block0():
                      -> ()
                    block1():
                       = prim::RaiseException(%17, %57) # <string>:8:2
                      -> ()
                  -> (%58)
              -> ()
            block1():
              %3141 : int = aten::size(%3127, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:35:22
              %3142 : bool = aten::eq(%3141, %40) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:35:22
               = prim::If(%3142) # <string>:8:2
                block0():
                  -> ()
                block1():
                   = prim::RaiseException(%18, %57) # <string>:8:2
                  -> ()
              -> ()
          %3143 : bool = prim::isinstance[types=[Tensor]](%3127)
          %3144 : bool = aten::__not__(%3143) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:249:7
          %rois.27 : Tensor = prim::If(%3144) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:249:4
            block0():
              %rois.29 : Tensor[] = prim::unchecked_cast(%3127)
              %3147 : Tensor[] = prim::ListConstruct()
              %3148 : int = aten::len(%rois.29) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
               = prim::Loop(%3148, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                block0(%3149 : int):
                  %b.17 : Tensor = aten::__getitem__(%rois.29, %3149) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                  %3151 : Tensor[] = aten::append(%3147, %b.17) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                  -> (%58)
              %3152 : int = aten::len(%3147) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %3153 : bool = aten::eq(%3152, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %concat_boxes.9 : Tensor = prim::If(%3153) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:4
                block0():
                  %3155 : Tensor = aten::__getitem__(%3147, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:15
                  -> (%3155)
                block1():
                  %3156 : Tensor = aten::cat(%3147, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:15:11
                  -> (%3156)
              %3157 : Tensor[] = prim::ListConstruct()
              %3158 : int = aten::len(%rois.29) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
              %3159 : int[] = prim::ListConstruct(%48, %3158)
              %3160 : int = prim::min(%3159) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
               = prim::Loop(%3160, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
                block0(%i.9 : int):
                  %b.19 : Tensor = aten::__getitem__(%rois.29, %i.9) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
                  %3163 : Tensor = aten::slice(%b.19, %49, %57, %57, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:36
                  %3164 : Tensor = aten::slice(%3163, %44, %57, %44, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:36
                  %3165 : Tensor = aten::full_like(%3164, %i.9, %57, %57, %57, %57, %57) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:20
                  %3166 : Tensor[] = aten::append(%3157, %3165) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:8
                  -> (%58)
              %3167 : int = aten::len(%3157) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %3168 : bool = aten::eq(%3167, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %ids.9 : Tensor = prim::If(%3168) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:4
                block0():
                  %3170 : Tensor = aten::__getitem__(%3157, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:15
                  -> (%3170)
                block1():
                  %3171 : Tensor = aten::cat(%3157, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:15:11
                  -> (%3171)
              %3172 : Tensor[] = prim::ListConstruct(%ids.9, %concat_boxes.9)
              %rois.31 : Tensor = aten::cat(%3172, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:24:11
              -> (%rois.31)
            block1():
              -> (%3127)
          %3174 : Tensor = torchvision::roi_align(%input.19, %rois.27, %spatial_scale.8, %3132, %3133, %sampling_ratio.8, %aligned.8) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:257:11
          %3175 : Tensor?[] = prim::ListConstruct(%inds.64)
          %3176 : Tensor = aten::index_put_(%output.16, %3175, %3174, %46) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:261:12
          %3177 : Tensor = aten::eq(%level_assignments.14, %35) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:258:33
          %3178 : int = aten::dim(%3177) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:11
          %3179 : bool = aten::eq(%3178, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:11
          %3180 : Tensor[] = prim::If(%3179) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:8
            block0():
              %3181 : Tensor = aten::unsqueeze(%3177, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              %3182 : Tensor = aten::nonzero(%3181) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              %3183 : Tensor[] = aten::unbind(%3182, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              -> (%3183)
            block1():
              %3184 : Tensor = aten::nonzero(%3177) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:166:15
              %3185 : Tensor[] = aten::unbind(%3184, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:166:15
              -> (%3185)
          %inds.68 : Tensor = aten::__getitem__(%3180, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:258:19
          %3187 : Tensor?[] = prim::ListConstruct(%inds.68)
          %pooler_fmt_boxes_level.44 : Tensor = aten::index(%pooler_fmt_boxes.14, %3187) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:259:37
          %3189 : Tensor = aten::__getitem__(%features.6, %35) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:261:46
          %3190 : int = aten::dim(%pooler_fmt_boxes_level.44) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
          %3191 : bool = aten::eq(%3190, %36) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
          %3192 : bool = prim::If(%3191) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
            block0():
              %3193 : int = aten::size(%pooler_fmt_boxes_level.44, %44) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:35
              %3194 : bool = aten::eq(%3193, %40) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:35
              -> (%3194)
            block1():
              -> (%46)
           = prim::If(%3192) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%50, %57) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:8
              -> ()
          %3195 : bool = prim::is_quantized(%3189)
          %input.23 : Tensor = prim::If(%3195) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:56:8
            block0():
              %input.25 : Tensor = aten::dequantize(%3189) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:57:20
              -> (%input.25)
            block1():
              -> (%3189)
          %3198 : int = prim::dtype(%input.23)
          %3199 : Tensor = aten::to(%pooler_fmt_boxes_level.44, %3198, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:60:12
          %output_size.30 : (int, int) = prim::GetAttr[name="output_size"](%_3.12)
          %spatial_scale.10 : float = prim::GetAttr[name="spatial_scale"](%_3.12)
          %sampling_ratio.10 : int = prim::GetAttr[name="sampling_ratio"](%_3.12)
          %aligned.10 : bool = prim::GetAttr[name="aligned"](%_3.12)
          %3204 : int, %3205 : int = prim::TupleUnpack(%output_size.30)
          %3206 : bool = prim::isinstance[types=[list, tuple]](%3199)
           = prim::If(%3206) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:4
            block0():
              %boxes.8 : Tensor[] = prim::unchecked_cast(%3199)
              %3208 : int = aten::len(%boxes.8) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
               = prim::Loop(%3208, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
                block0(%3209 : int):
                  %_tensor.11 : Tensor = aten::__getitem__(%boxes.8, %3209) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
                  %3211 : int = aten::size(%_tensor.11, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:32:16
                  %3212 : bool = aten::eq(%3211, %55) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:32:16
                   = prim::If(%3212) # <string>:8:2
                    block0():
                      -> ()
                    block1():
                       = prim::RaiseException(%17, %57) # <string>:8:2
                      -> ()
                  -> (%58)
              -> ()
            block1():
              %3213 : int = aten::size(%3199, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:35:22
              %3214 : bool = aten::eq(%3213, %40) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:35:22
               = prim::If(%3214) # <string>:8:2
                block0():
                  -> ()
                block1():
                   = prim::RaiseException(%18, %57) # <string>:8:2
                  -> ()
              -> ()
          %3215 : bool = prim::isinstance[types=[Tensor]](%3199)
          %3216 : bool = aten::__not__(%3215) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:249:7
          %rois.33 : Tensor = prim::If(%3216) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:249:4
            block0():
              %rois.35 : Tensor[] = prim::unchecked_cast(%3199)
              %3219 : Tensor[] = prim::ListConstruct()
              %3220 : int = aten::len(%rois.35) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
               = prim::Loop(%3220, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                block0(%3221 : int):
                  %b.21 : Tensor = aten::__getitem__(%rois.35, %3221) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                  %3223 : Tensor[] = aten::append(%3219, %b.21) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                  -> (%58)
              %3224 : int = aten::len(%3219) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %3225 : bool = aten::eq(%3224, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %concat_boxes.11 : Tensor = prim::If(%3225) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:4
                block0():
                  %3227 : Tensor = aten::__getitem__(%3219, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:15
                  -> (%3227)
                block1():
                  %3228 : Tensor = aten::cat(%3219, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:15:11
                  -> (%3228)
              %3229 : Tensor[] = prim::ListConstruct()
              %3230 : int = aten::len(%rois.35) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
              %3231 : int[] = prim::ListConstruct(%48, %3230)
              %3232 : int = prim::min(%3231) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
               = prim::Loop(%3232, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
                block0(%i.11 : int):
                  %b.23 : Tensor = aten::__getitem__(%rois.35, %i.11) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
                  %3235 : Tensor = aten::slice(%b.23, %49, %57, %57, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:36
                  %3236 : Tensor = aten::slice(%3235, %44, %57, %44, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:36
                  %3237 : Tensor = aten::full_like(%3236, %i.11, %57, %57, %57, %57, %57) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:20
                  %3238 : Tensor[] = aten::append(%3229, %3237) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:8
                  -> (%58)
              %3239 : int = aten::len(%3229) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %3240 : bool = aten::eq(%3239, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %ids.11 : Tensor = prim::If(%3240) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:4
                block0():
                  %3242 : Tensor = aten::__getitem__(%3229, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:15
                  -> (%3242)
                block1():
                  %3243 : Tensor = aten::cat(%3229, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:15:11
                  -> (%3243)
              %3244 : Tensor[] = prim::ListConstruct(%ids.11, %concat_boxes.11)
              %rois.37 : Tensor = aten::cat(%3244, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:24:11
              -> (%rois.37)
            block1():
              -> (%3199)
          %3246 : Tensor = torchvision::roi_align(%input.23, %rois.33, %spatial_scale.10, %3204, %3205, %sampling_ratio.10, %aligned.10) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:257:11
          %3247 : Tensor?[] = prim::ListConstruct(%inds.68)
          %3248 : Tensor = aten::index_put_(%output.16, %3247, %3246, %46) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:261:12
          -> (%output.16)
      %box_head : __torch__.detectron2.modeling.roi_heads.box_head.FastRCNNConvFCHead = prim::GetAttr[name="box_head"](%roi_heads.1)
      %fc1 : __torch__.torch.nn.modules.linear.Linear = prim::GetAttr[name="fc1"](%box_head)
      %fc2 : __torch__.torch.nn.modules.linear.___torch_mangle_39.Linear = prim::GetAttr[name="fc2"](%box_head)
      %x.12 : Tensor = aten::flatten(%box_features.1, %44, %52) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/modules/flatten.py:50:15
      %weight.2 : Tensor = prim::GetAttr[name="weight"](%fc1)
      %bias.2 : Tensor = prim::GetAttr[name="bias"](%fc1)
      %x.9 : Tensor = aten::linear(%x.12, %weight.2, %bias.2) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/modules/linear.py:117:15
      %x.26 : Tensor = aten::relu(%x.9) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:1500:17
      %weight.4 : Tensor = prim::GetAttr[name="weight"](%fc2)
      %bias.4 : Tensor = prim::GetAttr[name="bias"](%fc2)
      %x.28 : Tensor = aten::linear(%x.26, %weight.4, %bias.4) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/modules/linear.py:117:15
      %box_features.5 : Tensor = aten::relu(%x.28) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:1500:17
      %box_predictor.1 : __torch__.detectron2.modeling.roi_heads.fast_rcnn.FastRCNNOutputLayers = prim::GetAttr[name="box_predictor"](%roi_heads.1)
      %3262 : int = aten::dim(%box_features.5) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:301:11
      %3263 : bool = aten::gt(%3262, %36) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:301:11
      %x : Tensor = prim::If(%3263) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:301:8
        block0():
          %x.16 : Tensor = aten::flatten(%box_features.5, %44, %52) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:302:16
          -> (%x.16)
        block1():
          -> (%box_features.5)
      %cls_score : __torch__.torch.nn.modules.linear.___torch_mangle_40.Linear = prim::GetAttr[name="cls_score"](%box_predictor.1)
      %weight.11 : Tensor = prim::GetAttr[name="weight"](%cls_score)
      %bias.11 : Tensor = prim::GetAttr[name="bias"](%cls_score)
      %scores.4 : Tensor = aten::linear(%x, %weight.11, %bias.11) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/modules/linear.py:117:15
      %bbox_pred : __torch__.torch.nn.modules.linear.___torch_mangle_41.Linear = prim::GetAttr[name="bbox_pred"](%box_predictor.1)
      %weight.13 : Tensor = prim::GetAttr[name="weight"](%bbox_pred)
      %bias.13 : Tensor = prim::GetAttr[name="bias"](%bbox_pred)
      %proposal_deltas.1 : Tensor = aten::linear(%x, %weight.13, %bias.13) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/modules/linear.py:117:15
      %predictions.1 : (Tensor, Tensor) = prim::TupleConstruct(%scores.4, %proposal_deltas.1)
      %box_predictor : __torch__.detectron2.modeling.roi_heads.fast_rcnn.FastRCNNOutputLayers = prim::GetAttr[name="box_predictor"](%roi_heads.1)
      %3276 : int = aten::len(%proposals.2) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:538:15
      %3277 : bool = aten::Bool(%3276) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:538:15
      %3278 : bool = aten::__not__(%3277) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:538:11
      %boxes.9 : Tensor[] = prim::If(%3278) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:538:8
        block0():
          %3280 : Tensor[] = prim::ListConstruct()
          -> (%3280)
        block1():
          %3281 : Tensor, %proposal_deltas.3 : Tensor = prim::TupleUnpack(%predictions.1)
          %num_prop_per_image.3 : int[] = prim::ListConstruct()
          %3284 : int = aten::len(%proposals.2) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:541:29
           = prim::Loop(%3284, %58) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:541:29
            block0(%3285 : int):
              %p.7 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%proposals.2, %3285) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:541:29
              %3287 : int = prim::Uninitialized()
              %_proposal_boxes.1 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_proposal_boxes"](%p.7)
              %3289 : bool = aten::__isnot__(%_proposal_boxes.1, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:134:11
              %3290 : int = prim::If(%3289) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:134:8
                block0():
                  %t.13 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_proposal_boxes.1)
                  %tensor.21 : Tensor = prim::GetAttr[name="tensor"](%t.13)
                  %3293 : int[] = aten::size(%tensor.21) # <string>:13:9
                  %3294 : int = aten::__getitem__(%3293, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:240:15
                  -> (%3294)
                block1():
                  %_objectness_logits.2 : Tensor? = prim::GetAttr[name="_objectness_logits"](%p.7)
                  %3296 : bool = aten::__isnot__(%_objectness_logits.2, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:139:11
                  %3297 : int = prim::If(%3296) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:139:8
                    block0():
                      %t.146 : Tensor = prim::unchecked_cast(%_objectness_logits.2)
                      %3299 : int = aten::len(%t.146) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:140:19
                      -> (%3299)
                    block1():
                      %_pred_boxes.7 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%p.7)
                      %3301 : bool = aten::__isnot__(%_pred_boxes.7, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:144:11
                      %3302 : int = prim::If(%3301) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:144:8
                        block0():
                          %t.202 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_pred_boxes.7)
                          %tensor.13 : Tensor = prim::GetAttr[name="tensor"](%t.202)
                          %3305 : int[] = aten::size(%tensor.13) # <string>:13:9
                          %3306 : int = aten::__getitem__(%3305, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:240:15
                          -> (%3306)
                        block1():
                          %_scores.10 : Tensor? = prim::GetAttr[name="_scores"](%p.7)
                          %3308 : bool = aten::__isnot__(%_scores.10, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:149:11
                          %3309 : int = prim::If(%3308) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:149:8
                            block0():
                              %t.250 : Tensor = prim::unchecked_cast(%_scores.10)
                              %3311 : int = aten::len(%t.250) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:150:19
                              -> (%3311)
                            block1():
                              %_pred_classes.14 : Tensor? = prim::GetAttr[name="_pred_classes"](%p.7)
                              %3313 : bool = aten::__isnot__(%_pred_classes.14, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:154:11
                              %3314 : int = prim::If(%3313) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:154:8
                                block0():
                                  %t.290 : Tensor = prim::unchecked_cast(%_pred_classes.14)
                                  %3316 : int = aten::len(%t.290) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:155:19
                                  -> (%3316)
                                block1():
                                  %_pred_masks.18 : Tensor? = prim::GetAttr[name="_pred_masks"](%p.7)
                                  %3318 : bool = aten::__isnot__(%_pred_masks.18, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:159:11
                                  %3319 : int = prim::If(%3318) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:159:8
                                    block0():
                                      %t.322 : Tensor = prim::unchecked_cast(%_pred_masks.18)
                                      %3321 : int = aten::len(%t.322) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:160:19
                                      -> (%3321)
                                    block1():
                                      %_pred_keypoints.22 : Tensor? = prim::GetAttr[name="_pred_keypoints"](%p.7)
                                      %3323 : bool = aten::__isnot__(%_pred_keypoints.22, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:164:11
                                      %3324 : int = prim::If(%3323) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:164:8
                                        block0():
                                          %t.346 : Tensor = prim::unchecked_cast(%_pred_keypoints.22)
                                          %3326 : int = aten::len(%t.346) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:165:19
                                          -> (%3326)
                                        block1():
                                          %_pred_keypoint_heatmaps.26 : Tensor? = prim::GetAttr[name="_pred_keypoint_heatmaps"](%p.7)
                                          %3328 : bool = aten::__isnot__(%_pred_keypoint_heatmaps.26, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:169:11
                                          %3329 : int = prim::If(%3328) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:169:8
                                            block0():
                                              %t.362 : Tensor = prim::unchecked_cast(%_pred_keypoint_heatmaps.26)
                                              %3331 : int = aten::len(%t.362) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:170:19
                                              -> (%3331)
                                            block1():
                                               = prim::RaiseException(%15, %41) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:173:8
                                              -> (%3287)
                                          -> (%3329)
                                      -> (%3324)
                                  -> (%3319)
                              -> (%3314)
                          -> (%3309)
                      -> (%3302)
                  -> (%3297)
              %3332 : int[] = aten::append(%num_prop_per_image.3, %3290) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:541:29
              -> (%58)
          %3333 : Tensor[] = prim::ListConstruct()
          %3334 : int = aten::len(%proposals.2) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:542:29
           = prim::Loop(%3334, %58) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:542:29
            block0(%3335 : int):
              %p.11 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%proposals.2, %3335) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:542:29
              %3337 : __torch__.detectron2.structures.boxes.Boxes = prim::Uninitialized()
              %_proposal_boxes.2 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_proposal_boxes"](%p.11)
              %3339 : bool = aten::__isnot__(%_proposal_boxes.2, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:31:15
              %t.11 : __torch__.detectron2.structures.boxes.Boxes = prim::If(%3339) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:31:8
                block0():
                  %t.9 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_proposal_boxes.2)
                  -> (%t.9)
                block1():
                   = prim::RaiseException(%19, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:31:8
                  -> (%3337)
              %tensor.8 : Tensor = prim::GetAttr[name="tensor"](%t.11)
              %3343 : Tensor[] = aten::append(%3333, %tensor.8) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:542:29
              -> (%58)
          %3344 : int = aten::len(%3333) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:7
          %3345 : bool = aten::eq(%3344, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:7
          %proposal_boxes.3 : Tensor = prim::If(%3345) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:4
            block0():
              %3347 : Tensor = aten::__getitem__(%3333, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:71:15
              -> (%3347)
            block1():
              %3348 : Tensor = aten::cat(%3333, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:72:11
              -> (%3348)
          %box2box_transform.1 : __torch__.detectron2.modeling.box_regression.Box2BoxTransform = prim::GetAttr[name="box2box_transform"](%box_predictor)
          %deltas.5 : Tensor = aten::to(%proposal_deltas.3, %22, %46, %46, %57) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:88:17
          %3351 : int = prim::dtype(%deltas.5)
          %boxes.5 : Tensor = aten::to(%proposal_boxes.3, %3351, %46, %46, %57) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:89:16
          %3353 : Tensor = aten::slice(%boxes.5, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:91:17
          %3354 : Tensor = aten::select(%3353, %44, %36) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:91:17
          %3355 : Tensor = aten::slice(%boxes.5, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:91:31
          %3356 : Tensor = aten::select(%3355, %44, %49) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:91:31
          %widths.1 : Tensor = aten::sub(%3354, %3356, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:91:17
          %3358 : Tensor = aten::slice(%boxes.5, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:92:18
          %3359 : Tensor = aten::select(%3358, %44, %35) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:92:18
          %3360 : Tensor = aten::slice(%boxes.5, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:92:32
          %3361 : Tensor = aten::select(%3360, %44, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:92:32
          %heights.1 : Tensor = aten::sub(%3359, %3361, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:92:18
          %3363 : Tensor = aten::slice(%boxes.5, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:93:16
          %3364 : Tensor = aten::select(%3363, %44, %49) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:93:16
          %3365 : Tensor = aten::mul(%widths.1, %30) # <string>:3:9
          %ctr_x.1 : Tensor = aten::add(%3364, %3365, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:93:16
          %3367 : Tensor = aten::slice(%boxes.5, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:94:16
          %3368 : Tensor = aten::select(%3367, %44, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:94:16
          %3369 : Tensor = aten::mul(%heights.1, %30) # <string>:3:9
          %ctr_y.1 : Tensor = aten::add(%3368, %3369, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:94:16
          %weights : (float, float, float, float) = prim::GetAttr[name="weights"](%box2box_transform.1)
          %wx.1 : float, %wy.1 : float, %ww.1 : float, %wh.1 : float = prim::TupleUnpack(%weights)
          %3376 : Tensor = aten::slice(%deltas.5, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:97:13
          %3377 : Tensor = aten::slice(%3376, %44, %49, %57, %55) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:97:13
          %dx.1 : Tensor = aten::div(%3377, %wx.1) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:97:13
          %3379 : Tensor = aten::slice(%deltas.5, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:98:13
          %3380 : Tensor = aten::slice(%3379, %44, %44, %57, %55) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:98:13
          %dy.1 : Tensor = aten::div(%3380, %wy.1) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:98:13
          %3382 : Tensor = aten::slice(%deltas.5, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:99:13
          %3383 : Tensor = aten::slice(%3382, %44, %36, %57, %55) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:99:13
          %dw.1 : Tensor = aten::div(%3383, %ww.1) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:99:13
          %3385 : Tensor = aten::slice(%deltas.5, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:100:13
          %3386 : Tensor = aten::slice(%3385, %44, %35, %57, %55) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:100:13
          %dh.1 : Tensor = aten::div(%3386, %wh.1) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:100:13
          %scale_clamp.1 : float = prim::GetAttr[name="scale_clamp"](%box2box_transform.1)
          %dw.5 : Tensor = aten::clamp(%dw.1, %57, %scale_clamp.1) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:103:13
          %scale_clamp : float = prim::GetAttr[name="scale_clamp"](%box2box_transform.1)
          %dh.5 : Tensor = aten::clamp(%dh.1, %57, %scale_clamp) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:104:13
          %3392 : Tensor = aten::slice(%widths.1, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:106:26
          %3393 : Tensor = aten::unsqueeze(%3392, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:106:26
          %3394 : Tensor = aten::mul(%dx.1, %3393) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:106:21
          %3395 : Tensor = aten::slice(%ctr_x.1, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:106:44
          %3396 : Tensor = aten::unsqueeze(%3395, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:106:44
          %pred_ctr_x.1 : Tensor = aten::add(%3394, %3396, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:106:21
          %3398 : Tensor = aten::slice(%heights.1, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:107:26
          %3399 : Tensor = aten::unsqueeze(%3398, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:107:26
          %3400 : Tensor = aten::mul(%dy.1, %3399) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:107:21
          %3401 : Tensor = aten::slice(%ctr_y.1, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:107:45
          %3402 : Tensor = aten::unsqueeze(%3401, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:107:45
          %pred_ctr_y.1 : Tensor = aten::add(%3400, %3402, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:107:21
          %3404 : Tensor = aten::exp(%dw.5) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:108:17
          %3405 : Tensor = aten::slice(%widths.1, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:108:33
          %3406 : Tensor = aten::unsqueeze(%3405, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:108:33
          %pred_w.1 : Tensor = aten::mul(%3404, %3406) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:108:17
          %3408 : Tensor = aten::exp(%dh.5) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:109:17
          %3409 : Tensor = aten::slice(%heights.1, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:109:33
          %3410 : Tensor = aten::unsqueeze(%3409, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:109:33
          %pred_h.1 : Tensor = aten::mul(%3408, %3410) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:109:17
          %3412 : Tensor = aten::mul(%pred_w.1, %30) # <string>:3:9
          %x1.2 : Tensor = aten::sub(%pred_ctr_x.1, %3412, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:111:13
          %3414 : Tensor = aten::mul(%pred_h.1, %30) # <string>:3:9
          %y1.2 : Tensor = aten::sub(%pred_ctr_y.1, %3414, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:112:13
          %3416 : Tensor = aten::mul(%pred_w.1, %30) # <string>:3:9
          %x2.2 : Tensor = aten::add(%pred_ctr_x.1, %3416, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:113:13
          %3418 : Tensor = aten::mul(%pred_h.1, %30) # <string>:3:9
          %y2.2 : Tensor = aten::add(%pred_ctr_y.1, %3418, %44) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:114:13
          %3420 : Tensor[] = prim::ListConstruct(%x1.2, %y1.2, %x2.2, %y2.2)
          %pred_boxes.1 : Tensor = aten::stack(%3420, %52) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:115:21
          %3422 : int[] = aten::size(%deltas.5) # <string>:13:9
          %predict_boxes.3 : Tensor = aten::reshape(%pred_boxes.1, %3422) # /home/kelechi/detectron2/detectron2/modeling/box_regression.py:116:15
          %3424 : Tensor[] = aten::split(%predict_boxes.3, %num_prop_per_image.3, %49) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:547:15
          -> (%3424)
      %scores.1 : Tensor, %3426 : Tensor = prim::TupleUnpack(%predictions.1)
      %num_inst_per_image.1 : int[] = prim::ListConstruct()
      %3428 : int = aten::len(%proposals.2) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:564:29
       = prim::Loop(%3428, %58) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:564:29
        block0(%3429 : int):
          %p.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%proposals.2, %3429) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:564:29
          %3431 : int = prim::Uninitialized()
          %_proposal_boxes.4 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_proposal_boxes"](%p.1)
          %3433 : bool = aten::__isnot__(%_proposal_boxes.4, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:134:11
          %3434 : int = prim::If(%3433) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:134:8
            block0():
              %t.15 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_proposal_boxes.4)
              %tensor.15 : Tensor = prim::GetAttr[name="tensor"](%t.15)
              %3437 : int[] = aten::size(%tensor.15) # <string>:13:9
              %3438 : int = aten::__getitem__(%3437, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:240:15
              -> (%3438)
            block1():
              %_objectness_logits.3 : Tensor? = prim::GetAttr[name="_objectness_logits"](%p.1)
              %3440 : bool = aten::__isnot__(%_objectness_logits.3, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:139:11
              %3441 : int = prim::If(%3440) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:139:8
                block0():
                  %t.147 : Tensor = prim::unchecked_cast(%_objectness_logits.3)
                  %3443 : int = aten::len(%t.147) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:140:19
                  -> (%3443)
                block1():
                  %_pred_boxes.9 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%p.1)
                  %3445 : bool = aten::__isnot__(%_pred_boxes.9, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:144:11
                  %3446 : int = prim::If(%3445) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:144:8
                    block0():
                      %t.203 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_pred_boxes.9)
                      %tensor.19 : Tensor = prim::GetAttr[name="tensor"](%t.203)
                      %3449 : int[] = aten::size(%tensor.19) # <string>:13:9
                      %3450 : int = aten::__getitem__(%3449, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:240:15
                      -> (%3450)
                    block1():
                      %_scores.11 : Tensor? = prim::GetAttr[name="_scores"](%p.1)
                      %3452 : bool = aten::__isnot__(%_scores.11, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:149:11
                      %3453 : int = prim::If(%3452) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:149:8
                        block0():
                          %t.251 : Tensor = prim::unchecked_cast(%_scores.11)
                          %3455 : int = aten::len(%t.251) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:150:19
                          -> (%3455)
                        block1():
                          %_pred_classes.15 : Tensor? = prim::GetAttr[name="_pred_classes"](%p.1)
                          %3457 : bool = aten::__isnot__(%_pred_classes.15, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:154:11
                          %3458 : int = prim::If(%3457) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:154:8
                            block0():
                              %t.291 : Tensor = prim::unchecked_cast(%_pred_classes.15)
                              %3460 : int = aten::len(%t.291) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:155:19
                              -> (%3460)
                            block1():
                              %_pred_masks.19 : Tensor? = prim::GetAttr[name="_pred_masks"](%p.1)
                              %3462 : bool = aten::__isnot__(%_pred_masks.19, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:159:11
                              %3463 : int = prim::If(%3462) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:159:8
                                block0():
                                  %t.323 : Tensor = prim::unchecked_cast(%_pred_masks.19)
                                  %3465 : int = aten::len(%t.323) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:160:19
                                  -> (%3465)
                                block1():
                                  %_pred_keypoints.23 : Tensor? = prim::GetAttr[name="_pred_keypoints"](%p.1)
                                  %3467 : bool = aten::__isnot__(%_pred_keypoints.23, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:164:11
                                  %3468 : int = prim::If(%3467) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:164:8
                                    block0():
                                      %t.347 : Tensor = prim::unchecked_cast(%_pred_keypoints.23)
                                      %3470 : int = aten::len(%t.347) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:165:19
                                      -> (%3470)
                                    block1():
                                      %_pred_keypoint_heatmaps.27 : Tensor? = prim::GetAttr[name="_pred_keypoint_heatmaps"](%p.1)
                                      %3472 : bool = aten::__isnot__(%_pred_keypoint_heatmaps.27, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:169:11
                                      %3473 : int = prim::If(%3472) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:169:8
                                        block0():
                                          %t.363 : Tensor = prim::unchecked_cast(%_pred_keypoint_heatmaps.27)
                                          %3475 : int = aten::len(%t.363) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:170:19
                                          -> (%3475)
                                        block1():
                                           = prim::RaiseException(%15, %41) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:173:8
                                          -> (%3431)
                                      -> (%3473)
                                  -> (%3468)
                              -> (%3463)
                          -> (%3458)
                      -> (%3453)
                  -> (%3446)
              -> (%3441)
          %3476 : int[] = aten::append(%num_inst_per_image.1, %3434) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:564:29
          -> (%58)
      %use_sigmoid_ce : bool = prim::GetAttr[name="use_sigmoid_ce"](%box_predictor)
      %probs : Tensor = prim::If(%use_sigmoid_ce) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:565:8
        block0():
          %probs.1 : Tensor = aten::sigmoid(%scores.1) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:566:20
          -> (%probs.1)
        block1():
          %ret.2 : Tensor = aten::softmax(%scores.1, %52, %57) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:1888:14
          -> (%ret.2)
      %scores.2 : Tensor[] = aten::split(%probs, %num_inst_per_image.1, %49) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:569:15
      %image_shapes.1 : (int, int)[] = prim::ListConstruct()
      %3483 : int = aten::len(%proposals.2) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:478:23
       = prim::Loop(%3483, %58) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:478:23
        block0(%3484 : int):
          %x.3 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%proposals.2, %3484) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:478:23
          %image_size.4 : (int, int) = prim::GetAttr[name="image_size"](%x.3)
          %3487 : (int, int)[] = aten::append(%image_shapes.1, %image_size.4) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:478:23
          -> (%58)
      %test_score_thresh : float = prim::GetAttr[name="test_score_thresh"](%box_predictor)
      %test_nms_thresh : float = prim::GetAttr[name="test_nms_thresh"](%box_predictor)
      %test_topk_per_image : int = prim::GetAttr[name="test_topk_per_image"](%box_predictor)
      %result_per_image.1 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1, Tensor)[] = prim::ListConstruct()
      %3492 : int = aten::len(%scores.2) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:79:23
      %3493 : int = aten::len(%boxes.9) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:79:23
      %3494 : int = aten::len(%image_shapes.1) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:79:23
      %3495 : int[] = prim::ListConstruct(%3492, %3493, %3494)
      %3496 : int = prim::min(%3495) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:79:23
       = prim::Loop(%3496, %58) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:79:23
        block0(%3497 : int):
          %scores_per_image.1 : Tensor = aten::__getitem__(%scores.2, %3497) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:79:23
          %boxes_per_image.1 : Tensor = aten::__getitem__(%boxes.9, %3497) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:79:23
          %image_shape.1 : (int, int) = aten::__getitem__(%image_shapes.1, %3497) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:79:23
          %3501 : Tensor = aten::isfinite(%boxes_per_image.1) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:137:17
          %3502 : Tensor = aten::all(%3501, %44, %46) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:137:17
          %3503 : Tensor = aten::isfinite(%scores_per_image.1) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:137:52
          %3504 : Tensor = aten::all(%3503, %44, %46) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:137:52
          %valid_mask.1 : Tensor = aten::__and__(%3502, %3504) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:137:17
          %3506 : Tensor = aten::all(%valid_mask.1) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:138:11
          %3507 : bool = aten::Bool(%3506) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:138:11
          %3508 : bool = aten::__not__(%3507) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:138:7
          %scores : Tensor, %boxes.61 : Tensor = prim::If(%3508) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:138:4
            block0():
              %3511 : Tensor?[] = prim::ListConstruct(%valid_mask.1)
              %boxes.17 : Tensor = aten::index(%boxes_per_image.1, %3511) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:139:16
              %3513 : Tensor?[] = prim::ListConstruct(%valid_mask.1)
              %scores.7 : Tensor = aten::index(%scores_per_image.1, %3513) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:140:17
              -> (%scores.7, %boxes.17)
            block1():
              -> (%scores_per_image.1, %boxes_per_image.1)
          %3515 : Tensor = aten::slice(%scores, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:142:13
          %scores.21 : Tensor = aten::slice(%3515, %44, %57, %52, %44) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:142:13
          %3517 : int[] = aten::size(%boxes.61) # <string>:13:9
          %3518 : int = aten::__getitem__(%3517, %44) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:143:27
          %num_bbox_reg_classes.1 : int = aten::floordiv(%3518, %55) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:143:27
          %3520 : int[] = prim::ListConstruct(%52, %55)
          %3521 : Tensor = aten::reshape(%boxes.61, %3520) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:145:18
          %boxes.23 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject() # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:145:12
          %tensor.71 : Tensor = aten::to(%3521, %22, %46, %46, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:150:21
          %3524 : int = aten::numel(%tensor.71) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:11
          %3525 : bool = aten::eq(%3524, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:11
          %tensor.4 : Tensor = prim::If(%3525) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:8
            block0():
              %3527 : int[] = prim::ListConstruct(%52, %55)
              %3528 : Tensor = aten::reshape(%tensor.71, %3527) # /home/kelechi/detectron2/detectron2/structures/boxes.py:154:21
              %tensor.75 : Tensor = aten::to(%3528, %22, %46, %46, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:154:21
              -> (%tensor.75)
            block1():
              -> (%tensor.71)
          %3530 : int = aten::dim(%tensor.4) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
          %3531 : bool = aten::eq(%3530, %36) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
          %3532 : bool = prim::If(%3531) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
            block0():
              %3533 : int = aten::size(%tensor.4, %52) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:37
              %3534 : bool = aten::eq(%3533, %55) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:37
              -> (%3534)
            block1():
              -> (%46)
           = prim::If(%3532) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
            block0():
              -> ()
            block1():
              %3535 : int[] = aten::size(%tensor.4) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:59
              %3536 : str = aten::str(%3535) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
              %3537 : str = aten::add(%50, %3536) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
               = prim::RaiseException(%3537, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
              -> ()
           = prim::SetAttr[name="tensor"](%boxes.23, %tensor.4)
          %tensor.6 : Tensor = prim::GetAttr[name="tensor"](%boxes.23)
          %3539 : Tensor = aten::isfinite(%tensor.6) # /home/kelechi/detectron2/detectron2/structures/boxes.py:191:15
          %3540 : Tensor = aten::all(%3539) # /home/kelechi/detectron2/detectron2/structures/boxes.py:191:15
          %3541 : bool = aten::Bool(%3540) # /home/kelechi/detectron2/detectron2/structures/boxes.py:191:15
           = prim::If(%3541) # /home/kelechi/detectron2/detectron2/structures/boxes.py:191:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%24, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:191:8
              -> ()
          %h.1 : int, %w.1 : int = prim::TupleUnpack(%image_shape.1)
          %tensor.10 : Tensor = prim::GetAttr[name="tensor"](%boxes.23)
          %3545 : Tensor = aten::slice(%tensor.10, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:193:13
          %3546 : Tensor = aten::select(%3545, %44, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:193:13
          %x1.1 : Tensor = aten::clamp(%3546, %49, %w.1) # /home/kelechi/detectron2/detectron2/structures/boxes.py:193:13
          %tensor.7 : Tensor = prim::GetAttr[name="tensor"](%boxes.23)
          %3549 : Tensor = aten::slice(%tensor.7, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:194:13
          %3550 : Tensor = aten::select(%3549, %44, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:194:13
          %y1.1 : Tensor = aten::clamp(%3550, %49, %h.1) # /home/kelechi/detectron2/detectron2/structures/boxes.py:194:13
          %tensor.9 : Tensor = prim::GetAttr[name="tensor"](%boxes.23)
          %3553 : Tensor = aten::slice(%tensor.9, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:195:13
          %3554 : Tensor = aten::select(%3553, %44, %36) # /home/kelechi/detectron2/detectron2/structures/boxes.py:195:13
          %x2.1 : Tensor = aten::clamp(%3554, %49, %w.1) # /home/kelechi/detectron2/detectron2/structures/boxes.py:195:13
          %tensor.73 : Tensor = prim::GetAttr[name="tensor"](%boxes.23)
          %3557 : Tensor = aten::slice(%tensor.73, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:196:13
          %3558 : Tensor = aten::select(%3557, %44, %35) # /home/kelechi/detectron2/detectron2/structures/boxes.py:196:13
          %y2.1 : Tensor = aten::clamp(%3558, %49, %h.1) # /home/kelechi/detectron2/detectron2/structures/boxes.py:196:13
          %3560 : Tensor[] = prim::ListConstruct(%x1.1, %y1.1, %x2.1, %y2.1)
          %3561 : Tensor = aten::stack(%3560, %52) # /home/kelechi/detectron2/detectron2/structures/boxes.py:197:22
           = prim::SetAttr[name="tensor"](%boxes.23, %3561)
          %tensor.23 : Tensor = prim::GetAttr[name="tensor"](%boxes.23)
          %3563 : int[] = prim::ListConstruct(%52, %num_bbox_reg_classes.1, %55)
          %boxes.29 : Tensor = aten::view(%tensor.23, %3563) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:147:12
          %filter_mask.1 : Tensor = aten::gt(%scores.21, %test_score_thresh) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:151:18
          %filter_inds.1 : Tensor = aten::nonzero(%filter_mask.1) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:154:18
          %3567 : bool = aten::eq(%num_bbox_reg_classes.1, %44) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:155:7
          %boxes : Tensor = prim::If(%3567) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:155:4
            block0():
              %3569 : Tensor = aten::slice(%filter_inds.1, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:156:22
              %3570 : Tensor = aten::select(%3569, %44, %49) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:156:22
              %3571 : Tensor = aten::select(%boxes.29, %44, %49) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:156:16
              %3572 : Tensor?[] = prim::ListConstruct(%3570)
              %boxes.33 : Tensor = aten::index(%3571, %3572) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:156:16
              -> (%boxes.33)
            block1():
              %3574 : Tensor?[] = prim::ListConstruct(%filter_mask.1)
              %boxes.39 : Tensor = aten::index(%boxes.29, %3574) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:158:16
              -> (%boxes.39)
          %3576 : Tensor?[] = prim::ListConstruct(%filter_mask.1)
          %scores.27 : Tensor = aten::index(%scores.21, %3576) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:159:13
          %3578 : Tensor = aten::slice(%filter_inds.1, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:162:38
          %3579 : Tensor = aten::select(%3578, %44, %44) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:162:38
          %3580 : int[] = aten::size(%boxes) # <string>:13:9
          %3581 : int = aten::__getitem__(%3580, %52) # /home/kelechi/detectron2/detectron2/layers/nms.py:17:11
          %3582 : bool = aten::eq(%3581, %55) # /home/kelechi/detectron2/detectron2/layers/nms.py:17:11
           = prim::If(%3582) # /home/kelechi/detectron2/detectron2/layers/nms.py:17:4
            block0():
              -> ()
            block1():
               = prim::RaiseException(%50, %57) # /home/kelechi/detectron2/detectron2/layers/nms.py:17:4
              -> ()
          %3583 : Tensor = aten::to(%boxes, %22, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/nms.py:22:31
          %3584 : int = aten::numel(%3583) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:72:7
          %3585 : Device = prim::device(%3583)
          %3586 : str = prim::type(%3585)
          %3587 : bool = aten::eq(%3586, %25) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:72:32
          %3588 : int = prim::If(%3587) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:72:24
            block0():
              -> (%26)
            block1():
              -> (%27)
          %3589 : bool = aten::gt(%3584, %3588) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:72:7
          %keep.1 : Tensor = prim::If(%3589) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:72:4
            block0():
              %keep_mask.1 : Tensor = aten::zeros_like(%scores.27, %28, %57, %57, %57, %57) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:106:16
              %output.3 : Tensor, %inverse_indices.3 : Tensor, %counts.3 : Tensor = aten::_unique2(%3579, %58, %46, %46) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/functional.py:911:42
              %3595 : (Tensor, Tensor, Tensor) = prim::TupleConstruct(%output.3, %inverse_indices.3, %counts.3)
              %output.2 : Tensor, %3597 : Tensor, %3598 : Tensor = prim::TupleUnpack(%3595)
              %3599 : int = aten::len(%output.2) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:107:4
               = prim::Loop(%3599, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:107:4
                block0(%3600 : int):
                  %class_id.1 : Tensor = aten::select(%output.2, %49, %3600) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:107:4
                  %3602 : Tensor = aten::eq(%3579, %class_id.1) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:108:35
                  %3603 : Tensor[] = aten::where(%3602) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:108:23
                  %curr_indices.1 : Tensor = aten::__getitem__(%3603, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:108:23
                  %3605 : Tensor?[] = prim::ListConstruct(%curr_indices.1)
                  %3606 : Tensor = aten::index(%3583, %3605) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:109:32
                  %3607 : Tensor?[] = prim::ListConstruct(%curr_indices.1)
                  %3608 : Tensor = aten::index(%scores.27, %3607) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:109:53
                  %curr_keep_indices.1 : Tensor = torchvision::nms(%3606, %3608, %test_nms_thresh) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:41:11
                  %3610 : Tensor?[] = prim::ListConstruct(%curr_keep_indices.1)
                  %3611 : Tensor = aten::index(%curr_indices.1, %3610) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:110:18
                  %3612 : int = prim::dtype(%keep_mask.1)
                  %3613 : Device = prim::device(%keep_mask.1)
                  %3614 : Tensor = aten::tensor(%58, %3612, %3613, %46)
                  %3615 : Tensor?[] = prim::ListConstruct(%3611)
                  %3616 : Tensor = aten::index_put_(%keep_mask.1, %3615, %3614, %46) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:110:8
                  -> (%58)
              %3617 : Tensor[] = aten::where(%keep_mask.1) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:111:19
              %keep_indices.1 : Tensor = aten::__getitem__(%3617, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:111:19
              %3619 : Tensor?[] = prim::ListConstruct(%keep_indices.1)
              %3620 : Tensor = aten::index(%scores.27, %3619) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:112:24
              %3621 : Tensor, %3622 : Tensor = aten::sort(%3620, %52, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:112:24
              %3623 : Tensor?[] = prim::ListConstruct(%3622)
              %3624 : Tensor = aten::index(%keep_indices.1, %3623) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:112:11
              -> (%3624)
            block1():
              %3625 : int = aten::numel(%3583) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:89:7
              %3626 : bool = aten::eq(%3625, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:89:7
              %3627 : Tensor = prim::If(%3626) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:89:4
                block0():
                  %3628 : Device = prim::device(%3583)
                  %3629 : int[] = prim::ListConstruct(%49)
                  %3630 : Tensor = aten::empty(%3629, %55, %57, %3628, %57, %57) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:90:15
                  -> (%3630)
                block1():
                  %max_coordinate.3 : Tensor = aten::max(%3583) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:91:21
                  %3632 : Tensor = aten::to(%3579, %3583, %46, %46, %57) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:92:14
                  %3633 : Tensor = aten::tensor(%44, %57, %57, %46) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:92:49
                  %3634 : Tensor = aten::to(%3633, %3583, %46, %46, %57) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:92:49
                  %3635 : Tensor = aten::add(%max_coordinate.3, %3634, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:92:32
                  %offsets.3 : Tensor = aten::mul(%3632, %3635) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:92:14
                  %3637 : Tensor = aten::slice(%offsets.3, %49, %57, %57, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:93:28
                  %3638 : Tensor = aten::unsqueeze(%3637, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:93:28
                  %boxes_for_nms.3 : Tensor = aten::add(%3583, %3638, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:93:20
                  %keep.3 : Tensor = torchvision::nms(%boxes_for_nms.3, %scores.27, %test_nms_thresh) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/boxes.py:41:11
                  -> (%keep.3)
              -> (%3627)
          %3641 : bool = aten::ge(%test_topk_per_image, %49) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:163:7
          %keep : Tensor = prim::If(%3641) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:163:4
            block0():
              %keep.5 : Tensor = aten::slice(%keep.1, %49, %57, %test_topk_per_image, %44) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:164:15
              -> (%keep.5)
            block1():
              -> (%keep.1)
          %3644 : Tensor?[] = prim::ListConstruct(%keep)
          %boxes.57 : Tensor = aten::index(%boxes, %3644) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:165:33
          %3646 : Tensor?[] = prim::ListConstruct(%keep)
          %scores.33 : Tensor = aten::index(%scores.27, %3646) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:165:46
          %3648 : Tensor?[] = prim::ListConstruct(%keep)
          %filter_inds.11 : Tensor = aten::index(%filter_inds.1, %3648) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:165:60
          %result.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = prim::CreateObject() # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:167:13
           = prim::SetAttr[name="image_size"](%result.1, %image_shape.1)
           = prim::SetAttr[name="_field_names"](%result.1, %29)
           = prim::SetAttr[name="_proposal_boxes"](%result.1, %57)
           = prim::SetAttr[name="_objectness_logits"](%result.1, %57)
           = prim::SetAttr[name="_pred_boxes"](%result.1, %57)
           = prim::SetAttr[name="_scores"](%result.1, %57)
           = prim::SetAttr[name="_pred_classes"](%result.1, %57)
           = prim::SetAttr[name="_pred_masks"](%result.1, %57)
           = prim::SetAttr[name="_pred_keypoints"](%result.1, %57)
           = prim::SetAttr[name="_pred_keypoint_heatmaps"](%result.1, %57)
          %3651 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject() # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:168:24
          %tensor.79 : Tensor = aten::to(%boxes.57, %22, %46, %46, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:150:21
          %3653 : int = aten::numel(%tensor.79) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:11
          %3654 : bool = aten::eq(%3653, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:11
          %tensor.25 : Tensor = prim::If(%3654) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:8
            block0():
              %3656 : int[] = prim::ListConstruct(%52, %55)
              %3657 : Tensor = aten::reshape(%tensor.79, %3656) # /home/kelechi/detectron2/detectron2/structures/boxes.py:154:21
              %tensor.83 : Tensor = aten::to(%3657, %22, %46, %46, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:154:21
              -> (%tensor.83)
            block1():
              -> (%tensor.79)
          %3659 : int = aten::dim(%tensor.25) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
          %3660 : bool = aten::eq(%3659, %36) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
          %3661 : bool = prim::If(%3660) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
            block0():
              %3662 : int = aten::size(%tensor.25, %52) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:37
              %3663 : bool = aten::eq(%3662, %55) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:37
              -> (%3663)
            block1():
              -> (%46)
           = prim::If(%3661) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
            block0():
              -> ()
            block1():
              %3664 : int[] = aten::size(%tensor.25) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:59
              %3665 : str = aten::str(%3664) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
              %3666 : str = aten::add(%50, %3665) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
               = prim::RaiseException(%3666, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
              -> ()
           = prim::SetAttr[name="tensor"](%3651, %tensor.25)
           = prim::SetAttr[name="_pred_boxes"](%result.1, %3651)
           = prim::SetAttr[name="_scores"](%result.1, %scores.33)
          %3667 : Tensor = aten::slice(%filter_inds.11, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:170:26
          %3668 : Tensor = aten::select(%3667, %44, %44) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:170:26
           = prim::SetAttr[name="_pred_classes"](%result.1, %3668)
          %3669 : Tensor = aten::slice(%filter_inds.11, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:171:19
          %3670 : Tensor = aten::select(%3669, %44, %49) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:171:19
          %3671 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1, Tensor) = prim::TupleConstruct(%result.1, %3670)
          %3672 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1, Tensor)[] = aten::append(%result_per_image.1, %3671) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:79:23
          -> (%58)
      %3673 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::ListConstruct()
      %3674 : int = aten::len(%result_per_image.1) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:85:11
       = prim::Loop(%3674, %58) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:85:11
        block0(%3675 : int):
          %x.11 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1, Tensor) = aten::__getitem__(%result_per_image.1, %3675) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:85:11
          %3677 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = prim::TupleIndex(%x.11, %49)
          %3678 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = aten::append(%3673, %3677) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:85:11
          -> (%58)
      %3679 : Tensor[] = prim::ListConstruct()
      %3680 : int = aten::len(%result_per_image.1) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:85:45
       = prim::Loop(%3680, %58) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:85:45
        block0(%3681 : int):
          %x.31 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1, Tensor) = aten::__getitem__(%result_per_image.1, %3681) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:85:45
          %3683 : Tensor = prim::TupleIndex(%x.31, %44)
          %3684 : Tensor[] = aten::append(%3679, %3683) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/fast_rcnn.py:85:45
          -> (%58)
      %3685 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], Tensor[]) = prim::TupleConstruct(%3673, %3679)
      %pred_instances.5 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], %3687 : Tensor[] = prim::TupleUnpack(%3685)
      %3688 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%pred_instances.5, %49) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:774:15
      %_pred_boxes.8 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%3688)
      %3690 : bool = aten::__isnot__(%_pred_boxes.8, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:188:19
      %3691 : bool = prim::If(%3690) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:774:15
        block0():
          %3692 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%pred_instances.5, %49) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:774:50
          %_pred_classes.17 : Tensor? = prim::GetAttr[name="_pred_classes"](%3692)
          %3694 : bool = aten::__isnot__(%_pred_classes.17, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:196:19
          -> (%3694)
        block1():
          -> (%46)
       = prim::If(%3691) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:774:8
        block0():
          -> ()
        block1():
           = prim::RaiseException(%50, %57) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:774:8
          -> ()
      %features.12 : Tensor[] = prim::ListConstruct()
      %mask_in_features.1 : str[] = prim::GetAttr[name="mask_in_features"](%roi_heads.1)
      %3697 : int = aten::len(%mask_in_features.1) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:841:23
       = prim::Loop(%3697, %58) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:841:23
        block0(%3698 : int):
          %f.8 : str = aten::__getitem__(%mask_in_features.1, %3698) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:841:23
          %3700 : Tensor = aten::__getitem__(%features.1, %f.8) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:841:24
          %3701 : Tensor[] = aten::append(%features.12, %3700) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:841:23
          -> (%58)
      %boxes.24 : __torch__.detectron2.structures.boxes.Boxes[] = prim::ListConstruct()
      %3703 : int = aten::len(%pred_instances.5) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:842:20
       = prim::Loop(%3703, %58) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:842:20
        block0(%3704 : int):
          %x.97 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%pred_instances.5, %3704) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:842:20
          %3706 : __torch__.detectron2.structures.boxes.Boxes = prim::Uninitialized()
          %_pred_boxes.1 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%x.97)
          %3708 : bool = aten::__isnot__(%_pred_boxes.1, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:57:15
          %t.14 : __torch__.detectron2.structures.boxes.Boxes = prim::If(%3708) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:57:8
            block0():
              %t.16 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_pred_boxes.1)
              -> (%t.16)
            block1():
               = prim::RaiseException(%20, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:57:8
              -> (%3706)
          %3711 : __torch__.detectron2.structures.boxes.Boxes[] = aten::append(%boxes.24, %t.14) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:842:20
          -> (%58)
      %mask_pooler.1 : __torch__.detectron2.modeling.poolers.ROIPooler = prim::GetAttr[name="mask_pooler"](%roi_heads.1)
      %3713 : int = aten::len(%boxes.24) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:240:11
      %3714 : bool = aten::eq(%3713, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:240:11
      %features.14 : Tensor = prim::If(%3714) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:240:8
        block0():
          %3716 : Tensor = aten::__getitem__(%features.12, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:241:39
          %3717 : int[] = aten::size(%3716) # <string>:13:9
          %3718 : int = aten::__getitem__(%3717, %44) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:241:39
          %output_size.3 : (int, int) = prim::GetAttr[name="output_size"](%mask_pooler.1)
          %3720 : int, %3721 : int = prim::TupleUnpack(%output_size.3)
          %3722 : Tensor = aten::__getitem__(%features.12, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:241:73
          %3723 : int = prim::dtype(%3722)
          %3724 : Device = prim::device(%3722)
          %3725 : int[] = prim::ListConstruct(%49, %3718, %3720, %3721)
          %3726 : Tensor = aten::zeros(%3725, %3723, %57, %3724, %57) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:111:11
          -> (%3726)
        block1():
          %3727 : Tensor[] = prim::ListConstruct()
          %3728 : int = aten::len(%boxes.24) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:95:22
           = prim::Loop(%3728, %58) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:95:22
            block0(%3729 : int):
              %x.99 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%boxes.24, %3729) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:95:22
              %tensor.85 : Tensor = prim::GetAttr[name="tensor"](%x.99)
              %3732 : Tensor[] = aten::append(%3727, %tensor.85) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:95:22
              -> (%58)
          %boxes.26 : Tensor = aten::cat(%3727, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:95:12
          %3734 : int[] = prim::ListConstruct()
          %3735 : int = aten::len(%boxes.24) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:97:29
           = prim::Loop(%3735, %58) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:97:29
            block0(%3736 : int):
              %x.101 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%boxes.24, %3736) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:97:29
              %tensor.69 : Tensor = prim::GetAttr[name="tensor"](%x.101)
              %3739 : int[] = aten::size(%tensor.69) # <string>:13:9
              %3740 : int = aten::__getitem__(%3739, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:240:15
              %3741 : int[] = aten::append(%3734, %3740) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:97:29
              -> (%58)
          %sizes.3 : Tensor = aten::as_tensor(%3734, %57, %57) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:29:15
          %3743 : Device = prim::device(%boxes.26)
          %sizes.7 : Tensor = aten::to(%sizes.3, %57, %57, %3743, %57, %46, %46, %57) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:65:12
          %3745 : int = aten::len(%sizes.7) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:67:21
          %3746 : int = prim::dtype(%boxes.26)
          %3747 : Device = prim::device(%boxes.26)
          %3748 : Tensor = aten::arange(%3745, %3746, %57, %3747, %57) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:67:8
          %indices.4 : Tensor = aten::repeat_interleave(%3748, %sizes.7, %57, %57) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:66:14
          %3750 : Tensor = aten::slice(%indices.4, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:69:16
          %3751 : Tensor = aten::unsqueeze(%3750, %44) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:69:16
          %3752 : Tensor[] = prim::ListConstruct(%3751, %boxes.26)
          %pooler_fmt_boxes.15 : Tensor = aten::cat(%3752, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:72:11
          %min_level.7 : int = prim::GetAttr[name="min_level"](%mask_pooler.1)
          %max_level.7 : int = prim::GetAttr[name="max_level"](%mask_pooler.1)
          %canonical_box_size.7 : int = prim::GetAttr[name="canonical_box_size"](%mask_pooler.1)
          %canonical_level.7 : int = prim::GetAttr[name="canonical_level"](%mask_pooler.1)
          %3758 : Tensor[] = prim::ListConstruct()
          %3759 : int = aten::len(%boxes.24) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:51:31
           = prim::Loop(%3759, %58) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:51:31
            block0(%3760 : int):
              %boxes.28 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%boxes.24, %3760) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:51:31
              %tensor.89 : Tensor = prim::GetAttr[name="tensor"](%boxes.28)
              %3763 : Tensor = aten::slice(%tensor.89, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:16
              %3764 : Tensor = aten::select(%3763, %44, %36) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:16
              %3765 : Tensor = aten::slice(%tensor.89, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:28
              %3766 : Tensor = aten::select(%3765, %44, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:28
              %3767 : Tensor = aten::sub(%3764, %3766, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:16
              %3768 : Tensor = aten::slice(%tensor.89, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:42
              %3769 : Tensor = aten::select(%3768, %44, %35) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:42
              %3770 : Tensor = aten::slice(%tensor.89, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:54
              %3771 : Tensor = aten::select(%3770, %44, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:54
              %3772 : Tensor = aten::sub(%3769, %3771, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:42
              %area.3 : Tensor = aten::mul(%3767, %3772) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:16
              %3774 : Tensor[] = aten::append(%3758, %area.3) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:51:31
              -> (%58)
          %3775 : int = aten::len(%3758) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:7
          %3776 : bool = aten::eq(%3775, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:7
          %3777 : Tensor = prim::If(%3776) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:4
            block0():
              %3778 : Tensor = aten::__getitem__(%3758, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:71:15
              -> (%3778)
            block1():
              %3779 : Tensor = aten::cat(%3758, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:72:11
              -> (%3779)
          %box_sizes.3 : Tensor = aten::sqrt(%3777) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:51:16
          %3781 : Tensor = aten::div(%box_sizes.3, %canonical_box_size.7) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:54:37
          %3782 : Tensor = aten::add(%3781, %16, %44) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:54:37
          %3783 : Tensor = aten::log2(%3782) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:54:26
          %3784 : Tensor = aten::add(%3783, %canonical_level.7, %44) # <string>:5:9
          %level_assignments.3 : Tensor = aten::floor(%3784) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:53:24
          %level_assignments.7 : Tensor = aten::clamp(%level_assignments.3, %min_level.7, %max_level.7) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:58:24
          %3787 : Tensor = aten::to(%level_assignments.7, %55, %46, %46, %57) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:59:11
          %level_assignments.15 : Tensor = aten::sub(%3787, %min_level.7, %44) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:59:11
          %3789 : Tensor = aten::__getitem__(%features.12, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:252:23
          %3790 : int[] = aten::size(%3789) # <string>:13:9
          %num_channels.9 : int = aten::__getitem__(%3790, %44) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:252:23
          %output_size.19 : (int, int) = prim::GetAttr[name="output_size"](%mask_pooler.1)
          %output_size.23 : int = prim::TupleIndex(%output_size.19, %49)
          %3794 : Tensor = aten::__getitem__(%features.12, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:255:89
          %3795 : int[] = aten::size(%pooler_fmt_boxes.15) # <string>:13:9
          %3796 : int = aten::__getitem__(%3795, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:109:14
          %3797 : int = prim::dtype(%3794)
          %3798 : Device = prim::device(%3794)
          %3799 : int[] = prim::ListConstruct(%3796, %num_channels.9, %output_size.23, %output_size.23)
          %output.17 : Tensor = aten::zeros(%3799, %3797, %57, %3798, %57) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:111:11
          %level_poolers.15 : __torch__.torch.nn.modules.container.___torch_mangle_38.ModuleList = prim::GetAttr[name="level_poolers"](%mask_pooler.1)
          %_0.13 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="0"](%level_poolers.15)
          %_1.13 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="1"](%level_poolers.15)
          %_2.13 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="2"](%level_poolers.15)
          %_3.13 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="3"](%level_poolers.15)
          %3806 : Tensor = aten::eq(%level_assignments.15, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:258:33
          %3807 : int = aten::dim(%3806) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:11
          %3808 : bool = aten::eq(%3807, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:11
          %3809 : Tensor[] = prim::If(%3808) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:8
            block0():
              %3810 : Tensor = aten::unsqueeze(%3806, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              %3811 : Tensor = aten::nonzero(%3810) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              %3812 : Tensor[] = aten::unbind(%3811, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              -> (%3812)
            block1():
              %3813 : Tensor = aten::nonzero(%3806) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:166:15
              %3814 : Tensor[] = aten::unbind(%3813, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:166:15
              -> (%3814)
          %inds.57 : Tensor = aten::__getitem__(%3809, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:258:19
          %3816 : Tensor?[] = prim::ListConstruct(%inds.57)
          %pooler_fmt_boxes_level.33 : Tensor = aten::index(%pooler_fmt_boxes.15, %3816) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:259:37
          %3818 : Tensor = aten::__getitem__(%features.12, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:261:46
          %3819 : int = aten::dim(%pooler_fmt_boxes_level.33) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
          %3820 : bool = aten::eq(%3819, %36) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
          %3821 : bool = prim::If(%3820) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
            block0():
              %3822 : int = aten::size(%pooler_fmt_boxes_level.33, %44) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:35
              %3823 : bool = aten::eq(%3822, %40) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:35
              -> (%3823)
            block1():
              -> (%46)
           = prim::If(%3821) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%50, %57) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:8
              -> ()
          %3824 : bool = prim::is_quantized(%3818)
          %input.43 : Tensor = prim::If(%3824) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:56:8
            block0():
              %input.45 : Tensor = aten::dequantize(%3818) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:57:20
              -> (%input.45)
            block1():
              -> (%3818)
          %3827 : int = prim::dtype(%input.43)
          %3828 : Tensor = aten::to(%pooler_fmt_boxes_level.33, %3827, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:60:12
          %output_size.25 : (int, int) = prim::GetAttr[name="output_size"](%_0.13)
          %spatial_scale.9 : float = prim::GetAttr[name="spatial_scale"](%_0.13)
          %sampling_ratio.9 : int = prim::GetAttr[name="sampling_ratio"](%_0.13)
          %aligned.9 : bool = prim::GetAttr[name="aligned"](%_0.13)
          %3833 : int, %3834 : int = prim::TupleUnpack(%output_size.25)
          %3835 : bool = prim::isinstance[types=[list, tuple]](%3828)
           = prim::If(%3835) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:4
            block0():
              %boxes.30 : Tensor[] = prim::unchecked_cast(%3828)
              %3837 : int = aten::len(%boxes.30) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
               = prim::Loop(%3837, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
                block0(%3838 : int):
                  %_tensor.10 : Tensor = aten::__getitem__(%boxes.30, %3838) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
                  %3840 : int = aten::size(%_tensor.10, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:32:16
                  %3841 : bool = aten::eq(%3840, %55) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:32:16
                   = prim::If(%3841) # <string>:8:2
                    block0():
                      -> ()
                    block1():
                       = prim::RaiseException(%17, %57) # <string>:8:2
                      -> ()
                  -> (%58)
              -> ()
            block1():
              %3842 : int = aten::size(%3828, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:35:22
              %3843 : bool = aten::eq(%3842, %40) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:35:22
               = prim::If(%3843) # <string>:8:2
                block0():
                  -> ()
                block1():
                   = prim::RaiseException(%18, %57) # <string>:8:2
                  -> ()
              -> ()
          %3844 : bool = prim::isinstance[types=[Tensor]](%3828)
          %3845 : bool = aten::__not__(%3844) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:249:7
          %rois.32 : Tensor = prim::If(%3845) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:249:4
            block0():
              %rois.34 : Tensor[] = prim::unchecked_cast(%3828)
              %3848 : Tensor[] = prim::ListConstruct()
              %3849 : int = aten::len(%rois.34) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
               = prim::Loop(%3849, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                block0(%3850 : int):
                  %b.20 : Tensor = aten::__getitem__(%rois.34, %3850) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                  %3852 : Tensor[] = aten::append(%3848, %b.20) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                  -> (%58)
              %3853 : int = aten::len(%3848) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %3854 : bool = aten::eq(%3853, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %concat_boxes.10 : Tensor = prim::If(%3854) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:4
                block0():
                  %3856 : Tensor = aten::__getitem__(%3848, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:15
                  -> (%3856)
                block1():
                  %3857 : Tensor = aten::cat(%3848, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:15:11
                  -> (%3857)
              %3858 : Tensor[] = prim::ListConstruct()
              %3859 : int = aten::len(%rois.34) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
              %3860 : int[] = prim::ListConstruct(%48, %3859)
              %3861 : int = prim::min(%3860) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
               = prim::Loop(%3861, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
                block0(%i.10 : int):
                  %b.22 : Tensor = aten::__getitem__(%rois.34, %i.10) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
                  %3864 : Tensor = aten::slice(%b.22, %49, %57, %57, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:36
                  %3865 : Tensor = aten::slice(%3864, %44, %57, %44, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:36
                  %3866 : Tensor = aten::full_like(%3865, %i.10, %57, %57, %57, %57, %57) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:20
                  %3867 : Tensor[] = aten::append(%3858, %3866) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:8
                  -> (%58)
              %3868 : int = aten::len(%3858) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %3869 : bool = aten::eq(%3868, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %ids.10 : Tensor = prim::If(%3869) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:4
                block0():
                  %3871 : Tensor = aten::__getitem__(%3858, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:15
                  -> (%3871)
                block1():
                  %3872 : Tensor = aten::cat(%3858, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:15:11
                  -> (%3872)
              %3873 : Tensor[] = prim::ListConstruct(%ids.10, %concat_boxes.10)
              %rois.36 : Tensor = aten::cat(%3873, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:24:11
              -> (%rois.36)
            block1():
              -> (%3828)
          %3875 : Tensor = torchvision::roi_align(%input.43, %rois.32, %spatial_scale.9, %3833, %3834, %sampling_ratio.9, %aligned.9) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:257:11
          %3876 : Tensor?[] = prim::ListConstruct(%inds.57)
          %3877 : Tensor = aten::index_put_(%output.17, %3876, %3875, %46) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:261:12
          %3878 : Tensor = aten::eq(%level_assignments.15, %44) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:258:33
          %3879 : int = aten::dim(%3878) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:11
          %3880 : bool = aten::eq(%3879, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:11
          %3881 : Tensor[] = prim::If(%3880) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:8
            block0():
              %3882 : Tensor = aten::unsqueeze(%3878, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              %3883 : Tensor = aten::nonzero(%3882) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              %3884 : Tensor[] = aten::unbind(%3883, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              -> (%3884)
            block1():
              %3885 : Tensor = aten::nonzero(%3878) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:166:15
              %3886 : Tensor[] = aten::unbind(%3885, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:166:15
              -> (%3886)
          %inds.61 : Tensor = aten::__getitem__(%3881, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:258:19
          %3888 : Tensor?[] = prim::ListConstruct(%inds.61)
          %pooler_fmt_boxes_level.37 : Tensor = aten::index(%pooler_fmt_boxes.15, %3888) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:259:37
          %3890 : Tensor = aten::__getitem__(%features.12, %44) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:261:46
          %3891 : int = aten::dim(%pooler_fmt_boxes_level.37) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
          %3892 : bool = aten::eq(%3891, %36) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
          %3893 : bool = prim::If(%3892) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
            block0():
              %3894 : int = aten::size(%pooler_fmt_boxes_level.37, %44) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:35
              %3895 : bool = aten::eq(%3894, %40) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:35
              -> (%3895)
            block1():
              -> (%46)
           = prim::If(%3893) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%50, %57) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:8
              -> ()
          %3896 : bool = prim::is_quantized(%3890)
          %input.47 : Tensor = prim::If(%3896) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:56:8
            block0():
              %input.49 : Tensor = aten::dequantize(%3890) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:57:20
              -> (%input.49)
            block1():
              -> (%3890)
          %3899 : int = prim::dtype(%input.47)
          %3900 : Tensor = aten::to(%pooler_fmt_boxes_level.37, %3899, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:60:12
          %output_size.27 : (int, int) = prim::GetAttr[name="output_size"](%_1.13)
          %spatial_scale.11 : float = prim::GetAttr[name="spatial_scale"](%_1.13)
          %sampling_ratio.11 : int = prim::GetAttr[name="sampling_ratio"](%_1.13)
          %aligned.11 : bool = prim::GetAttr[name="aligned"](%_1.13)
          %3905 : int, %3906 : int = prim::TupleUnpack(%output_size.27)
          %3907 : bool = prim::isinstance[types=[list, tuple]](%3900)
           = prim::If(%3907) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:4
            block0():
              %boxes.32 : Tensor[] = prim::unchecked_cast(%3900)
              %3909 : int = aten::len(%boxes.32) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
               = prim::Loop(%3909, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
                block0(%3910 : int):
                  %_tensor.12 : Tensor = aten::__getitem__(%boxes.32, %3910) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
                  %3912 : int = aten::size(%_tensor.12, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:32:16
                  %3913 : bool = aten::eq(%3912, %55) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:32:16
                   = prim::If(%3913) # <string>:8:2
                    block0():
                      -> ()
                    block1():
                       = prim::RaiseException(%17, %57) # <string>:8:2
                      -> ()
                  -> (%58)
              -> ()
            block1():
              %3914 : int = aten::size(%3900, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:35:22
              %3915 : bool = aten::eq(%3914, %40) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:35:22
               = prim::If(%3915) # <string>:8:2
                block0():
                  -> ()
                block1():
                   = prim::RaiseException(%18, %57) # <string>:8:2
                  -> ()
              -> ()
          %3916 : bool = prim::isinstance[types=[Tensor]](%3900)
          %3917 : bool = aten::__not__(%3916) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:249:7
          %rois.38 : Tensor = prim::If(%3917) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:249:4
            block0():
              %rois.40 : Tensor[] = prim::unchecked_cast(%3900)
              %3920 : Tensor[] = prim::ListConstruct()
              %3921 : int = aten::len(%rois.40) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
               = prim::Loop(%3921, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                block0(%3922 : int):
                  %b.24 : Tensor = aten::__getitem__(%rois.40, %3922) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                  %3924 : Tensor[] = aten::append(%3920, %b.24) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                  -> (%58)
              %3925 : int = aten::len(%3920) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %3926 : bool = aten::eq(%3925, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %concat_boxes.12 : Tensor = prim::If(%3926) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:4
                block0():
                  %3928 : Tensor = aten::__getitem__(%3920, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:15
                  -> (%3928)
                block1():
                  %3929 : Tensor = aten::cat(%3920, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:15:11
                  -> (%3929)
              %3930 : Tensor[] = prim::ListConstruct()
              %3931 : int = aten::len(%rois.40) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
              %3932 : int[] = prim::ListConstruct(%48, %3931)
              %3933 : int = prim::min(%3932) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
               = prim::Loop(%3933, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
                block0(%i.12 : int):
                  %b.26 : Tensor = aten::__getitem__(%rois.40, %i.12) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
                  %3936 : Tensor = aten::slice(%b.26, %49, %57, %57, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:36
                  %3937 : Tensor = aten::slice(%3936, %44, %57, %44, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:36
                  %3938 : Tensor = aten::full_like(%3937, %i.12, %57, %57, %57, %57, %57) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:20
                  %3939 : Tensor[] = aten::append(%3930, %3938) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:8
                  -> (%58)
              %3940 : int = aten::len(%3930) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %3941 : bool = aten::eq(%3940, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %ids.12 : Tensor = prim::If(%3941) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:4
                block0():
                  %3943 : Tensor = aten::__getitem__(%3930, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:15
                  -> (%3943)
                block1():
                  %3944 : Tensor = aten::cat(%3930, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:15:11
                  -> (%3944)
              %3945 : Tensor[] = prim::ListConstruct(%ids.12, %concat_boxes.12)
              %rois.42 : Tensor = aten::cat(%3945, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:24:11
              -> (%rois.42)
            block1():
              -> (%3900)
          %3947 : Tensor = torchvision::roi_align(%input.47, %rois.38, %spatial_scale.11, %3905, %3906, %sampling_ratio.11, %aligned.11) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:257:11
          %3948 : Tensor?[] = prim::ListConstruct(%inds.61)
          %3949 : Tensor = aten::index_put_(%output.17, %3948, %3947, %46) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:261:12
          %3950 : Tensor = aten::eq(%level_assignments.15, %36) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:258:33
          %3951 : int = aten::dim(%3950) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:11
          %3952 : bool = aten::eq(%3951, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:11
          %3953 : Tensor[] = prim::If(%3952) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:8
            block0():
              %3954 : Tensor = aten::unsqueeze(%3950, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              %3955 : Tensor = aten::nonzero(%3954) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              %3956 : Tensor[] = aten::unbind(%3955, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              -> (%3956)
            block1():
              %3957 : Tensor = aten::nonzero(%3950) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:166:15
              %3958 : Tensor[] = aten::unbind(%3957, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:166:15
              -> (%3958)
          %inds.65 : Tensor = aten::__getitem__(%3953, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:258:19
          %3960 : Tensor?[] = prim::ListConstruct(%inds.65)
          %pooler_fmt_boxes_level.41 : Tensor = aten::index(%pooler_fmt_boxes.15, %3960) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:259:37
          %3962 : Tensor = aten::__getitem__(%features.12, %36) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:261:46
          %3963 : int = aten::dim(%pooler_fmt_boxes_level.41) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
          %3964 : bool = aten::eq(%3963, %36) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
          %3965 : bool = prim::If(%3964) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
            block0():
              %3966 : int = aten::size(%pooler_fmt_boxes_level.41, %44) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:35
              %3967 : bool = aten::eq(%3966, %40) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:35
              -> (%3967)
            block1():
              -> (%46)
           = prim::If(%3965) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%50, %57) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:8
              -> ()
          %3968 : bool = prim::is_quantized(%3962)
          %input.51 : Tensor = prim::If(%3968) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:56:8
            block0():
              %input.53 : Tensor = aten::dequantize(%3962) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:57:20
              -> (%input.53)
            block1():
              -> (%3962)
          %3971 : int = prim::dtype(%input.51)
          %3972 : Tensor = aten::to(%pooler_fmt_boxes_level.41, %3971, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:60:12
          %output_size.29 : (int, int) = prim::GetAttr[name="output_size"](%_2.13)
          %spatial_scale.13 : float = prim::GetAttr[name="spatial_scale"](%_2.13)
          %sampling_ratio.13 : int = prim::GetAttr[name="sampling_ratio"](%_2.13)
          %aligned.13 : bool = prim::GetAttr[name="aligned"](%_2.13)
          %3977 : int, %3978 : int = prim::TupleUnpack(%output_size.29)
          %3979 : bool = prim::isinstance[types=[list, tuple]](%3972)
           = prim::If(%3979) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:4
            block0():
              %boxes.34 : Tensor[] = prim::unchecked_cast(%3972)
              %3981 : int = aten::len(%boxes.34) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
               = prim::Loop(%3981, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
                block0(%3982 : int):
                  %_tensor.14 : Tensor = aten::__getitem__(%boxes.34, %3982) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
                  %3984 : int = aten::size(%_tensor.14, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:32:16
                  %3985 : bool = aten::eq(%3984, %55) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:32:16
                   = prim::If(%3985) # <string>:8:2
                    block0():
                      -> ()
                    block1():
                       = prim::RaiseException(%17, %57) # <string>:8:2
                      -> ()
                  -> (%58)
              -> ()
            block1():
              %3986 : int = aten::size(%3972, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:35:22
              %3987 : bool = aten::eq(%3986, %40) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:35:22
               = prim::If(%3987) # <string>:8:2
                block0():
                  -> ()
                block1():
                   = prim::RaiseException(%18, %57) # <string>:8:2
                  -> ()
              -> ()
          %3988 : bool = prim::isinstance[types=[Tensor]](%3972)
          %3989 : bool = aten::__not__(%3988) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:249:7
          %rois.44 : Tensor = prim::If(%3989) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:249:4
            block0():
              %rois.46 : Tensor[] = prim::unchecked_cast(%3972)
              %3992 : Tensor[] = prim::ListConstruct()
              %3993 : int = aten::len(%rois.46) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
               = prim::Loop(%3993, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                block0(%3994 : int):
                  %b.28 : Tensor = aten::__getitem__(%rois.46, %3994) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                  %3996 : Tensor[] = aten::append(%3992, %b.28) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                  -> (%58)
              %3997 : int = aten::len(%3992) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %3998 : bool = aten::eq(%3997, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %concat_boxes.14 : Tensor = prim::If(%3998) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:4
                block0():
                  %4000 : Tensor = aten::__getitem__(%3992, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:15
                  -> (%4000)
                block1():
                  %4001 : Tensor = aten::cat(%3992, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:15:11
                  -> (%4001)
              %4002 : Tensor[] = prim::ListConstruct()
              %4003 : int = aten::len(%rois.46) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
              %4004 : int[] = prim::ListConstruct(%48, %4003)
              %4005 : int = prim::min(%4004) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
               = prim::Loop(%4005, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
                block0(%i.14 : int):
                  %b.30 : Tensor = aten::__getitem__(%rois.46, %i.14) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
                  %4008 : Tensor = aten::slice(%b.30, %49, %57, %57, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:36
                  %4009 : Tensor = aten::slice(%4008, %44, %57, %44, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:36
                  %4010 : Tensor = aten::full_like(%4009, %i.14, %57, %57, %57, %57, %57) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:20
                  %4011 : Tensor[] = aten::append(%4002, %4010) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:8
                  -> (%58)
              %4012 : int = aten::len(%4002) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %4013 : bool = aten::eq(%4012, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %ids.14 : Tensor = prim::If(%4013) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:4
                block0():
                  %4015 : Tensor = aten::__getitem__(%4002, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:15
                  -> (%4015)
                block1():
                  %4016 : Tensor = aten::cat(%4002, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:15:11
                  -> (%4016)
              %4017 : Tensor[] = prim::ListConstruct(%ids.14, %concat_boxes.14)
              %rois.48 : Tensor = aten::cat(%4017, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:24:11
              -> (%rois.48)
            block1():
              -> (%3972)
          %4019 : Tensor = torchvision::roi_align(%input.51, %rois.44, %spatial_scale.13, %3977, %3978, %sampling_ratio.13, %aligned.13) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:257:11
          %4020 : Tensor?[] = prim::ListConstruct(%inds.65)
          %4021 : Tensor = aten::index_put_(%output.17, %4020, %4019, %46) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:261:12
          %4022 : Tensor = aten::eq(%level_assignments.15, %35) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:258:33
          %4023 : int = aten::dim(%4022) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:11
          %4024 : bool = aten::eq(%4023, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:11
          %4025 : Tensor[] = prim::If(%4024) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:8
            block0():
              %4026 : Tensor = aten::unsqueeze(%4022, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              %4027 : Tensor = aten::nonzero(%4026) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              %4028 : Tensor[] = aten::unbind(%4027, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              -> (%4028)
            block1():
              %4029 : Tensor = aten::nonzero(%4022) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:166:15
              %4030 : Tensor[] = aten::unbind(%4029, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:166:15
              -> (%4030)
          %inds.69 : Tensor = aten::__getitem__(%4025, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:258:19
          %4032 : Tensor?[] = prim::ListConstruct(%inds.69)
          %pooler_fmt_boxes_level.45 : Tensor = aten::index(%pooler_fmt_boxes.15, %4032) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:259:37
          %4034 : Tensor = aten::__getitem__(%features.12, %35) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:261:46
          %4035 : int = aten::dim(%pooler_fmt_boxes_level.45) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
          %4036 : bool = aten::eq(%4035, %36) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
          %4037 : bool = prim::If(%4036) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
            block0():
              %4038 : int = aten::size(%pooler_fmt_boxes_level.45, %44) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:35
              %4039 : bool = aten::eq(%4038, %40) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:35
              -> (%4039)
            block1():
              -> (%46)
           = prim::If(%4037) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%50, %57) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:8
              -> ()
          %4040 : bool = prim::is_quantized(%4034)
          %input.55 : Tensor = prim::If(%4040) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:56:8
            block0():
              %input.57 : Tensor = aten::dequantize(%4034) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:57:20
              -> (%input.57)
            block1():
              -> (%4034)
          %4043 : int = prim::dtype(%input.55)
          %4044 : Tensor = aten::to(%pooler_fmt_boxes_level.45, %4043, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:60:12
          %output_size.31 : (int, int) = prim::GetAttr[name="output_size"](%_3.13)
          %spatial_scale.15 : float = prim::GetAttr[name="spatial_scale"](%_3.13)
          %sampling_ratio.15 : int = prim::GetAttr[name="sampling_ratio"](%_3.13)
          %aligned.15 : bool = prim::GetAttr[name="aligned"](%_3.13)
          %4049 : int, %4050 : int = prim::TupleUnpack(%output_size.31)
          %4051 : bool = prim::isinstance[types=[list, tuple]](%4044)
           = prim::If(%4051) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:4
            block0():
              %boxes.36 : Tensor[] = prim::unchecked_cast(%4044)
              %4053 : int = aten::len(%boxes.36) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
               = prim::Loop(%4053, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
                block0(%4054 : int):
                  %_tensor.16 : Tensor = aten::__getitem__(%boxes.36, %4054) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
                  %4056 : int = aten::size(%_tensor.16, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:32:16
                  %4057 : bool = aten::eq(%4056, %55) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:32:16
                   = prim::If(%4057) # <string>:8:2
                    block0():
                      -> ()
                    block1():
                       = prim::RaiseException(%17, %57) # <string>:8:2
                      -> ()
                  -> (%58)
              -> ()
            block1():
              %4058 : int = aten::size(%4044, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:35:22
              %4059 : bool = aten::eq(%4058, %40) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:35:22
               = prim::If(%4059) # <string>:8:2
                block0():
                  -> ()
                block1():
                   = prim::RaiseException(%18, %57) # <string>:8:2
                  -> ()
              -> ()
          %4060 : bool = prim::isinstance[types=[Tensor]](%4044)
          %4061 : bool = aten::__not__(%4060) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:249:7
          %rois.50 : Tensor = prim::If(%4061) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:249:4
            block0():
              %rois.52 : Tensor[] = prim::unchecked_cast(%4044)
              %4064 : Tensor[] = prim::ListConstruct()
              %4065 : int = aten::len(%rois.52) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
               = prim::Loop(%4065, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                block0(%4066 : int):
                  %b.32 : Tensor = aten::__getitem__(%rois.52, %4066) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                  %4068 : Tensor[] = aten::append(%4064, %b.32) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                  -> (%58)
              %4069 : int = aten::len(%4064) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %4070 : bool = aten::eq(%4069, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %concat_boxes.16 : Tensor = prim::If(%4070) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:4
                block0():
                  %4072 : Tensor = aten::__getitem__(%4064, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:15
                  -> (%4072)
                block1():
                  %4073 : Tensor = aten::cat(%4064, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:15:11
                  -> (%4073)
              %4074 : Tensor[] = prim::ListConstruct()
              %4075 : int = aten::len(%rois.52) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
              %4076 : int[] = prim::ListConstruct(%48, %4075)
              %4077 : int = prim::min(%4076) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
               = prim::Loop(%4077, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
                block0(%i.16 : int):
                  %b.34 : Tensor = aten::__getitem__(%rois.52, %i.16) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
                  %4080 : Tensor = aten::slice(%b.34, %49, %57, %57, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:36
                  %4081 : Tensor = aten::slice(%4080, %44, %57, %44, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:36
                  %4082 : Tensor = aten::full_like(%4081, %i.16, %57, %57, %57, %57, %57) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:20
                  %4083 : Tensor[] = aten::append(%4074, %4082) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:8
                  -> (%58)
              %4084 : int = aten::len(%4074) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %4085 : bool = aten::eq(%4084, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %ids.16 : Tensor = prim::If(%4085) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:4
                block0():
                  %4087 : Tensor = aten::__getitem__(%4074, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:15
                  -> (%4087)
                block1():
                  %4088 : Tensor = aten::cat(%4074, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:15:11
                  -> (%4088)
              %4089 : Tensor[] = prim::ListConstruct(%ids.16, %concat_boxes.16)
              %rois.54 : Tensor = aten::cat(%4089, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:24:11
              -> (%rois.54)
            block1():
              -> (%4044)
          %4091 : Tensor = torchvision::roi_align(%input.55, %rois.50, %spatial_scale.15, %4049, %4050, %sampling_ratio.15, %aligned.15) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:257:11
          %4092 : Tensor?[] = prim::ListConstruct(%inds.69)
          %4093 : Tensor = aten::index_put_(%output.17, %4092, %4091, %46) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:261:12
          -> (%output.17)
      %mask_head.1 : __torch__.detectron2.modeling.roi_heads.mask_head.MaskRCNNConvUpsampleHead = prim::GetAttr[name="mask_head"](%roi_heads.1)
      %mask_fcn1.1 : __torch__.detectron2.layers.wrappers.___torch_mangle_36.Conv2d = prim::GetAttr[name="mask_fcn1"](%mask_head.1)
      %mask_fcn2.1 : __torch__.detectron2.layers.wrappers.___torch_mangle_36.Conv2d = prim::GetAttr[name="mask_fcn2"](%mask_head.1)
      %mask_fcn3.1 : __torch__.detectron2.layers.wrappers.___torch_mangle_36.Conv2d = prim::GetAttr[name="mask_fcn3"](%mask_head.1)
      %mask_fcn4.1 : __torch__.detectron2.layers.wrappers.___torch_mangle_36.Conv2d = prim::GetAttr[name="mask_fcn4"](%mask_head.1)
      %deconv.1 : __torch__.torch.nn.modules.conv.ConvTranspose2d = prim::GetAttr[name="deconv"](%mask_head.1)
      %predictor.1 : __torch__.detectron2.layers.wrappers.___torch_mangle_42.Conv2d = prim::GetAttr[name="predictor"](%mask_head.1)
      %weight.136 : Tensor = prim::GetAttr[name="weight"](%mask_fcn1.1)
      %bias.199 : Tensor? = prim::GetAttr[name="bias"](%mask_fcn1.1)
      %4103 : int[] = prim::ListConstruct(%44, %44)
      %4104 : int[] = prim::ListConstruct(%44, %44)
      %4105 : int[] = prim::ListConstruct(%44, %44)
      %x.103 : Tensor = aten::conv2d(%features.14, %weight.136, %bias.199, %4103, %4104, %4105, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
      %x.105 : Tensor = aten::relu(%x.103) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:1500:17
      %weight.138 : Tensor = prim::GetAttr[name="weight"](%mask_fcn2.1)
      %bias.201 : Tensor? = prim::GetAttr[name="bias"](%mask_fcn2.1)
      %4110 : int[] = prim::ListConstruct(%44, %44)
      %4111 : int[] = prim::ListConstruct(%44, %44)
      %4112 : int[] = prim::ListConstruct(%44, %44)
      %x.107 : Tensor = aten::conv2d(%x.105, %weight.138, %bias.201, %4110, %4111, %4112, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
      %x.109 : Tensor = aten::relu(%x.107) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:1500:17
      %weight.140 : Tensor = prim::GetAttr[name="weight"](%mask_fcn3.1)
      %bias.203 : Tensor? = prim::GetAttr[name="bias"](%mask_fcn3.1)
      %4117 : int[] = prim::ListConstruct(%44, %44)
      %4118 : int[] = prim::ListConstruct(%44, %44)
      %4119 : int[] = prim::ListConstruct(%44, %44)
      %x.111 : Tensor = aten::conv2d(%x.109, %weight.140, %bias.203, %4117, %4118, %4119, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
      %x.113 : Tensor = aten::relu(%x.111) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:1500:17
      %weight.142 : Tensor = prim::GetAttr[name="weight"](%mask_fcn4.1)
      %bias.205 : Tensor? = prim::GetAttr[name="bias"](%mask_fcn4.1)
      %4124 : int[] = prim::ListConstruct(%44, %44)
      %4125 : int[] = prim::ListConstruct(%44, %44)
      %4126 : int[] = prim::ListConstruct(%44, %44)
      %x.115 : Tensor = aten::conv2d(%x.113, %weight.142, %bias.205, %4124, %4125, %4126, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
      %x.117 : Tensor = aten::relu(%x.115) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:1500:17
      %ret.3 : int[] = prim::ListConstruct(%49, %49)
      %weight.144 : Tensor = prim::GetAttr[name="weight"](%deconv.1)
      %bias.207 : Tensor? = prim::GetAttr[name="bias"](%deconv.1)
      %4132 : int[] = prim::ListConstruct(%36, %36)
      %4133 : int[] = prim::ListConstruct(%49, %49)
      %4134 : int[] = prim::ListConstruct(%44, %44)
      %x.119 : Tensor = aten::conv_transpose2d(%x.117, %weight.144, %bias.207, %4132, %4133, %ret.3, %44, %4134) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/modules/conv.py:948:15
      %x.121 : Tensor = aten::relu(%x.119) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:1500:17
      %weight.146 : Tensor = prim::GetAttr[name="weight"](%predictor.1)
      %bias.209 : Tensor? = prim::GetAttr[name="bias"](%predictor.1)
      %4139 : int[] = prim::ListConstruct(%44, %44)
      %4140 : int[] = prim::ListConstruct(%49, %49)
      %4141 : int[] = prim::ListConstruct(%44, %44)
      %x.123 : Tensor = aten::conv2d(%x.121, %weight.146, %bias.209, %4139, %4140, %4141, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
      %4143 : int = aten::size(%x.123, %44) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:137:24
      %cls_agnostic_mask.2 : bool = aten::eq(%4143, %44) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:137:24
      %mask_probs_pred.2 : Tensor = prim::If(%cls_agnostic_mask.2) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:139:4
        block0():
          %mask_probs_pred.4 : Tensor = aten::sigmoid(%x.123) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:140:26
          -> (%mask_probs_pred.4)
        block1():
          %4147 : int[] = aten::size(%x.123) # <string>:13:9
          %num_masks.2 : int = aten::__getitem__(%4147, %49) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:143:20
          %4149 : Tensor[] = prim::ListConstruct()
          %4150 : int = aten::len(%pred_instances.5) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:144:25
           = prim::Loop(%4150, %58) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:144:25
            block0(%4151 : int):
              %i.18 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%pred_instances.5, %4151) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:144:25
              %4153 : Tensor = prim::Uninitialized()
              %_pred_classes.1 : Tensor? = prim::GetAttr[name="_pred_classes"](%i.18)
              %4155 : bool = aten::__isnot__(%_pred_classes.1, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:83:15
              %t.18 : Tensor = prim::If(%4155) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:83:8
                block0():
                  %t.20 : Tensor = prim::unchecked_cast(%_pred_classes.1)
                  -> (%t.20)
                block1():
                   = prim::RaiseException(%21, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:83:8
                  -> (%4153)
              %4158 : Tensor[] = aten::append(%4149, %t.18) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:144:25
              -> (%58)
          %4159 : int = aten::len(%4149) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:7
          %4160 : bool = aten::eq(%4159, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:7
          %class_pred.2 : Tensor = prim::If(%4160) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:4
            block0():
              %4162 : Tensor = aten::__getitem__(%4149, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:71:15
              -> (%4162)
            block1():
              %4163 : Tensor = aten::cat(%4149, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:72:11
              -> (%4163)
          %device.4 : Device = prim::device(%class_pred.2)
          %4165 : Tensor = aten::arange(%num_masks.2, %57, %57, %device.4, %57) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:150:35
          %4166 : Device = prim::device(%class_pred.2)
          %indices.6 : Tensor = aten::to(%4165, %4166, %57, %46, %46) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:177:11
          %4168 : Tensor?[] = prim::ListConstruct(%indices.6, %class_pred.2)
          %4169 : Tensor = aten::index(%x.123, %4168) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:151:26
          %4170 : Tensor = aten::slice(%4169, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:151:26
          %4171 : Tensor = aten::unsqueeze(%4170, %44) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:151:26
          %mask_probs_pred.6 : Tensor = aten::sigmoid(%4171) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:151:26
          -> (%mask_probs_pred.6)
      %num_boxes_per_image.2 : int[] = prim::ListConstruct()
      %4174 : int = aten::len(%pred_instances.5) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:154:26
       = prim::Loop(%4174, %58) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:154:26
        block0(%4175 : int):
          %i.20 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%pred_instances.5, %4175) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:154:26
          %4177 : int = prim::Uninitialized()
          %_proposal_boxes.5 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_proposal_boxes"](%i.20)
          %4179 : bool = aten::__isnot__(%_proposal_boxes.5, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:134:11
          %4180 : int = prim::If(%4179) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:134:8
            block0():
              %t.12 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_proposal_boxes.5)
              %tensor.77 : Tensor = prim::GetAttr[name="tensor"](%t.12)
              %4183 : int[] = aten::size(%tensor.77) # <string>:13:9
              %4184 : int = aten::__getitem__(%4183, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:240:15
              -> (%4184)
            block1():
              %_objectness_logits.4 : Tensor? = prim::GetAttr[name="_objectness_logits"](%i.20)
              %4186 : bool = aten::__isnot__(%_objectness_logits.4, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:139:11
              %4187 : int = prim::If(%4186) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:139:8
                block0():
                  %t.148 : Tensor = prim::unchecked_cast(%_objectness_logits.4)
                  %4189 : int = aten::len(%t.148) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:140:19
                  -> (%4189)
                block1():
                  %_pred_boxes.12 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%i.20)
                  %4191 : bool = aten::__isnot__(%_pred_boxes.12, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:144:11
                  %4192 : int = prim::If(%4191) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:144:8
                    block0():
                      %t.204 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_pred_boxes.12)
                      %tensor.81 : Tensor = prim::GetAttr[name="tensor"](%t.204)
                      %4195 : int[] = aten::size(%tensor.81) # <string>:13:9
                      %4196 : int = aten::__getitem__(%4195, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:240:15
                      -> (%4196)
                    block1():
                      %_scores.12 : Tensor? = prim::GetAttr[name="_scores"](%i.20)
                      %4198 : bool = aten::__isnot__(%_scores.12, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:149:11
                      %4199 : int = prim::If(%4198) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:149:8
                        block0():
                          %t.252 : Tensor = prim::unchecked_cast(%_scores.12)
                          %4201 : int = aten::len(%t.252) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:150:19
                          -> (%4201)
                        block1():
                          %_pred_classes.21 : Tensor? = prim::GetAttr[name="_pred_classes"](%i.20)
                          %4203 : bool = aten::__isnot__(%_pred_classes.21, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:154:11
                          %4204 : int = prim::If(%4203) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:154:8
                            block0():
                              %t.292 : Tensor = prim::unchecked_cast(%_pred_classes.21)
                              %4206 : int = aten::len(%t.292) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:155:19
                              -> (%4206)
                            block1():
                              %_pred_masks.20 : Tensor? = prim::GetAttr[name="_pred_masks"](%i.20)
                              %4208 : bool = aten::__isnot__(%_pred_masks.20, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:159:11
                              %4209 : int = prim::If(%4208) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:159:8
                                block0():
                                  %t.324 : Tensor = prim::unchecked_cast(%_pred_masks.20)
                                  %4211 : int = aten::len(%t.324) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:160:19
                                  -> (%4211)
                                block1():
                                  %_pred_keypoints.24 : Tensor? = prim::GetAttr[name="_pred_keypoints"](%i.20)
                                  %4213 : bool = aten::__isnot__(%_pred_keypoints.24, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:164:11
                                  %4214 : int = prim::If(%4213) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:164:8
                                    block0():
                                      %t.348 : Tensor = prim::unchecked_cast(%_pred_keypoints.24)
                                      %4216 : int = aten::len(%t.348) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:165:19
                                      -> (%4216)
                                    block1():
                                      %_pred_keypoint_heatmaps.28 : Tensor? = prim::GetAttr[name="_pred_keypoint_heatmaps"](%i.20)
                                      %4218 : bool = aten::__isnot__(%_pred_keypoint_heatmaps.28, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:169:11
                                      %4219 : int = prim::If(%4218) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:169:8
                                        block0():
                                          %t.364 : Tensor = prim::unchecked_cast(%_pred_keypoint_heatmaps.28)
                                          %4221 : int = aten::len(%t.364) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:170:19
                                          -> (%4221)
                                        block1():
                                           = prim::RaiseException(%15, %41) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:173:8
                                          -> (%4177)
                                      -> (%4219)
                                  -> (%4214)
                              -> (%4209)
                          -> (%4204)
                      -> (%4199)
                  -> (%4192)
              -> (%4187)
          %4222 : int[] = aten::append(%num_boxes_per_image.2, %4180) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:154:26
          -> (%58)
      %mask_probs_pred.16 : Tensor[] = aten::split(%mask_probs_pred.2, %num_boxes_per_image.2, %49) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:155:22
      %4224 : int = aten::len(%mask_probs_pred.16) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:157:4
      %4225 : int = aten::len(%pred_instances.5) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:157:4
      %4226 : int[] = prim::ListConstruct(%4224, %4225)
      %4227 : int = prim::min(%4226) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:157:4
       = prim::Loop(%4227, %58) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:157:4
        block0(%4228 : int):
          %prob.2 : Tensor = aten::__getitem__(%mask_probs_pred.16, %4228) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:157:4
          %instances.2 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%pred_instances.5, %4228) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:157:4
           = prim::SetAttr[name="_pred_masks"](%instances.2, %prob.2)
          -> (%58)
      %4231 : Dict(str, Tensor) = prim::DictConstruct()
      %4232 : (__torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], Dict(str, Tensor)) = prim::TupleConstruct(%pred_instances.5, %4231)
      %results.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[], %4234 : Dict(str, Tensor) = prim::TupleUnpack(%4232)
      -> (%results.1)
    block1():
      %detected_instances.7 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::unchecked_cast(%3)
      %results.3 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = prim::ListConstruct()
      %4237 : int = aten::len(%detected_instances.7) # /home/kelechi/detectron2/detectron2/modeling/meta_arch/rcnn.py:215:33
       = prim::Loop(%4237, %58) # /home/kelechi/detectron2/detectron2/modeling/meta_arch/rcnn.py:215:33
        block0(%4238 : int):
          %x.63 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%detected_instances.7, %4238) # /home/kelechi/detectron2/detectron2/modeling/meta_arch/rcnn.py:215:33
          %pixel_mean : Tensor = prim::GetAttr[name="pixel_mean"](%model)
          %4241 : Device = prim::device(%pixel_mean)
          %image_size : (int, int) = prim::GetAttr[name="image_size"](%x.63)
          %ret.5 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = prim::CreateObject() # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:215:14
           = prim::SetAttr[name="image_size"](%ret.5, %image_size)
           = prim::SetAttr[name="_field_names"](%ret.5, %29)
           = prim::SetAttr[name="_proposal_boxes"](%ret.5, %57)
           = prim::SetAttr[name="_objectness_logits"](%ret.5, %57)
           = prim::SetAttr[name="_pred_boxes"](%ret.5, %57)
           = prim::SetAttr[name="_scores"](%ret.5, %57)
           = prim::SetAttr[name="_pred_classes"](%ret.5, %57)
           = prim::SetAttr[name="_pred_masks"](%ret.5, %57)
           = prim::SetAttr[name="_pred_keypoints"](%ret.5, %57)
           = prim::SetAttr[name="_pred_keypoint_heatmaps"](%ret.5, %57)
          %_proposal_boxes.7 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_proposal_boxes"](%x.63)
          %4245 : bool = aten::__isnot__(%_proposal_boxes.7, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:219:11
           = prim::If(%4245) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:219:8
            block0():
              %t.22 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_proposal_boxes.7)
              %tensor.87 : Tensor = prim::GetAttr[name="tensor"](%t.22)
              %4248 : Tensor = aten::to(%tensor.87, %57, %57, %4241, %57, %46, %46, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:170:21
              %4249 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject() # /home/kelechi/detectron2/detectron2/structures/boxes.py:170:15
              %tensor.12 : Tensor = aten::to(%4248, %22, %46, %46, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:150:21
              %4251 : int = aten::numel(%tensor.12) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:11
              %4252 : bool = aten::eq(%4251, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:11
              %tensor.14 : Tensor = prim::If(%4252) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:8
                block0():
                  %4254 : int[] = prim::ListConstruct(%52, %55)
                  %4255 : Tensor = aten::reshape(%tensor.12, %4254) # /home/kelechi/detectron2/detectron2/structures/boxes.py:154:21
                  %tensor.18 : Tensor = aten::to(%4255, %22, %46, %46, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:154:21
                  -> (%tensor.18)
                block1():
                  -> (%tensor.12)
              %4257 : int = aten::dim(%tensor.14) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
              %4258 : bool = aten::eq(%4257, %36) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
              %4259 : bool = prim::If(%4258) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
                block0():
                  %4260 : int = aten::size(%tensor.14, %52) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:37
                  %4261 : bool = aten::eq(%4260, %55) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:37
                  -> (%4261)
                block1():
                  -> (%46)
               = prim::If(%4259) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
                block0():
                  -> ()
                block1():
                  %4262 : int[] = aten::size(%tensor.14) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:59
                  %4263 : str = aten::str(%4262) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
                  %4264 : str = aten::add(%50, %4263) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
                   = prim::RaiseException(%4264, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
                  -> ()
               = prim::SetAttr[name="tensor"](%4249, %tensor.14)
               = prim::SetAttr[name="_proposal_boxes"](%ret.5, %4249)
              -> ()
            block1():
              -> ()
          %_objectness_logits.5 : Tensor? = prim::GetAttr[name="_objectness_logits"](%x.63)
          %4266 : bool = aten::__isnot__(%_objectness_logits.5, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:224:11
           = prim::If(%4266) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:224:8
            block0():
              %t.24 : Tensor = prim::unchecked_cast(%_objectness_logits.5)
              %4268 : Tensor = aten::to(%t.24, %4241, %57, %46, %46) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:225:37
               = prim::SetAttr[name="_objectness_logits"](%ret.5, %4268)
              -> ()
            block1():
              -> ()
          %_pred_boxes.10 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%x.63)
          %4270 : bool = aten::__isnot__(%_pred_boxes.10, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:229:11
           = prim::If(%4270) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:229:8
            block0():
              %t.42 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_pred_boxes.10)
              %tensor.91 : Tensor = prim::GetAttr[name="tensor"](%t.42)
              %4273 : Tensor = aten::to(%tensor.91, %57, %57, %4241, %57, %46, %46, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:170:21
              %4274 : __torch__.detectron2.structures.boxes.Boxes = prim::CreateObject() # /home/kelechi/detectron2/detectron2/structures/boxes.py:170:15
              %tensor.11 : Tensor = aten::to(%4273, %22, %46, %46, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:150:21
              %4276 : int = aten::numel(%tensor.11) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:11
              %4277 : bool = aten::eq(%4276, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:11
              %tensor.93 : Tensor = prim::If(%4277) # /home/kelechi/detectron2/detectron2/structures/boxes.py:151:8
                block0():
                  %4279 : int[] = prim::ListConstruct(%52, %55)
                  %4280 : Tensor = aten::reshape(%tensor.11, %4279) # /home/kelechi/detectron2/detectron2/structures/boxes.py:154:21
                  %tensor.17 : Tensor = aten::to(%4280, %22, %46, %46, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:154:21
                  -> (%tensor.17)
                block1():
                  -> (%tensor.11)
              %4282 : int = aten::dim(%tensor.93) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
              %4283 : bool = aten::eq(%4282, %36) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
              %4284 : bool = prim::If(%4283) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:15
                block0():
                  %4285 : int = aten::size(%tensor.93, %52) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:37
                  %4286 : bool = aten::eq(%4285, %55) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:37
                  -> (%4286)
                block1():
                  -> (%46)
               = prim::If(%4284) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
                block0():
                  -> ()
                block1():
                  %4287 : int[] = aten::size(%tensor.93) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:59
                  %4288 : str = aten::str(%4287) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
                  %4289 : str = aten::add(%50, %4288) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
                   = prim::RaiseException(%4289, %57) # /home/kelechi/detectron2/detectron2/structures/boxes.py:155:8
                  -> ()
               = prim::SetAttr[name="tensor"](%4274, %tensor.93)
               = prim::SetAttr[name="_pred_boxes"](%ret.5, %4274)
              -> ()
            block1():
              -> ()
          %_scores.1 : Tensor? = prim::GetAttr[name="_scores"](%x.63)
          %4291 : bool = aten::__isnot__(%_scores.1, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:234:11
           = prim::If(%4291) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:234:8
            block0():
              %t.60 : Tensor = prim::unchecked_cast(%_scores.1)
              %4293 : Tensor = aten::to(%t.60, %4241, %57, %46, %46) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:235:26
               = prim::SetAttr[name="_scores"](%ret.5, %4293)
              -> ()
            block1():
              -> ()
          %_pred_classes.19 : Tensor? = prim::GetAttr[name="_pred_classes"](%x.63)
          %4295 : bool = aten::__isnot__(%_pred_classes.19, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:239:11
           = prim::If(%4295) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:239:8
            block0():
              %t.78 : Tensor = prim::unchecked_cast(%_pred_classes.19)
              %4297 : Tensor = aten::to(%t.78, %4241, %57, %46, %46) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:240:32
               = prim::SetAttr[name="_pred_classes"](%ret.5, %4297)
              -> ()
            block1():
              -> ()
          %_pred_masks.1 : Tensor? = prim::GetAttr[name="_pred_masks"](%x.63)
          %4299 : bool = aten::__isnot__(%_pred_masks.1, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:244:11
           = prim::If(%4299) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:244:8
            block0():
              %t.96 : Tensor = prim::unchecked_cast(%_pred_masks.1)
              %4301 : Tensor = aten::to(%t.96, %4241, %57, %46, %46) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:245:30
               = prim::SetAttr[name="_pred_masks"](%ret.5, %4301)
              -> ()
            block1():
              -> ()
          %_pred_keypoints.1 : Tensor? = prim::GetAttr[name="_pred_keypoints"](%x.63)
          %4303 : bool = aten::__isnot__(%_pred_keypoints.1, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:249:11
           = prim::If(%4303) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:249:8
            block0():
              %t.114 : Tensor = prim::unchecked_cast(%_pred_keypoints.1)
              %4305 : Tensor = aten::to(%t.114, %4241, %57, %46, %46) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:250:34
               = prim::SetAttr[name="_pred_keypoints"](%ret.5, %4305)
              -> ()
            block1():
              -> ()
          %_pred_keypoint_heatmaps.1 : Tensor? = prim::GetAttr[name="_pred_keypoint_heatmaps"](%x.63)
          %4307 : bool = aten::__isnot__(%_pred_keypoint_heatmaps.1, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:254:11
           = prim::If(%4307) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:254:8
            block0():
              %t.132 : Tensor = prim::unchecked_cast(%_pred_keypoint_heatmaps.1)
              %4309 : Tensor = aten::to(%t.132, %4241, %57, %46, %46) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:255:42
               = prim::SetAttr[name="_pred_keypoint_heatmaps"](%ret.5, %4309)
              -> ()
            block1():
              -> ()
          %4310 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1[] = aten::append(%results.3, %ret.5) # /home/kelechi/detectron2/detectron2/modeling/meta_arch/rcnn.py:215:33
          -> (%58)
      %roi_heads : __torch__.detectron2.modeling.roi_heads.roi_heads.StandardROIHeads = prim::GetAttr[name="roi_heads"](%model)
      %4312 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%results.3, %49) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:774:15
      %_pred_boxes.6 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%4312)
      %4314 : bool = aten::__isnot__(%_pred_boxes.6, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:188:19
      %4315 : bool = prim::If(%4314) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:774:15
        block0():
          %4316 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%results.3, %49) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:774:50
          %_pred_classes.16 : Tensor? = prim::GetAttr[name="_pred_classes"](%4316)
          %4318 : bool = aten::__isnot__(%_pred_classes.16, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:196:19
          -> (%4318)
        block1():
          -> (%46)
       = prim::If(%4315) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:774:8
        block0():
          -> ()
        block1():
           = prim::RaiseException(%50, %57) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:774:8
          -> ()
      %features.5 : Tensor[] = prim::ListConstruct()
      %mask_in_features : str[] = prim::GetAttr[name="mask_in_features"](%roi_heads)
      %4321 : int = aten::len(%mask_in_features) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:841:23
       = prim::Loop(%4321, %58) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:841:23
        block0(%4322 : int):
          %f.1 : str = aten::__getitem__(%mask_in_features, %4322) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:841:23
          %4324 : Tensor = aten::__getitem__(%features.1, %f.1) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:841:24
          %4325 : Tensor[] = aten::append(%features.5, %4324) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:841:23
          -> (%58)
      %boxes.3 : __torch__.detectron2.structures.boxes.Boxes[] = prim::ListConstruct()
      %4327 : int = aten::len(%results.3) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:842:20
       = prim::Loop(%4327, %58) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:842:20
        block0(%4328 : int):
          %x.2 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%results.3, %4328) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:842:20
          %4330 : __torch__.detectron2.structures.boxes.Boxes = prim::Uninitialized()
          %_pred_boxes.2 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%x.2)
          %4332 : bool = aten::__isnot__(%_pred_boxes.2, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:57:15
          %t.1 : __torch__.detectron2.structures.boxes.Boxes = prim::If(%4332) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:57:8
            block0():
              %t.7 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_pred_boxes.2)
              -> (%t.7)
            block1():
               = prim::RaiseException(%20, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:57:8
              -> (%4330)
          %4335 : __torch__.detectron2.structures.boxes.Boxes[] = aten::append(%boxes.3, %t.1) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/roi_heads.py:842:20
          -> (%58)
      %mask_pooler : __torch__.detectron2.modeling.poolers.ROIPooler = prim::GetAttr[name="mask_pooler"](%roi_heads)
      %4337 : int = aten::len(%boxes.3) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:240:11
      %4338 : bool = aten::eq(%4337, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:240:11
      %features.9 : Tensor = prim::If(%4338) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:240:8
        block0():
          %4340 : Tensor = aten::__getitem__(%features.5, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:241:39
          %4341 : int[] = aten::size(%4340) # <string>:13:9
          %4342 : int = aten::__getitem__(%4341, %44) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:241:39
          %output_size.1 : (int, int) = prim::GetAttr[name="output_size"](%mask_pooler)
          %4344 : int, %4345 : int = prim::TupleUnpack(%output_size.1)
          %4346 : Tensor = aten::__getitem__(%features.5, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:241:73
          %4347 : int = prim::dtype(%4346)
          %4348 : Device = prim::device(%4346)
          %4349 : int[] = prim::ListConstruct(%49, %4342, %4344, %4345)
          %4350 : Tensor = aten::zeros(%4349, %4347, %57, %4348, %57) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:111:11
          -> (%4350)
        block1():
          %4351 : Tensor[] = prim::ListConstruct()
          %4352 : int = aten::len(%boxes.3) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:95:22
           = prim::Loop(%4352, %58) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:95:22
            block0(%4353 : int):
              %x.1 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%boxes.3, %4353) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:95:22
              %tensor.3 : Tensor = prim::GetAttr[name="tensor"](%x.1)
              %4356 : Tensor[] = aten::append(%4351, %tensor.3) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:95:22
              -> (%58)
          %boxes.2 : Tensor = aten::cat(%4351, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:95:12
          %4358 : int[] = prim::ListConstruct()
          %4359 : int = aten::len(%boxes.3) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:97:29
           = prim::Loop(%4359, %58) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:97:29
            block0(%4360 : int):
              %x.7 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%boxes.3, %4360) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:97:29
              %tensor.2 : Tensor = prim::GetAttr[name="tensor"](%x.7)
              %4363 : int[] = aten::size(%tensor.2) # <string>:13:9
              %4364 : int = aten::__getitem__(%4363, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:240:15
              %4365 : int[] = aten::append(%4358, %4364) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:97:29
              -> (%58)
          %sizes.1 : Tensor = aten::as_tensor(%4358, %57, %57) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:29:15
          %4367 : Device = prim::device(%boxes.2)
          %sizes.5 : Tensor = aten::to(%sizes.1, %57, %57, %4367, %57, %46, %46, %57) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:65:12
          %4369 : int = aten::len(%sizes.5) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:67:21
          %4370 : int = prim::dtype(%boxes.2)
          %4371 : Device = prim::device(%boxes.2)
          %4372 : Tensor = aten::arange(%4369, %4370, %57, %4371, %57) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:67:8
          %indices.2 : Tensor = aten::repeat_interleave(%4372, %sizes.5, %57, %57) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:66:14
          %4374 : Tensor = aten::slice(%indices.2, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:69:16
          %4375 : Tensor = aten::unsqueeze(%4374, %44) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:69:16
          %4376 : Tensor[] = prim::ListConstruct(%4375, %boxes.2)
          %pooler_fmt_boxes.13 : Tensor = aten::cat(%4376, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:72:11
          %min_level.5 : int = prim::GetAttr[name="min_level"](%mask_pooler)
          %max_level.5 : int = prim::GetAttr[name="max_level"](%mask_pooler)
          %canonical_box_size.5 : int = prim::GetAttr[name="canonical_box_size"](%mask_pooler)
          %canonical_level.5 : int = prim::GetAttr[name="canonical_level"](%mask_pooler)
          %4382 : Tensor[] = prim::ListConstruct()
          %4383 : int = aten::len(%boxes.3) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:51:31
           = prim::Loop(%4383, %58) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:51:31
            block0(%4384 : int):
              %boxes.1 : __torch__.detectron2.structures.boxes.Boxes = aten::__getitem__(%boxes.3, %4384) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:51:31
              %tensor.5 : Tensor = prim::GetAttr[name="tensor"](%boxes.1)
              %4387 : Tensor = aten::slice(%tensor.5, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:16
              %4388 : Tensor = aten::select(%4387, %44, %36) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:16
              %4389 : Tensor = aten::slice(%tensor.5, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:28
              %4390 : Tensor = aten::select(%4389, %44, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:28
              %4391 : Tensor = aten::sub(%4388, %4390, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:16
              %4392 : Tensor = aten::slice(%tensor.5, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:42
              %4393 : Tensor = aten::select(%4392, %44, %35) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:42
              %4394 : Tensor = aten::slice(%tensor.5, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:54
              %4395 : Tensor = aten::select(%4394, %44, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:54
              %4396 : Tensor = aten::sub(%4393, %4395, %44) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:42
              %area.1 : Tensor = aten::mul(%4391, %4396) # /home/kelechi/detectron2/detectron2/structures/boxes.py:180:16
              %4398 : Tensor[] = aten::append(%4382, %area.1) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:51:31
              -> (%58)
          %4399 : int = aten::len(%4382) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:7
          %4400 : bool = aten::eq(%4399, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:7
          %4401 : Tensor = prim::If(%4400) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:4
            block0():
              %4402 : Tensor = aten::__getitem__(%4382, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:71:15
              -> (%4402)
            block1():
              %4403 : Tensor = aten::cat(%4382, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:72:11
              -> (%4403)
          %box_sizes.1 : Tensor = aten::sqrt(%4401) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:51:16
          %4405 : Tensor = aten::div(%box_sizes.1, %canonical_box_size.5) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:54:37
          %4406 : Tensor = aten::add(%4405, %16, %44) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:54:37
          %4407 : Tensor = aten::log2(%4406) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:54:26
          %4408 : Tensor = aten::add(%4407, %canonical_level.5, %44) # <string>:5:9
          %level_assignments.1 : Tensor = aten::floor(%4408) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:53:24
          %level_assignments.5 : Tensor = aten::clamp(%level_assignments.1, %min_level.5, %max_level.5) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:58:24
          %4411 : Tensor = aten::to(%level_assignments.5, %55, %46, %46, %57) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:59:11
          %level_assignments.13 : Tensor = aten::sub(%4411, %min_level.5, %44) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:59:11
          %4413 : Tensor = aten::__getitem__(%features.5, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:252:23
          %4414 : int[] = aten::size(%4413) # <string>:13:9
          %num_channels.7 : int = aten::__getitem__(%4414, %44) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:252:23
          %output_size.17 : (int, int) = prim::GetAttr[name="output_size"](%mask_pooler)
          %output_size.21 : int = prim::TupleIndex(%output_size.17, %49)
          %4418 : Tensor = aten::__getitem__(%features.5, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:255:89
          %4419 : int[] = aten::size(%pooler_fmt_boxes.13) # <string>:13:9
          %4420 : int = aten::__getitem__(%4419, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:109:14
          %4421 : int = prim::dtype(%4418)
          %4422 : Device = prim::device(%4418)
          %4423 : int[] = prim::ListConstruct(%4420, %num_channels.7, %output_size.21, %output_size.21)
          %output.15 : Tensor = aten::zeros(%4423, %4421, %57, %4422, %57) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:111:11
          %level_poolers.13 : __torch__.torch.nn.modules.container.___torch_mangle_38.ModuleList = prim::GetAttr[name="level_poolers"](%mask_pooler)
          %_0.11 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="0"](%level_poolers.13)
          %_1.11 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="1"](%level_poolers.13)
          %_2.11 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="2"](%level_poolers.13)
          %_3.11 : __torch__.detectron2.layers.roi_align.ROIAlign = prim::GetAttr[name="3"](%level_poolers.13)
          %4430 : Tensor = aten::eq(%level_assignments.13, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:258:33
          %4431 : int = aten::dim(%4430) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:11
          %4432 : bool = aten::eq(%4431, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:11
          %4433 : Tensor[] = prim::If(%4432) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:8
            block0():
              %4434 : Tensor = aten::unsqueeze(%4430, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              %4435 : Tensor = aten::nonzero(%4434) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              %4436 : Tensor[] = aten::unbind(%4435, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              -> (%4436)
            block1():
              %4437 : Tensor = aten::nonzero(%4430) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:166:15
              %4438 : Tensor[] = aten::unbind(%4437, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:166:15
              -> (%4438)
          %inds.55 : Tensor = aten::__getitem__(%4433, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:258:19
          %4440 : Tensor?[] = prim::ListConstruct(%inds.55)
          %pooler_fmt_boxes_level.31 : Tensor = aten::index(%pooler_fmt_boxes.13, %4440) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:259:37
          %4442 : Tensor = aten::__getitem__(%features.5, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:261:46
          %4443 : int = aten::dim(%pooler_fmt_boxes_level.31) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
          %4444 : bool = aten::eq(%4443, %36) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
          %4445 : bool = prim::If(%4444) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
            block0():
              %4446 : int = aten::size(%pooler_fmt_boxes_level.31, %44) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:35
              %4447 : bool = aten::eq(%4446, %40) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:35
              -> (%4447)
            block1():
              -> (%46)
           = prim::If(%4445) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%50, %57) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:8
              -> ()
          %4448 : bool = prim::is_quantized(%4442)
          %input.10 : Tensor = prim::If(%4448) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:56:8
            block0():
              %input.12 : Tensor = aten::dequantize(%4442) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:57:20
              -> (%input.12)
            block1():
              -> (%4442)
          %4451 : int = prim::dtype(%input.10)
          %4452 : Tensor = aten::to(%pooler_fmt_boxes_level.31, %4451, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:60:12
          %output_size.4 : (int, int) = prim::GetAttr[name="output_size"](%_0.11)
          %spatial_scale.3 : float = prim::GetAttr[name="spatial_scale"](%_0.11)
          %sampling_ratio.3 : int = prim::GetAttr[name="sampling_ratio"](%_0.11)
          %aligned.3 : bool = prim::GetAttr[name="aligned"](%_0.11)
          %4457 : int, %4458 : int = prim::TupleUnpack(%output_size.4)
          %4459 : bool = prim::isinstance[types=[list, tuple]](%4452)
           = prim::If(%4459) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:4
            block0():
              %boxes.10 : Tensor[] = prim::unchecked_cast(%4452)
              %4461 : int = aten::len(%boxes.10) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
               = prim::Loop(%4461, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
                block0(%4462 : int):
                  %_tensor.4 : Tensor = aten::__getitem__(%boxes.10, %4462) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
                  %4464 : int = aten::size(%_tensor.4, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:32:16
                  %4465 : bool = aten::eq(%4464, %55) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:32:16
                   = prim::If(%4465) # <string>:8:2
                    block0():
                      -> ()
                    block1():
                       = prim::RaiseException(%17, %57) # <string>:8:2
                      -> ()
                  -> (%58)
              -> ()
            block1():
              %4466 : int = aten::size(%4452, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:35:22
              %4467 : bool = aten::eq(%4466, %40) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:35:22
               = prim::If(%4467) # <string>:8:2
                block0():
                  -> ()
                block1():
                   = prim::RaiseException(%18, %57) # <string>:8:2
                  -> ()
              -> ()
          %4468 : bool = prim::isinstance[types=[Tensor]](%4452)
          %4469 : bool = aten::__not__(%4468) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:249:7
          %rois.14 : Tensor = prim::If(%4469) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:249:4
            block0():
              %rois.16 : Tensor[] = prim::unchecked_cast(%4452)
              %4472 : Tensor[] = prim::ListConstruct()
              %4473 : int = aten::len(%rois.16) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
               = prim::Loop(%4473, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                block0(%4474 : int):
                  %b.8 : Tensor = aten::__getitem__(%rois.16, %4474) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                  %4476 : Tensor[] = aten::append(%4472, %b.8) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                  -> (%58)
              %4477 : int = aten::len(%4472) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %4478 : bool = aten::eq(%4477, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %concat_boxes.4 : Tensor = prim::If(%4478) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:4
                block0():
                  %4480 : Tensor = aten::__getitem__(%4472, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:15
                  -> (%4480)
                block1():
                  %4481 : Tensor = aten::cat(%4472, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:15:11
                  -> (%4481)
              %4482 : Tensor[] = prim::ListConstruct()
              %4483 : int = aten::len(%rois.16) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
              %4484 : int[] = prim::ListConstruct(%48, %4483)
              %4485 : int = prim::min(%4484) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
               = prim::Loop(%4485, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
                block0(%i.4 : int):
                  %b.10 : Tensor = aten::__getitem__(%rois.16, %i.4) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
                  %4488 : Tensor = aten::slice(%b.10, %49, %57, %57, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:36
                  %4489 : Tensor = aten::slice(%4488, %44, %57, %44, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:36
                  %4490 : Tensor = aten::full_like(%4489, %i.4, %57, %57, %57, %57, %57) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:20
                  %4491 : Tensor[] = aten::append(%4482, %4490) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:8
                  -> (%58)
              %4492 : int = aten::len(%4482) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %4493 : bool = aten::eq(%4492, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %ids.4 : Tensor = prim::If(%4493) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:4
                block0():
                  %4495 : Tensor = aten::__getitem__(%4482, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:15
                  -> (%4495)
                block1():
                  %4496 : Tensor = aten::cat(%4482, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:15:11
                  -> (%4496)
              %4497 : Tensor[] = prim::ListConstruct(%ids.4, %concat_boxes.4)
              %rois.18 : Tensor = aten::cat(%4497, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:24:11
              -> (%rois.18)
            block1():
              -> (%4452)
          %4499 : Tensor = torchvision::roi_align(%input.10, %rois.14, %spatial_scale.3, %4457, %4458, %sampling_ratio.3, %aligned.3) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:257:11
          %4500 : Tensor?[] = prim::ListConstruct(%inds.55)
          %4501 : Tensor = aten::index_put_(%output.15, %4500, %4499, %46) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:261:12
          %4502 : Tensor = aten::eq(%level_assignments.13, %44) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:258:33
          %4503 : int = aten::dim(%4502) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:11
          %4504 : bool = aten::eq(%4503, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:11
          %4505 : Tensor[] = prim::If(%4504) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:8
            block0():
              %4506 : Tensor = aten::unsqueeze(%4502, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              %4507 : Tensor = aten::nonzero(%4506) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              %4508 : Tensor[] = aten::unbind(%4507, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              -> (%4508)
            block1():
              %4509 : Tensor = aten::nonzero(%4502) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:166:15
              %4510 : Tensor[] = aten::unbind(%4509, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:166:15
              -> (%4510)
          %inds.59 : Tensor = aten::__getitem__(%4505, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:258:19
          %4512 : Tensor?[] = prim::ListConstruct(%inds.59)
          %pooler_fmt_boxes_level.35 : Tensor = aten::index(%pooler_fmt_boxes.13, %4512) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:259:37
          %4514 : Tensor = aten::__getitem__(%features.5, %44) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:261:46
          %4515 : int = aten::dim(%pooler_fmt_boxes_level.35) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
          %4516 : bool = aten::eq(%4515, %36) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
          %4517 : bool = prim::If(%4516) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
            block0():
              %4518 : int = aten::size(%pooler_fmt_boxes_level.35, %44) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:35
              %4519 : bool = aten::eq(%4518, %40) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:35
              -> (%4519)
            block1():
              -> (%46)
           = prim::If(%4517) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%50, %57) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:8
              -> ()
          %4520 : bool = prim::is_quantized(%4514)
          %input.14 : Tensor = prim::If(%4520) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:56:8
            block0():
              %input.16 : Tensor = aten::dequantize(%4514) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:57:20
              -> (%input.16)
            block1():
              -> (%4514)
          %4523 : int = prim::dtype(%input.14)
          %4524 : Tensor = aten::to(%pooler_fmt_boxes_level.35, %4523, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:60:12
          %output_size.6 : (int, int) = prim::GetAttr[name="output_size"](%_1.11)
          %spatial_scale.5 : float = prim::GetAttr[name="spatial_scale"](%_1.11)
          %sampling_ratio.5 : int = prim::GetAttr[name="sampling_ratio"](%_1.11)
          %aligned.5 : bool = prim::GetAttr[name="aligned"](%_1.11)
          %4529 : int, %4530 : int = prim::TupleUnpack(%output_size.6)
          %4531 : bool = prim::isinstance[types=[list, tuple]](%4524)
           = prim::If(%4531) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:4
            block0():
              %boxes.12 : Tensor[] = prim::unchecked_cast(%4524)
              %4533 : int = aten::len(%boxes.12) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
               = prim::Loop(%4533, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
                block0(%4534 : int):
                  %_tensor.6 : Tensor = aten::__getitem__(%boxes.12, %4534) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
                  %4536 : int = aten::size(%_tensor.6, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:32:16
                  %4537 : bool = aten::eq(%4536, %55) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:32:16
                   = prim::If(%4537) # <string>:8:2
                    block0():
                      -> ()
                    block1():
                       = prim::RaiseException(%17, %57) # <string>:8:2
                      -> ()
                  -> (%58)
              -> ()
            block1():
              %4538 : int = aten::size(%4524, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:35:22
              %4539 : bool = aten::eq(%4538, %40) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:35:22
               = prim::If(%4539) # <string>:8:2
                block0():
                  -> ()
                block1():
                   = prim::RaiseException(%18, %57) # <string>:8:2
                  -> ()
              -> ()
          %4540 : bool = prim::isinstance[types=[Tensor]](%4524)
          %4541 : bool = aten::__not__(%4540) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:249:7
          %rois.20 : Tensor = prim::If(%4541) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:249:4
            block0():
              %rois.22 : Tensor[] = prim::unchecked_cast(%4524)
              %4544 : Tensor[] = prim::ListConstruct()
              %4545 : int = aten::len(%rois.22) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
               = prim::Loop(%4545, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                block0(%4546 : int):
                  %b.12 : Tensor = aten::__getitem__(%rois.22, %4546) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                  %4548 : Tensor[] = aten::append(%4544, %b.12) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                  -> (%58)
              %4549 : int = aten::len(%4544) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %4550 : bool = aten::eq(%4549, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %concat_boxes.6 : Tensor = prim::If(%4550) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:4
                block0():
                  %4552 : Tensor = aten::__getitem__(%4544, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:15
                  -> (%4552)
                block1():
                  %4553 : Tensor = aten::cat(%4544, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:15:11
                  -> (%4553)
              %4554 : Tensor[] = prim::ListConstruct()
              %4555 : int = aten::len(%rois.22) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
              %4556 : int[] = prim::ListConstruct(%48, %4555)
              %4557 : int = prim::min(%4556) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
               = prim::Loop(%4557, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
                block0(%i.6 : int):
                  %b.14 : Tensor = aten::__getitem__(%rois.22, %i.6) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
                  %4560 : Tensor = aten::slice(%b.14, %49, %57, %57, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:36
                  %4561 : Tensor = aten::slice(%4560, %44, %57, %44, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:36
                  %4562 : Tensor = aten::full_like(%4561, %i.6, %57, %57, %57, %57, %57) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:20
                  %4563 : Tensor[] = aten::append(%4554, %4562) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:8
                  -> (%58)
              %4564 : int = aten::len(%4554) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %4565 : bool = aten::eq(%4564, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %ids.6 : Tensor = prim::If(%4565) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:4
                block0():
                  %4567 : Tensor = aten::__getitem__(%4554, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:15
                  -> (%4567)
                block1():
                  %4568 : Tensor = aten::cat(%4554, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:15:11
                  -> (%4568)
              %4569 : Tensor[] = prim::ListConstruct(%ids.6, %concat_boxes.6)
              %rois.24 : Tensor = aten::cat(%4569, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:24:11
              -> (%rois.24)
            block1():
              -> (%4524)
          %4571 : Tensor = torchvision::roi_align(%input.14, %rois.20, %spatial_scale.5, %4529, %4530, %sampling_ratio.5, %aligned.5) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:257:11
          %4572 : Tensor?[] = prim::ListConstruct(%inds.59)
          %4573 : Tensor = aten::index_put_(%output.15, %4572, %4571, %46) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:261:12
          %4574 : Tensor = aten::eq(%level_assignments.13, %36) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:258:33
          %4575 : int = aten::dim(%4574) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:11
          %4576 : bool = aten::eq(%4575, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:11
          %4577 : Tensor[] = prim::If(%4576) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:8
            block0():
              %4578 : Tensor = aten::unsqueeze(%4574, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              %4579 : Tensor = aten::nonzero(%4578) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              %4580 : Tensor[] = aten::unbind(%4579, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              -> (%4580)
            block1():
              %4581 : Tensor = aten::nonzero(%4574) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:166:15
              %4582 : Tensor[] = aten::unbind(%4581, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:166:15
              -> (%4582)
          %inds.63 : Tensor = aten::__getitem__(%4577, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:258:19
          %4584 : Tensor?[] = prim::ListConstruct(%inds.63)
          %pooler_fmt_boxes_level.39 : Tensor = aten::index(%pooler_fmt_boxes.13, %4584) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:259:37
          %4586 : Tensor = aten::__getitem__(%features.5, %36) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:261:46
          %4587 : int = aten::dim(%pooler_fmt_boxes_level.39) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
          %4588 : bool = aten::eq(%4587, %36) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
          %4589 : bool = prim::If(%4588) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
            block0():
              %4590 : int = aten::size(%pooler_fmt_boxes_level.39, %44) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:35
              %4591 : bool = aten::eq(%4590, %40) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:35
              -> (%4591)
            block1():
              -> (%46)
           = prim::If(%4589) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%50, %57) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:8
              -> ()
          %4592 : bool = prim::is_quantized(%4586)
          %input.18 : Tensor = prim::If(%4592) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:56:8
            block0():
              %input.20 : Tensor = aten::dequantize(%4586) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:57:20
              -> (%input.20)
            block1():
              -> (%4586)
          %4595 : int = prim::dtype(%input.18)
          %4596 : Tensor = aten::to(%pooler_fmt_boxes_level.39, %4595, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:60:12
          %output_size.8 : (int, int) = prim::GetAttr[name="output_size"](%_2.11)
          %spatial_scale.7 : float = prim::GetAttr[name="spatial_scale"](%_2.11)
          %sampling_ratio.7 : int = prim::GetAttr[name="sampling_ratio"](%_2.11)
          %aligned.7 : bool = prim::GetAttr[name="aligned"](%_2.11)
          %4601 : int, %4602 : int = prim::TupleUnpack(%output_size.8)
          %4603 : bool = prim::isinstance[types=[list, tuple]](%4596)
           = prim::If(%4603) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:4
            block0():
              %boxes.14 : Tensor[] = prim::unchecked_cast(%4596)
              %4605 : int = aten::len(%boxes.14) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
               = prim::Loop(%4605, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
                block0(%4606 : int):
                  %_tensor.8 : Tensor = aten::__getitem__(%boxes.14, %4606) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
                  %4608 : int = aten::size(%_tensor.8, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:32:16
                  %4609 : bool = aten::eq(%4608, %55) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:32:16
                   = prim::If(%4609) # <string>:8:2
                    block0():
                      -> ()
                    block1():
                       = prim::RaiseException(%17, %57) # <string>:8:2
                      -> ()
                  -> (%58)
              -> ()
            block1():
              %4610 : int = aten::size(%4596, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:35:22
              %4611 : bool = aten::eq(%4610, %40) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:35:22
               = prim::If(%4611) # <string>:8:2
                block0():
                  -> ()
                block1():
                   = prim::RaiseException(%18, %57) # <string>:8:2
                  -> ()
              -> ()
          %4612 : bool = prim::isinstance[types=[Tensor]](%4596)
          %4613 : bool = aten::__not__(%4612) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:249:7
          %rois.26 : Tensor = prim::If(%4613) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:249:4
            block0():
              %rois.28 : Tensor[] = prim::unchecked_cast(%4596)
              %4616 : Tensor[] = prim::ListConstruct()
              %4617 : int = aten::len(%rois.28) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
               = prim::Loop(%4617, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                block0(%4618 : int):
                  %b.16 : Tensor = aten::__getitem__(%rois.28, %4618) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                  %4620 : Tensor[] = aten::append(%4616, %b.16) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                  -> (%58)
              %4621 : int = aten::len(%4616) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %4622 : bool = aten::eq(%4621, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %concat_boxes.8 : Tensor = prim::If(%4622) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:4
                block0():
                  %4624 : Tensor = aten::__getitem__(%4616, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:15
                  -> (%4624)
                block1():
                  %4625 : Tensor = aten::cat(%4616, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:15:11
                  -> (%4625)
              %4626 : Tensor[] = prim::ListConstruct()
              %4627 : int = aten::len(%rois.28) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
              %4628 : int[] = prim::ListConstruct(%48, %4627)
              %4629 : int = prim::min(%4628) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
               = prim::Loop(%4629, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
                block0(%i.8 : int):
                  %b.18 : Tensor = aten::__getitem__(%rois.28, %i.8) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
                  %4632 : Tensor = aten::slice(%b.18, %49, %57, %57, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:36
                  %4633 : Tensor = aten::slice(%4632, %44, %57, %44, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:36
                  %4634 : Tensor = aten::full_like(%4633, %i.8, %57, %57, %57, %57, %57) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:20
                  %4635 : Tensor[] = aten::append(%4626, %4634) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:8
                  -> (%58)
              %4636 : int = aten::len(%4626) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %4637 : bool = aten::eq(%4636, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %ids.8 : Tensor = prim::If(%4637) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:4
                block0():
                  %4639 : Tensor = aten::__getitem__(%4626, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:15
                  -> (%4639)
                block1():
                  %4640 : Tensor = aten::cat(%4626, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:15:11
                  -> (%4640)
              %4641 : Tensor[] = prim::ListConstruct(%ids.8, %concat_boxes.8)
              %rois.30 : Tensor = aten::cat(%4641, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:24:11
              -> (%rois.30)
            block1():
              -> (%4596)
          %4643 : Tensor = torchvision::roi_align(%input.18, %rois.26, %spatial_scale.7, %4601, %4602, %sampling_ratio.7, %aligned.7) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:257:11
          %4644 : Tensor?[] = prim::ListConstruct(%inds.63)
          %4645 : Tensor = aten::index_put_(%output.15, %4644, %4643, %46) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:261:12
          %4646 : Tensor = aten::eq(%level_assignments.13, %35) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:258:33
          %4647 : int = aten::dim(%4646) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:11
          %4648 : bool = aten::eq(%4647, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:11
          %4649 : Tensor[] = prim::If(%4648) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:164:8
            block0():
              %4650 : Tensor = aten::unsqueeze(%4646, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              %4651 : Tensor = aten::nonzero(%4650) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              %4652 : Tensor[] = aten::unbind(%4651, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:165:19
              -> (%4652)
            block1():
              %4653 : Tensor = aten::nonzero(%4646) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:166:15
              %4654 : Tensor[] = aten::unbind(%4653, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:166:15
              -> (%4654)
          %inds.67 : Tensor = aten::__getitem__(%4649, %49) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:258:19
          %4656 : Tensor?[] = prim::ListConstruct(%inds.67)
          %pooler_fmt_boxes_level.43 : Tensor = aten::index(%pooler_fmt_boxes.13, %4656) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:259:37
          %4658 : Tensor = aten::__getitem__(%features.5, %35) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:261:46
          %4659 : int = aten::dim(%pooler_fmt_boxes_level.43) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
          %4660 : bool = aten::eq(%4659, %36) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
          %4661 : bool = prim::If(%4660) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:15
            block0():
              %4662 : int = aten::size(%pooler_fmt_boxes_level.43, %44) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:35
              %4663 : bool = aten::eq(%4662, %40) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:35
              -> (%4663)
            block1():
              -> (%46)
           = prim::If(%4661) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:8
            block0():
              -> ()
            block1():
               = prim::RaiseException(%50, %57) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:55:8
              -> ()
          %4664 : bool = prim::is_quantized(%4658)
          %input : Tensor = prim::If(%4664) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:56:8
            block0():
              %input.7 : Tensor = aten::dequantize(%4658) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:57:20
              -> (%input.7)
            block1():
              -> (%4658)
          %4667 : int = prim::dtype(%input)
          %4668 : Tensor = aten::to(%pooler_fmt_boxes_level.43, %4667, %46, %46, %57) # /home/kelechi/detectron2/detectron2/layers/roi_align.py:60:12
          %output_size : (int, int) = prim::GetAttr[name="output_size"](%_3.11)
          %spatial_scale : float = prim::GetAttr[name="spatial_scale"](%_3.11)
          %sampling_ratio : int = prim::GetAttr[name="sampling_ratio"](%_3.11)
          %aligned : bool = prim::GetAttr[name="aligned"](%_3.11)
          %4673 : int, %4674 : int = prim::TupleUnpack(%output_size)
          %4675 : bool = prim::isinstance[types=[list, tuple]](%4668)
           = prim::If(%4675) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:29:4
            block0():
              %boxes.7 : Tensor[] = prim::unchecked_cast(%4668)
              %4677 : int = aten::len(%boxes.7) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
               = prim::Loop(%4677, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
                block0(%4678 : int):
                  %_tensor.1 : Tensor = aten::__getitem__(%boxes.7, %4678) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:30:8
                  %4680 : int = aten::size(%_tensor.1, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:32:16
                  %4681 : bool = aten::eq(%4680, %55) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:32:16
                   = prim::If(%4681) # <string>:8:2
                    block0():
                      -> ()
                    block1():
                       = prim::RaiseException(%17, %57) # <string>:8:2
                      -> ()
                  -> (%58)
              -> ()
            block1():
              %4682 : int = aten::size(%4668, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:35:22
              %4683 : bool = aten::eq(%4682, %40) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:35:22
               = prim::If(%4683) # <string>:8:2
                block0():
                  -> ()
                block1():
                   = prim::RaiseException(%18, %57) # <string>:8:2
                  -> ()
              -> ()
          %4684 : bool = prim::isinstance[types=[Tensor]](%4668)
          %4685 : bool = aten::__not__(%4684) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:249:7
          %rois : Tensor = prim::If(%4685) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:249:4
            block0():
              %rois.5 : Tensor[] = prim::unchecked_cast(%4668)
              %4688 : Tensor[] = prim::ListConstruct()
              %4689 : int = aten::len(%rois.5) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
               = prim::Loop(%4689, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                block0(%4690 : int):
                  %b.1 : Tensor = aten::__getitem__(%rois.5, %4690) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                  %4692 : Tensor[] = aten::append(%4688, %b.1) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:19:24
                  -> (%58)
              %4693 : int = aten::len(%4688) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %4694 : bool = aten::eq(%4693, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %concat_boxes.1 : Tensor = prim::If(%4694) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:4
                block0():
                  %4696 : Tensor = aten::__getitem__(%4688, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:15
                  -> (%4696)
                block1():
                  %4697 : Tensor = aten::cat(%4688, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:15:11
                  -> (%4697)
              %4698 : Tensor[] = prim::ListConstruct()
              %4699 : int = aten::len(%rois.5) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
              %4700 : int[] = prim::ListConstruct(%48, %4699)
              %4701 : int = prim::min(%4700) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
               = prim::Loop(%4701, %58) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
                block0(%i.2 : int):
                  %b.5 : Tensor = aten::__getitem__(%rois.5, %i.2) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:21:4
                  %4704 : Tensor = aten::slice(%b.5, %49, %57, %57, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:36
                  %4705 : Tensor = aten::slice(%4704, %44, %57, %44, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:36
                  %4706 : Tensor = aten::full_like(%4705, %i.2, %57, %57, %57, %57, %57) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:20
                  %4707 : Tensor[] = aten::append(%4698, %4706) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:22:8
                  -> (%58)
              %4708 : int = aten::len(%4698) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %4709 : bool = aten::eq(%4708, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:7
              %ids.1 : Tensor = prim::If(%4709) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:13:4
                block0():
                  %4711 : Tensor = aten::__getitem__(%4698, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:14:15
                  -> (%4711)
                block1():
                  %4712 : Tensor = aten::cat(%4698, %49) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:15:11
                  -> (%4712)
              %4713 : Tensor[] = prim::ListConstruct(%ids.1, %concat_boxes.1)
              %rois.11 : Tensor = aten::cat(%4713, %44) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/_utils.py:24:11
              -> (%rois.11)
            block1():
              -> (%4668)
          %4715 : Tensor = torchvision::roi_align(%input, %rois, %spatial_scale, %4673, %4674, %sampling_ratio, %aligned) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torchvision/ops/roi_align.py:257:11
          %4716 : Tensor?[] = prim::ListConstruct(%inds.67)
          %4717 : Tensor = aten::index_put_(%output.15, %4716, %4715, %46) # /home/kelechi/detectron2/detectron2/modeling/poolers.py:261:12
          -> (%output.15)
      %mask_head : __torch__.detectron2.modeling.roi_heads.mask_head.MaskRCNNConvUpsampleHead = prim::GetAttr[name="mask_head"](%roi_heads)
      %mask_fcn1 : __torch__.detectron2.layers.wrappers.___torch_mangle_36.Conv2d = prim::GetAttr[name="mask_fcn1"](%mask_head)
      %mask_fcn2 : __torch__.detectron2.layers.wrappers.___torch_mangle_36.Conv2d = prim::GetAttr[name="mask_fcn2"](%mask_head)
      %mask_fcn3 : __torch__.detectron2.layers.wrappers.___torch_mangle_36.Conv2d = prim::GetAttr[name="mask_fcn3"](%mask_head)
      %mask_fcn4 : __torch__.detectron2.layers.wrappers.___torch_mangle_36.Conv2d = prim::GetAttr[name="mask_fcn4"](%mask_head)
      %deconv : __torch__.torch.nn.modules.conv.ConvTranspose2d = prim::GetAttr[name="deconv"](%mask_head)
      %predictor : __torch__.detectron2.layers.wrappers.___torch_mangle_42.Conv2d = prim::GetAttr[name="predictor"](%mask_head)
      %weight.1 : Tensor = prim::GetAttr[name="weight"](%mask_fcn1)
      %bias.1 : Tensor? = prim::GetAttr[name="bias"](%mask_fcn1)
      %4727 : int[] = prim::ListConstruct(%44, %44)
      %4728 : int[] = prim::ListConstruct(%44, %44)
      %4729 : int[] = prim::ListConstruct(%44, %44)
      %x.14 : Tensor = aten::conv2d(%features.9, %weight.1, %bias.1, %4727, %4728, %4729, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
      %x.6 : Tensor = aten::relu(%x.14) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:1500:17
      %weight.3 : Tensor = prim::GetAttr[name="weight"](%mask_fcn2)
      %bias.3 : Tensor? = prim::GetAttr[name="bias"](%mask_fcn2)
      %4734 : int[] = prim::ListConstruct(%44, %44)
      %4735 : int[] = prim::ListConstruct(%44, %44)
      %4736 : int[] = prim::ListConstruct(%44, %44)
      %x.18 : Tensor = aten::conv2d(%x.6, %weight.3, %bias.3, %4734, %4735, %4736, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
      %x.10 : Tensor = aten::relu(%x.18) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:1500:17
      %weight.5 : Tensor = prim::GetAttr[name="weight"](%mask_fcn3)
      %bias.5 : Tensor? = prim::GetAttr[name="bias"](%mask_fcn3)
      %4741 : int[] = prim::ListConstruct(%44, %44)
      %4742 : int[] = prim::ListConstruct(%44, %44)
      %4743 : int[] = prim::ListConstruct(%44, %44)
      %x.22 : Tensor = aten::conv2d(%x.10, %weight.5, %bias.5, %4741, %4742, %4743, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
      %x.13 : Tensor = aten::relu(%x.22) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:1500:17
      %weight.7 : Tensor = prim::GetAttr[name="weight"](%mask_fcn4)
      %bias.7 : Tensor? = prim::GetAttr[name="bias"](%mask_fcn4)
      %4748 : int[] = prim::ListConstruct(%44, %44)
      %4749 : int[] = prim::ListConstruct(%44, %44)
      %4750 : int[] = prim::ListConstruct(%44, %44)
      %x.30 : Tensor = aten::conv2d(%x.13, %weight.7, %bias.7, %4748, %4749, %4750, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
      %x.17 : Tensor = aten::relu(%x.30) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:1500:17
      %ret.4 : int[] = prim::ListConstruct(%49, %49)
      %weight.9 : Tensor = prim::GetAttr[name="weight"](%deconv)
      %bias.9 : Tensor? = prim::GetAttr[name="bias"](%deconv)
      %4756 : int[] = prim::ListConstruct(%36, %36)
      %4757 : int[] = prim::ListConstruct(%49, %49)
      %4758 : int[] = prim::ListConstruct(%44, %44)
      %x.21 : Tensor = aten::conv_transpose2d(%x.17, %weight.9, %bias.9, %4756, %4757, %ret.4, %44, %4758) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/modules/conv.py:948:15
      %x.25 : Tensor = aten::relu(%x.21) # /home/kelechi/miniconda3/envs/apollo/lib/python3.8/site-packages/torch/nn/functional.py:1500:17
      %weight : Tensor = prim::GetAttr[name="weight"](%predictor)
      %bias : Tensor? = prim::GetAttr[name="bias"](%predictor)
      %4763 : int[] = prim::ListConstruct(%44, %44)
      %4764 : int[] = prim::ListConstruct(%49, %49)
      %4765 : int[] = prim::ListConstruct(%44, %44)
      %x.5 : Tensor = aten::conv2d(%x.25, %weight, %bias, %4763, %4764, %4765, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:142:12
      %4767 : int = aten::size(%x.5, %44) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:137:24
      %cls_agnostic_mask.1 : bool = aten::eq(%4767, %44) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:137:24
      %mask_probs_pred : Tensor = prim::If(%cls_agnostic_mask.1) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:139:4
        block0():
          %mask_probs_pred.1 : Tensor = aten::sigmoid(%x.5) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:140:26
          -> (%mask_probs_pred.1)
        block1():
          %4771 : int[] = aten::size(%x.5) # <string>:13:9
          %num_masks.1 : int = aten::__getitem__(%4771, %49) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:143:20
          %4773 : Tensor[] = prim::ListConstruct()
          %4774 : int = aten::len(%results.3) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:144:25
           = prim::Loop(%4774, %58) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:144:25
            block0(%4775 : int):
              %i.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%results.3, %4775) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:144:25
              %4777 : Tensor = prim::Uninitialized()
              %_pred_classes.2 : Tensor? = prim::GetAttr[name="_pred_classes"](%i.1)
              %4779 : bool = aten::__isnot__(%_pred_classes.2, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:83:15
              %t : Tensor = prim::If(%4779) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:83:8
                block0():
                  %t.6 : Tensor = prim::unchecked_cast(%_pred_classes.2)
                  -> (%t.6)
                block1():
                   = prim::RaiseException(%21, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:83:8
                  -> (%4777)
              %4782 : Tensor[] = aten::append(%4773, %t) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:144:25
              -> (%58)
          %4783 : int = aten::len(%4773) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:7
          %4784 : bool = aten::eq(%4783, %44) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:7
          %class_pred.1 : Tensor = prim::If(%4784) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:70:4
            block0():
              %4786 : Tensor = aten::__getitem__(%4773, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:71:15
              -> (%4786)
            block1():
              %4787 : Tensor = aten::cat(%4773, %49) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:72:11
              -> (%4787)
          %device.1 : Device = prim::device(%class_pred.1)
          %4789 : Tensor = aten::arange(%num_masks.1, %57, %57, %device.1, %57) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:150:35
          %4790 : Device = prim::device(%class_pred.1)
          %indices.1 : Tensor = aten::to(%4789, %4790, %57, %46, %46) # /home/kelechi/detectron2/detectron2/layers/wrappers.py:177:11
          %4792 : Tensor?[] = prim::ListConstruct(%indices.1, %class_pred.1)
          %4793 : Tensor = aten::index(%x.5, %4792) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:151:26
          %4794 : Tensor = aten::slice(%4793, %49, %57, %57, %44) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:151:26
          %4795 : Tensor = aten::unsqueeze(%4794, %44) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:151:26
          %mask_probs_pred.3 : Tensor = aten::sigmoid(%4795) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:151:26
          -> (%mask_probs_pred.3)
      %num_boxes_per_image.1 : int[] = prim::ListConstruct()
      %4798 : int = aten::len(%results.3) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:154:26
       = prim::Loop(%4798, %58) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:154:26
        block0(%4799 : int):
          %i.5 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%results.3, %4799) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:154:26
          %4801 : int = prim::Uninitialized()
          %_proposal_boxes.6 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_proposal_boxes"](%i.5)
          %4803 : bool = aten::__isnot__(%_proposal_boxes.6, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:134:11
          %4804 : int = prim::If(%4803) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:134:8
            block0():
              %t.17 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_proposal_boxes.6)
              %tensor.42 : Tensor = prim::GetAttr[name="tensor"](%t.17)
              %4807 : int[] = aten::size(%tensor.42) # <string>:13:9
              %4808 : int = aten::__getitem__(%4807, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:240:15
              -> (%4808)
            block1():
              %_objectness_logits.1 : Tensor? = prim::GetAttr[name="_objectness_logits"](%i.5)
              %4810 : bool = aten::__isnot__(%_objectness_logits.1, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:139:11
              %4811 : int = prim::If(%4810) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:139:8
                block0():
                  %t.145 : Tensor = prim::unchecked_cast(%_objectness_logits.1)
                  %4813 : int = aten::len(%t.145) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:140:19
                  -> (%4813)
                block1():
                  %_pred_boxes.5 : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%i.5)
                  %4815 : bool = aten::__isnot__(%_pred_boxes.5, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:144:11
                  %4816 : int = prim::If(%4815) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:144:8
                    block0():
                      %t.201 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_pred_boxes.5)
                      %tensor.44 : Tensor = prim::GetAttr[name="tensor"](%t.201)
                      %4819 : int[] = aten::size(%tensor.44) # <string>:13:9
                      %4820 : int = aten::__getitem__(%4819, %49) # /home/kelechi/detectron2/detectron2/structures/boxes.py:240:15
                      -> (%4820)
                    block1():
                      %_scores.9 : Tensor? = prim::GetAttr[name="_scores"](%i.5)
                      %4822 : bool = aten::__isnot__(%_scores.9, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:149:11
                      %4823 : int = prim::If(%4822) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:149:8
                        block0():
                          %t.249 : Tensor = prim::unchecked_cast(%_scores.9)
                          %4825 : int = aten::len(%t.249) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:150:19
                          -> (%4825)
                        block1():
                          %_pred_classes.13 : Tensor? = prim::GetAttr[name="_pred_classes"](%i.5)
                          %4827 : bool = aten::__isnot__(%_pred_classes.13, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:154:11
                          %4828 : int = prim::If(%4827) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:154:8
                            block0():
                              %t.289 : Tensor = prim::unchecked_cast(%_pred_classes.13)
                              %4830 : int = aten::len(%t.289) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:155:19
                              -> (%4830)
                            block1():
                              %_pred_masks.17 : Tensor? = prim::GetAttr[name="_pred_masks"](%i.5)
                              %4832 : bool = aten::__isnot__(%_pred_masks.17, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:159:11
                              %4833 : int = prim::If(%4832) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:159:8
                                block0():
                                  %t.321 : Tensor = prim::unchecked_cast(%_pred_masks.17)
                                  %4835 : int = aten::len(%t.321) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:160:19
                                  -> (%4835)
                                block1():
                                  %_pred_keypoints.21 : Tensor? = prim::GetAttr[name="_pred_keypoints"](%i.5)
                                  %4837 : bool = aten::__isnot__(%_pred_keypoints.21, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:164:11
                                  %4838 : int = prim::If(%4837) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:164:8
                                    block0():
                                      %t.345 : Tensor = prim::unchecked_cast(%_pred_keypoints.21)
                                      %4840 : int = aten::len(%t.345) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:165:19
                                      -> (%4840)
                                    block1():
                                      %_pred_keypoint_heatmaps.25 : Tensor? = prim::GetAttr[name="_pred_keypoint_heatmaps"](%i.5)
                                      %4842 : bool = aten::__isnot__(%_pred_keypoint_heatmaps.25, %57) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:169:11
                                      %4843 : int = prim::If(%4842) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:169:8
                                        block0():
                                          %t.361 : Tensor = prim::unchecked_cast(%_pred_keypoint_heatmaps.25)
                                          %4845 : int = aten::len(%t.361) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:170:19
                                          -> (%4845)
                                        block1():
                                           = prim::RaiseException(%15, %41) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:173:8
                                          -> (%4801)
                                      -> (%4843)
                                  -> (%4838)
                              -> (%4833)
                          -> (%4828)
                      -> (%4823)
                  -> (%4816)
              -> (%4811)
          %4846 : int[] = aten::append(%num_boxes_per_image.1, %4804) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:154:26
          -> (%58)
      %mask_probs_pred.15 : Tensor[] = aten::split(%mask_probs_pred, %num_boxes_per_image.1, %49) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:155:22
      %4848 : int = aten::len(%mask_probs_pred.15) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:157:4
      %4849 : int = aten::len(%results.3) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:157:4
      %4850 : int[] = prim::ListConstruct(%4848, %4849)
      %4851 : int = prim::min(%4850) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:157:4
       = prim::Loop(%4851, %58) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:157:4
        block0(%4852 : int):
          %prob.1 : Tensor = aten::__getitem__(%mask_probs_pred.15, %4852) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:157:4
          %instances.1 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%results.3, %4852) # /home/kelechi/detectron2/detectron2/modeling/roi_heads/mask_head.py:157:4
           = prim::SetAttr[name="_pred_masks"](%instances.1, %prob.1)
          -> (%58)
      -> (%results.3)
   = prim::If(%4) # /home/kelechi/detectron2/detectron2/modeling/meta_arch/rcnn.py:218:8
    block0():
       = prim::RaiseException(%59, %57) # /home/kelechi/detectron2/detectron2/modeling/meta_arch/rcnn.py:219:12
      -> ()
    block1():
      -> ()
  %9 : Dict(str, Tensor)[] = prim::ListConstruct()
  %10 : int = aten::len(%instances.3) # /home/kelechi/detectron2/tools/deploy/export_model.py:90:23
   = prim::Loop(%10, %2) # /home/kelechi/detectron2/tools/deploy/export_model.py:90:23
    block0(%11 : int):
      %i.15 : __torch__.detectron2.export.torchscript_patch1.ScriptedInstances1 = aten::__getitem__(%instances.3, %11) # /home/kelechi/detectron2/tools/deploy/export_model.py:90:23
      %4855 : NoneType = prim::Constant() # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:391:20
      %4856 : str = prim::Constant[value="proposal_boxes"]() # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:392:16
      %4857 : str = prim::Constant[value="objectness_logits"]() # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:397:16
      %4858 : str = prim::Constant[value="pred_boxes"]() # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:402:16
      %4859 : str = prim::Constant[value="scores"]() # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:407:16
      %4860 : str = prim::Constant[value="pred_classes"]() # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:412:16
      %4861 : str = prim::Constant[value="pred_masks"]() # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:417:16
      %4862 : str = prim::Constant[value="pred_keypoints"]() # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:422:16
      %4863 : str = prim::Constant[value="pred_keypoint_heatmaps"]() # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:427:16
      %ret.1 : Dict(str, Tensor) = prim::DictConstruct()
      %_proposal_boxes : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_proposal_boxes"](%i.15)
      %4866 : bool = aten::__isnot__(%_proposal_boxes, %4855) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:391:11
       = prim::If(%4866) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:391:8
        block0():
          %t.5 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_proposal_boxes)
          %tensor.1 : Tensor = prim::GetAttr[name="tensor"](%t.5)
           = aten::_set_item(%ret.1, %4856, %tensor.1) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:392:12
          -> ()
        block1():
          -> ()
      %_objectness_logits : Tensor? = prim::GetAttr[name="_objectness_logits"](%i.15)
      %4870 : bool = aten::__isnot__(%_objectness_logits, %4855) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:396:11
       = prim::If(%4870) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:396:8
        block0():
          %t.23 : Tensor = prim::unchecked_cast(%_objectness_logits)
           = aten::_set_item(%ret.1, %4857, %t.23) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:397:12
          -> ()
        block1():
          -> ()
      %_pred_boxes : __torch__.detectron2.structures.boxes.Boxes? = prim::GetAttr[name="_pred_boxes"](%i.15)
      %4873 : bool = aten::__isnot__(%_pred_boxes, %4855) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:401:11
       = prim::If(%4873) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:401:8
        block0():
          %t.41 : __torch__.detectron2.structures.boxes.Boxes = prim::unchecked_cast(%_pred_boxes)
          %tensor : Tensor = prim::GetAttr[name="tensor"](%t.41)
           = aten::_set_item(%ret.1, %4858, %tensor) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:402:12
          -> ()
        block1():
          -> ()
      %_scores : Tensor? = prim::GetAttr[name="_scores"](%i.15)
      %4877 : bool = aten::__isnot__(%_scores, %4855) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:406:11
       = prim::If(%4877) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:406:8
        block0():
          %t.59 : Tensor = prim::unchecked_cast(%_scores)
           = aten::_set_item(%ret.1, %4859, %t.59) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:407:12
          -> ()
        block1():
          -> ()
      %_pred_classes : Tensor? = prim::GetAttr[name="_pred_classes"](%i.15)
      %4880 : bool = aten::__isnot__(%_pred_classes, %4855) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:411:11
       = prim::If(%4880) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:411:8
        block0():
          %t.77 : Tensor = prim::unchecked_cast(%_pred_classes)
           = aten::_set_item(%ret.1, %4860, %t.77) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:412:12
          -> ()
        block1():
          -> ()
      %_pred_masks : Tensor? = prim::GetAttr[name="_pred_masks"](%i.15)
      %4883 : bool = aten::__isnot__(%_pred_masks, %4855) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:416:11
       = prim::If(%4883) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:416:8
        block0():
          %t.95 : Tensor = prim::unchecked_cast(%_pred_masks)
           = aten::_set_item(%ret.1, %4861, %t.95) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:417:12
          -> ()
        block1():
          -> ()
      %_pred_keypoints : Tensor? = prim::GetAttr[name="_pred_keypoints"](%i.15)
      %4886 : bool = aten::__isnot__(%_pred_keypoints, %4855) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:421:11
       = prim::If(%4886) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:421:8
        block0():
          %t.113 : Tensor = prim::unchecked_cast(%_pred_keypoints)
           = aten::_set_item(%ret.1, %4862, %t.113) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:422:12
          -> ()
        block1():
          -> ()
      %_pred_keypoint_heatmaps : Tensor? = prim::GetAttr[name="_pred_keypoint_heatmaps"](%i.15)
      %4889 : bool = aten::__isnot__(%_pred_keypoint_heatmaps, %4855) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:426:11
       = prim::If(%4889) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:426:8
        block0():
          %t.131 : Tensor = prim::unchecked_cast(%_pred_keypoint_heatmaps)
           = aten::_set_item(%ret.1, %4863, %t.131) # /tmp/detectron2ixyxk_co/tmph4ywe4hk.py:427:12
          -> ()
        block1():
          -> ()
      %14 : Dict(str, Tensor)[] = aten::append(%9, %ret.1) # /home/kelechi/detectron2/tools/deploy/export_model.py:90:23
      -> (%2)
  return (%9)
